
COMPETETION.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000073f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  000073f6  0000748a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005d  00800170  00800170  0000759a  2**0
                  ALLOC
  3 .stab         00005a18  00000000  00000000  0000759c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001acd  00000000  00000000  0000cfb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ea81  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000ec21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ee13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0001121e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000125a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001377c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0001393c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00013c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000145a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f3 e7       	ldi	r31, 0x73	; 115
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3c       	cpi	r26, 0xCD	; 205
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 54 13 	call	0x26a8	; 0x26a8 <main>
      8a:	0c 94 f9 39 	jmp	0x73f2	; 0x73f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c2 39 	jmp	0x7384	; 0x7384 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 de 39 	jmp	0x73bc	; 0x73bc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ce 39 	jmp	0x739c	; 0x739c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ea 39 	jmp	0x73d4	; 0x73d4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ce 39 	jmp	0x739c	; 0x739c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ea 39 	jmp	0x73d4	; 0x73d4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c2 39 	jmp	0x7384	; 0x7384 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 de 39 	jmp	0x73bc	; 0x73bc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ca 39 	jmp	0x7394	; 0x7394 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e6 39 	jmp	0x73cc	; 0x73cc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ce 39 	jmp	0x739c	; 0x739c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ea 39 	jmp	0x73d4	; 0x73d4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ce 39 	jmp	0x739c	; 0x739c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ea 39 	jmp	0x73d4	; 0x73d4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ce 39 	jmp	0x739c	; 0x739c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ea 39 	jmp	0x73d4	; 0x73d4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d2 39 	jmp	0x73a4	; 0x73a4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ee 39 	jmp	0x73dc	; 0x73dc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ca 39 	jmp	0x7394	; 0x7394 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e6 39 	jmp	0x73cc	; 0x73cc <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_voidSetPinDirection>:




void DIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	27 97       	sbiw	r28, 0x07	; 7
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	6a 83       	std	Y+2, r22	; 0x02
     e46:	4b 83       	std	Y+3, r20	; 0x03

	if (Copy_u8Direction==DIO_u8INPUT)
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	88 23       	and	r24, r24
     e4c:	09 f0       	breq	.+2      	; 0xe50 <DIO_voidSetPinDirection+0x22>
     e4e:	75 c0       	rjmp	.+234    	; 0xf3a <DIO_voidSetPinDirection+0x10c>
	{
		switch(Copy_u8Port)
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	3f 83       	std	Y+7, r19	; 0x07
     e58:	2e 83       	std	Y+6, r18	; 0x06
     e5a:	8e 81       	ldd	r24, Y+6	; 0x06
     e5c:	9f 81       	ldd	r25, Y+7	; 0x07
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	91 05       	cpc	r25, r1
     e62:	61 f1       	breq	.+88     	; 0xebc <DIO_voidSetPinDirection+0x8e>
     e64:	2e 81       	ldd	r18, Y+6	; 0x06
     e66:	3f 81       	ldd	r19, Y+7	; 0x07
     e68:	23 30       	cpi	r18, 0x03	; 3
     e6a:	31 05       	cpc	r19, r1
     e6c:	34 f4       	brge	.+12     	; 0xe7a <DIO_voidSetPinDirection+0x4c>
     e6e:	8e 81       	ldd	r24, Y+6	; 0x06
     e70:	9f 81       	ldd	r25, Y+7	; 0x07
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	91 05       	cpc	r25, r1
     e76:	69 f0       	breq	.+26     	; 0xe92 <DIO_voidSetPinDirection+0x64>
     e78:	d3 c0       	rjmp	.+422    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
     e7a:	2e 81       	ldd	r18, Y+6	; 0x06
     e7c:	3f 81       	ldd	r19, Y+7	; 0x07
     e7e:	23 30       	cpi	r18, 0x03	; 3
     e80:	31 05       	cpc	r19, r1
     e82:	89 f1       	breq	.+98     	; 0xee6 <DIO_voidSetPinDirection+0xb8>
     e84:	8e 81       	ldd	r24, Y+6	; 0x06
     e86:	9f 81       	ldd	r25, Y+7	; 0x07
     e88:	84 30       	cpi	r24, 0x04	; 4
     e8a:	91 05       	cpc	r25, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <DIO_voidSetPinDirection+0x62>
     e8e:	40 c0       	rjmp	.+128    	; 0xf10 <DIO_voidSetPinDirection+0xe2>
     e90:	c7 c0       	rjmp	.+398    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		{
		case DIO_u8PORTA : CLR_BIT(DDRA , Copy_u8Pin); break;
     e92:	aa e3       	ldi	r26, 0x3A	; 58
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	ea e3       	ldi	r30, 0x3A	; 58
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_voidSetPinDirection+0x82>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_voidSetPinDirection+0x7e>
     eb4:	80 95       	com	r24
     eb6:	84 23       	and	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	b2 c0       	rjmp	.+356    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTB : CLR_BIT(DDRB , Copy_u8Pin); break;
     ebc:	a7 e3       	ldi	r26, 0x37	; 55
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e7 e3       	ldi	r30, 0x37	; 55
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_voidSetPinDirection+0xac>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO_voidSetPinDirection+0xa8>
     ede:	80 95       	com	r24
     ee0:	84 23       	and	r24, r20
     ee2:	8c 93       	st	X, r24
     ee4:	9d c0       	rjmp	.+314    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTC : CLR_BIT(DDRC , Copy_u8Pin); break;
     ee6:	a4 e3       	ldi	r26, 0x34	; 52
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e4 e3       	ldi	r30, 0x34	; 52
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_voidSetPinDirection+0xd6>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_voidSetPinDirection+0xd2>
     f08:	80 95       	com	r24
     f0a:	84 23       	and	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	88 c0       	rjmp	.+272    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTD : CLR_BIT(DDRD , Copy_u8Pin); break;
     f10:	a1 e3       	ldi	r26, 0x31	; 49
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e1 e3       	ldi	r30, 0x31	; 49
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_voidSetPinDirection+0x100>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_voidSetPinDirection+0xfc>
     f32:	80 95       	com	r24
     f34:	84 23       	and	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	73 c0       	rjmp	.+230    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		}
	}
	else if(Copy_u8Direction==DIO_u8OUTPUT)
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	09 f0       	breq	.+2      	; 0xf42 <DIO_voidSetPinDirection+0x114>
     f40:	6f c0       	rjmp	.+222    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
	{
		switch(Copy_u8Port)
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	3d 83       	std	Y+5, r19	; 0x05
     f4a:	2c 83       	std	Y+4, r18	; 0x04
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	9d 81       	ldd	r25, Y+5	; 0x05
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	91 05       	cpc	r25, r1
     f54:	51 f1       	breq	.+84     	; 0xfaa <DIO_voidSetPinDirection+0x17c>
     f56:	2c 81       	ldd	r18, Y+4	; 0x04
     f58:	3d 81       	ldd	r19, Y+5	; 0x05
     f5a:	23 30       	cpi	r18, 0x03	; 3
     f5c:	31 05       	cpc	r19, r1
     f5e:	34 f4       	brge	.+12     	; 0xf6c <DIO_voidSetPinDirection+0x13e>
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	91 05       	cpc	r25, r1
     f68:	61 f0       	breq	.+24     	; 0xf82 <DIO_voidSetPinDirection+0x154>
     f6a:	5a c0       	rjmp	.+180    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
     f6c:	2c 81       	ldd	r18, Y+4	; 0x04
     f6e:	3d 81       	ldd	r19, Y+5	; 0x05
     f70:	23 30       	cpi	r18, 0x03	; 3
     f72:	31 05       	cpc	r19, r1
     f74:	71 f1       	breq	.+92     	; 0xfd2 <DIO_voidSetPinDirection+0x1a4>
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	9d 81       	ldd	r25, Y+5	; 0x05
     f7a:	84 30       	cpi	r24, 0x04	; 4
     f7c:	91 05       	cpc	r25, r1
     f7e:	e9 f1       	breq	.+122    	; 0xffa <DIO_voidSetPinDirection+0x1cc>
     f80:	4f c0       	rjmp	.+158    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		{
		case DIO_u8PORTA : SET_BIT(DDRA , Copy_u8Pin); break;
     f82:	aa e3       	ldi	r26, 0x3A	; 58
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	ea e3       	ldi	r30, 0x3A	; 58
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_voidSetPinDirection+0x172>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_voidSetPinDirection+0x16e>
     fa4:	84 2b       	or	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	3b c0       	rjmp	.+118    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTB : SET_BIT(DDRB , Copy_u8Pin); break;
     faa:	a7 e3       	ldi	r26, 0x37	; 55
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e7 e3       	ldi	r30, 0x37	; 55
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_voidSetPinDirection+0x19a>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_voidSetPinDirection+0x196>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	27 c0       	rjmp	.+78     	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTC : SET_BIT(DDRC , Copy_u8Pin); break;
     fd2:	a4 e3       	ldi	r26, 0x34	; 52
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e4 e3       	ldi	r30, 0x34	; 52
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_voidSetPinDirection+0x1c2>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <DIO_voidSetPinDirection+0x1be>
     ff4:	84 2b       	or	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	13 c0       	rjmp	.+38     	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTD : SET_BIT(DDRD , Copy_u8Pin); break;
     ffa:	a1 e3       	ldi	r26, 0x31	; 49
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e1 e3       	ldi	r30, 0x31	; 49
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_voidSetPinDirection+0x1ea>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_voidSetPinDirection+0x1e6>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
		}
	}
}
    1020:	27 96       	adiw	r28, 0x07	; 7
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <DIO_voidSetPinValue>:




void DIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	27 97       	sbiw	r28, 0x07	; 7
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	6a 83       	std	Y+2, r22	; 0x02
    104a:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Value==DIO_u8LOW)
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	88 23       	and	r24, r24
    1050:	09 f0       	breq	.+2      	; 0x1054 <DIO_voidSetPinValue+0x22>
    1052:	75 c0       	rjmp	.+234    	; 0x113e <DIO_voidSetPinValue+0x10c>
	{
		switch(Copy_u8Port)
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	3f 83       	std	Y+7, r19	; 0x07
    105c:	2e 83       	std	Y+6, r18	; 0x06
    105e:	8e 81       	ldd	r24, Y+6	; 0x06
    1060:	9f 81       	ldd	r25, Y+7	; 0x07
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	91 05       	cpc	r25, r1
    1066:	61 f1       	breq	.+88     	; 0x10c0 <DIO_voidSetPinValue+0x8e>
    1068:	2e 81       	ldd	r18, Y+6	; 0x06
    106a:	3f 81       	ldd	r19, Y+7	; 0x07
    106c:	23 30       	cpi	r18, 0x03	; 3
    106e:	31 05       	cpc	r19, r1
    1070:	34 f4       	brge	.+12     	; 0x107e <DIO_voidSetPinValue+0x4c>
    1072:	8e 81       	ldd	r24, Y+6	; 0x06
    1074:	9f 81       	ldd	r25, Y+7	; 0x07
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	91 05       	cpc	r25, r1
    107a:	69 f0       	breq	.+26     	; 0x1096 <DIO_voidSetPinValue+0x64>
    107c:	d3 c0       	rjmp	.+422    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
    107e:	2e 81       	ldd	r18, Y+6	; 0x06
    1080:	3f 81       	ldd	r19, Y+7	; 0x07
    1082:	23 30       	cpi	r18, 0x03	; 3
    1084:	31 05       	cpc	r19, r1
    1086:	89 f1       	breq	.+98     	; 0x10ea <DIO_voidSetPinValue+0xb8>
    1088:	8e 81       	ldd	r24, Y+6	; 0x06
    108a:	9f 81       	ldd	r25, Y+7	; 0x07
    108c:	84 30       	cpi	r24, 0x04	; 4
    108e:	91 05       	cpc	r25, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <DIO_voidSetPinValue+0x62>
    1092:	40 c0       	rjmp	.+128    	; 0x1114 <DIO_voidSetPinValue+0xe2>
    1094:	c7 c0       	rjmp	.+398    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		{
		case DIO_u8PORTA : CLR_BIT(PORTA , Copy_u8Pin); break;
    1096:	ab e3       	ldi	r26, 0x3B	; 59
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	eb e3       	ldi	r30, 0x3B	; 59
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_voidSetPinValue+0x82>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_voidSetPinValue+0x7e>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	b2 c0       	rjmp	.+356    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTB : CLR_BIT(PORTB , Copy_u8Pin); break;
    10c0:	a8 e3       	ldi	r26, 0x38	; 56
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e8 e3       	ldi	r30, 0x38	; 56
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_voidSetPinValue+0xac>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_voidSetPinValue+0xa8>
    10e2:	80 95       	com	r24
    10e4:	84 23       	and	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	9d c0       	rjmp	.+314    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTC : CLR_BIT(PORTC , Copy_u8Pin); break;
    10ea:	a5 e3       	ldi	r26, 0x35	; 53
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e5 e3       	ldi	r30, 0x35	; 53
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_voidSetPinValue+0xd6>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_voidSetPinValue+0xd2>
    110c:	80 95       	com	r24
    110e:	84 23       	and	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	88 c0       	rjmp	.+272    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTD : CLR_BIT(PORTD , Copy_u8Pin); break;
    1114:	a2 e3       	ldi	r26, 0x32	; 50
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e2 e3       	ldi	r30, 0x32	; 50
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_voidSetPinValue+0x100>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_voidSetPinValue+0xfc>
    1136:	80 95       	com	r24
    1138:	84 23       	and	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	73 c0       	rjmp	.+230    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		}
	}
	else if(Copy_u8Value==DIO_u8HIGH)
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	09 f0       	breq	.+2      	; 0x1146 <DIO_voidSetPinValue+0x114>
    1144:	6f c0       	rjmp	.+222    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
	{
		switch(Copy_u8Port)
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	3d 83       	std	Y+5, r19	; 0x05
    114e:	2c 83       	std	Y+4, r18	; 0x04
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	9d 81       	ldd	r25, Y+5	; 0x05
    1154:	82 30       	cpi	r24, 0x02	; 2
    1156:	91 05       	cpc	r25, r1
    1158:	51 f1       	breq	.+84     	; 0x11ae <DIO_voidSetPinValue+0x17c>
    115a:	2c 81       	ldd	r18, Y+4	; 0x04
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	23 30       	cpi	r18, 0x03	; 3
    1160:	31 05       	cpc	r19, r1
    1162:	34 f4       	brge	.+12     	; 0x1170 <DIO_voidSetPinValue+0x13e>
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	9d 81       	ldd	r25, Y+5	; 0x05
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	61 f0       	breq	.+24     	; 0x1186 <DIO_voidSetPinValue+0x154>
    116e:	5a c0       	rjmp	.+180    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
    1170:	2c 81       	ldd	r18, Y+4	; 0x04
    1172:	3d 81       	ldd	r19, Y+5	; 0x05
    1174:	23 30       	cpi	r18, 0x03	; 3
    1176:	31 05       	cpc	r19, r1
    1178:	71 f1       	breq	.+92     	; 0x11d6 <DIO_voidSetPinValue+0x1a4>
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	84 30       	cpi	r24, 0x04	; 4
    1180:	91 05       	cpc	r25, r1
    1182:	e9 f1       	breq	.+122    	; 0x11fe <DIO_voidSetPinValue+0x1cc>
    1184:	4f c0       	rjmp	.+158    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		{
		case DIO_u8PORTA : SET_BIT(PORTA , Copy_u8Pin); break;
    1186:	ab e3       	ldi	r26, 0x3B	; 59
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	eb e3       	ldi	r30, 0x3B	; 59
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_voidSetPinValue+0x172>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_voidSetPinValue+0x16e>
    11a8:	84 2b       	or	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	3b c0       	rjmp	.+118    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTB : SET_BIT(PORTB , Copy_u8Pin); break;
    11ae:	a8 e3       	ldi	r26, 0x38	; 56
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e8 e3       	ldi	r30, 0x38	; 56
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_voidSetPinValue+0x19a>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_voidSetPinValue+0x196>
    11d0:	84 2b       	or	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	27 c0       	rjmp	.+78     	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTC : SET_BIT(PORTC , Copy_u8Pin); break;
    11d6:	a5 e3       	ldi	r26, 0x35	; 53
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e5 e3       	ldi	r30, 0x35	; 53
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_voidSetPinValue+0x1c2>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_voidSetPinValue+0x1be>
    11f8:	84 2b       	or	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	13 c0       	rjmp	.+38     	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTD : SET_BIT(PORTD , Copy_u8Pin); break;
    11fe:	a2 e3       	ldi	r26, 0x32	; 50
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e2 e3       	ldi	r30, 0x32	; 50
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_voidSetPinValue+0x1ea>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_voidSetPinValue+0x1e6>
    1220:	84 2b       	or	r24, r20
    1222:	8c 93       	st	X, r24
		}
	}
}
    1224:	27 96       	adiw	r28, 0x07	; 7
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <DIO_voidSetPortDirection>:




void DIO_voidSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	00 d0       	rcall	.+0      	; 0x123c <DIO_voidSetPortDirection+0x6>
    123c:	00 d0       	rcall	.+0      	; 0x123e <DIO_voidSetPortDirection+0x8>
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	3c 83       	std	Y+4, r19	; 0x04
    124e:	2b 83       	std	Y+3, r18	; 0x03
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	82 30       	cpi	r24, 0x02	; 2
    1256:	91 05       	cpc	r25, r1
    1258:	d9 f0       	breq	.+54     	; 0x1290 <DIO_voidSetPortDirection+0x5a>
    125a:	2b 81       	ldd	r18, Y+3	; 0x03
    125c:	3c 81       	ldd	r19, Y+4	; 0x04
    125e:	23 30       	cpi	r18, 0x03	; 3
    1260:	31 05       	cpc	r19, r1
    1262:	34 f4       	brge	.+12     	; 0x1270 <DIO_voidSetPortDirection+0x3a>
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	9c 81       	ldd	r25, Y+4	; 0x04
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	91 05       	cpc	r25, r1
    126c:	61 f0       	breq	.+24     	; 0x1286 <DIO_voidSetPortDirection+0x50>
    126e:	1e c0       	rjmp	.+60     	; 0x12ac <DIO_voidSetPortDirection+0x76>
    1270:	2b 81       	ldd	r18, Y+3	; 0x03
    1272:	3c 81       	ldd	r19, Y+4	; 0x04
    1274:	23 30       	cpi	r18, 0x03	; 3
    1276:	31 05       	cpc	r19, r1
    1278:	81 f0       	breq	.+32     	; 0x129a <DIO_voidSetPortDirection+0x64>
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	84 30       	cpi	r24, 0x04	; 4
    1280:	91 05       	cpc	r25, r1
    1282:	81 f0       	breq	.+32     	; 0x12a4 <DIO_voidSetPortDirection+0x6e>
    1284:	13 c0       	rjmp	.+38     	; 0x12ac <DIO_voidSetPortDirection+0x76>
	{
	case DIO_u8PORTA : DDRA=Copy_u8Direction; break;
    1286:	ea e3       	ldi	r30, 0x3A	; 58
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	80 83       	st	Z, r24
    128e:	0e c0       	rjmp	.+28     	; 0x12ac <DIO_voidSetPortDirection+0x76>
	case DIO_u8PORTB : DDRB=Copy_u8Direction; break;
    1290:	e7 e3       	ldi	r30, 0x37	; 55
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	80 83       	st	Z, r24
    1298:	09 c0       	rjmp	.+18     	; 0x12ac <DIO_voidSetPortDirection+0x76>
	case DIO_u8PORTC : DDRC=Copy_u8Direction; break;
    129a:	e4 e3       	ldi	r30, 0x34	; 52
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	80 83       	st	Z, r24
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <DIO_voidSetPortDirection+0x76>
	case DIO_u8PORTD : DDRD=Copy_u8Direction; break;
    12a4:	e1 e3       	ldi	r30, 0x31	; 49
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	80 83       	st	Z, r24

	}
}
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <DIO_voidSetPortValue>:




void DIO_voidSetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <DIO_voidSetPortValue+0x6>
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <DIO_voidSetPortValue+0x8>
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3c 83       	std	Y+4, r19	; 0x04
    12d2:	2b 83       	std	Y+3, r18	; 0x03
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	91 05       	cpc	r25, r1
    12dc:	d9 f0       	breq	.+54     	; 0x1314 <DIO_voidSetPortValue+0x5a>
    12de:	2b 81       	ldd	r18, Y+3	; 0x03
    12e0:	3c 81       	ldd	r19, Y+4	; 0x04
    12e2:	23 30       	cpi	r18, 0x03	; 3
    12e4:	31 05       	cpc	r19, r1
    12e6:	34 f4       	brge	.+12     	; 0x12f4 <DIO_voidSetPortValue+0x3a>
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	91 05       	cpc	r25, r1
    12f0:	61 f0       	breq	.+24     	; 0x130a <DIO_voidSetPortValue+0x50>
    12f2:	1e c0       	rjmp	.+60     	; 0x1330 <DIO_voidSetPortValue+0x76>
    12f4:	2b 81       	ldd	r18, Y+3	; 0x03
    12f6:	3c 81       	ldd	r19, Y+4	; 0x04
    12f8:	23 30       	cpi	r18, 0x03	; 3
    12fa:	31 05       	cpc	r19, r1
    12fc:	81 f0       	breq	.+32     	; 0x131e <DIO_voidSetPortValue+0x64>
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	84 30       	cpi	r24, 0x04	; 4
    1304:	91 05       	cpc	r25, r1
    1306:	81 f0       	breq	.+32     	; 0x1328 <DIO_voidSetPortValue+0x6e>
    1308:	13 c0       	rjmp	.+38     	; 0x1330 <DIO_voidSetPortValue+0x76>
	{
	case DIO_u8PORTA : PORTA=Copy_u8Value; break;
    130a:	eb e3       	ldi	r30, 0x3B	; 59
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	80 83       	st	Z, r24
    1312:	0e c0       	rjmp	.+28     	; 0x1330 <DIO_voidSetPortValue+0x76>
	case DIO_u8PORTB : PORTB=Copy_u8Value; break;
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	80 83       	st	Z, r24
    131c:	09 c0       	rjmp	.+18     	; 0x1330 <DIO_voidSetPortValue+0x76>
	case DIO_u8PORTC : PORTC=Copy_u8Value; break;
    131e:	e5 e3       	ldi	r30, 0x35	; 53
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	80 83       	st	Z, r24
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <DIO_voidSetPortValue+0x76>
	case DIO_u8PORTD : PORTD=Copy_u8Value; break;
    1328:	e2 e3       	ldi	r30, 0x32	; 50
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	80 83       	st	Z, r24

	}
}
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <DIO_u8GetPinValue>:




u8 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <DIO_u8GetPinValue+0x6>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <DIO_u8GetPinValue+0x8>
    1346:	0f 92       	push	r0
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result;
	switch(Copy_u8Port)
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	3d 83       	std	Y+5, r19	; 0x05
    1358:	2c 83       	std	Y+4, r18	; 0x04
    135a:	4c 81       	ldd	r20, Y+4	; 0x04
    135c:	5d 81       	ldd	r21, Y+5	; 0x05
    135e:	42 30       	cpi	r20, 0x02	; 2
    1360:	51 05       	cpc	r21, r1
    1362:	41 f1       	breq	.+80     	; 0x13b4 <DIO_u8GetPinValue+0x76>
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	91 05       	cpc	r25, r1
    136c:	34 f4       	brge	.+12     	; 0x137a <DIO_u8GetPinValue+0x3c>
    136e:	2c 81       	ldd	r18, Y+4	; 0x04
    1370:	3d 81       	ldd	r19, Y+5	; 0x05
    1372:	21 30       	cpi	r18, 0x01	; 1
    1374:	31 05       	cpc	r19, r1
    1376:	61 f0       	breq	.+24     	; 0x1390 <DIO_u8GetPinValue+0x52>
    1378:	52 c0       	rjmp	.+164    	; 0x141e <DIO_u8GetPinValue+0xe0>
    137a:	4c 81       	ldd	r20, Y+4	; 0x04
    137c:	5d 81       	ldd	r21, Y+5	; 0x05
    137e:	43 30       	cpi	r20, 0x03	; 3
    1380:	51 05       	cpc	r21, r1
    1382:	51 f1       	breq	.+84     	; 0x13d8 <DIO_u8GetPinValue+0x9a>
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	9d 81       	ldd	r25, Y+5	; 0x05
    1388:	84 30       	cpi	r24, 0x04	; 4
    138a:	91 05       	cpc	r25, r1
    138c:	b9 f1       	breq	.+110    	; 0x13fc <DIO_u8GetPinValue+0xbe>
    138e:	47 c0       	rjmp	.+142    	; 0x141e <DIO_u8GetPinValue+0xe0>
	{
	case DIO_u8PORTA : Local_u8Result = GET_BIT(PINA , Copy_u8Pin); break;
    1390:	e9 e3       	ldi	r30, 0x39	; 57
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a9 01       	movw	r20, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_u8GetPinValue+0x6a>
    13a4:	55 95       	asr	r21
    13a6:	47 95       	ror	r20
    13a8:	8a 95       	dec	r24
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_u8GetPinValue+0x66>
    13ac:	ca 01       	movw	r24, r20
    13ae:	81 70       	andi	r24, 0x01	; 1
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	35 c0       	rjmp	.+106    	; 0x141e <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTB : Local_u8Result = GET_BIT(PINB , Copy_u8Pin); break;
    13b4:	e6 e3       	ldi	r30, 0x36	; 54
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	88 2f       	mov	r24, r24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	a9 01       	movw	r20, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_u8GetPinValue+0x8e>
    13c8:	55 95       	asr	r21
    13ca:	47 95       	ror	r20
    13cc:	8a 95       	dec	r24
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_u8GetPinValue+0x8a>
    13d0:	ca 01       	movw	r24, r20
    13d2:	81 70       	andi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	23 c0       	rjmp	.+70     	; 0x141e <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTC : Local_u8Result = GET_BIT(PINC , Copy_u8Pin); break;
    13d8:	e3 e3       	ldi	r30, 0x33	; 51
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a9 01       	movw	r20, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_u8GetPinValue+0xb2>
    13ec:	55 95       	asr	r21
    13ee:	47 95       	ror	r20
    13f0:	8a 95       	dec	r24
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_u8GetPinValue+0xae>
    13f4:	ca 01       	movw	r24, r20
    13f6:	81 70       	andi	r24, 0x01	; 1
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	11 c0       	rjmp	.+34     	; 0x141e <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTD : Local_u8Result = GET_BIT(PIND , Copy_u8Pin); break;
    13fc:	e0 e3       	ldi	r30, 0x30	; 48
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	a9 01       	movw	r20, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <DIO_u8GetPinValue+0xd6>
    1410:	55 95       	asr	r21
    1412:	47 95       	ror	r20
    1414:	8a 95       	dec	r24
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <DIO_u8GetPinValue+0xd2>
    1418:	ca 01       	movw	r24, r20
    141a:	81 70       	andi	r24, 0x01	; 1
    141c:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8Result;
    141e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <GIE_voidEnable>:
#include "GIE_interface.h"
#include "GIE_register.h"


void GIE_voidEnable(void)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , DIO_PIN7_ID);
    1438:	af e5       	ldi	r26, 0x5F	; 95
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	ef e5       	ldi	r30, 0x5F	; 95
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	80 68       	ori	r24, 0x80	; 128
    1444:	8c 93       	st	X, r24
}
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <GIE_voidDisable>:


void GIE_voidDisable(void)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , DIO_PIN7_ID);
    1454:	af e5       	ldi	r26, 0x5F	; 95
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	ef e5       	ldi	r30, 0x5F	; 95
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	8f 77       	andi	r24, 0x7F	; 127
    1460:	8c 93       	st	X, r24
}
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <PWM0_voidInit>:
#include "DIO_register.h"
#include <avr/io.h>
#include <avr/interrupt.h>
/*DEFINE  (MODE,PRESCALER) IN REGIESTER TCCR0*/
void PWM0_voidInit(u8 duty_cycle)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	00 d0       	rcall	.+0      	; 0x146e <PWM0_voidInit+0x6>
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	8a 83       	std	Y+2, r24	; 0x02
	u8 timer_value=((u16)(duty_cycle*255)/100);
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	48 2f       	mov	r20, r24
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	ca 01       	movw	r24, r20
    147c:	9c 01       	movw	r18, r24
    147e:	22 0f       	add	r18, r18
    1480:	33 1f       	adc	r19, r19
    1482:	c9 01       	movw	r24, r18
    1484:	96 95       	lsr	r25
    1486:	98 2f       	mov	r25, r24
    1488:	88 27       	eor	r24, r24
    148a:	97 95       	ror	r25
    148c:	87 95       	ror	r24
    148e:	82 1b       	sub	r24, r18
    1490:	93 0b       	sbc	r25, r19
    1492:	84 0f       	add	r24, r20
    1494:	95 1f       	adc	r25, r21
    1496:	24 e6       	ldi	r18, 0x64	; 100
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	b9 01       	movw	r22, r18
    149c:	0e 94 ae 39 	call	0x735c	; 0x735c <__udivmodhi4>
    14a0:	cb 01       	movw	r24, r22
    14a2:	89 83       	std	Y+1, r24	; 0x01
	/*select the FASTPWM  mode */

	CLR_BIT(TCCR0,TCNT0);
    14a4:	a3 e5       	ldi	r26, 0x53	; 83
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e3 e5       	ldi	r30, 0x53	; 83
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	e2 e5       	ldi	r30, 0x52	; 82
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <PWM0_voidInit+0x5c>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	2a 95       	dec	r18
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <PWM0_voidInit+0x58>
    14c8:	80 95       	com	r24
    14ca:	84 23       	and	r24, r20
    14cc:	8c 93       	st	X, r24

	SET_BIT(TCCR0,WGM00);
    14ce:	a3 e5       	ldi	r26, 0x53	; 83
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e3 e5       	ldi	r30, 0x53	; 83
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	80 64       	ori	r24, 0x40	; 64
    14da:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    14dc:	a3 e5       	ldi	r26, 0x53	; 83
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e3 e5       	ldi	r30, 0x53	; 83
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	88 60       	ori	r24, 0x08	; 8
    14e8:	8c 93       	st	X, r24


	/*Clear OC0 on compare match, set OC0 at TOP (non inverted)*/
	SET_BIT(TCCR0,COM01);
    14ea:	a3 e5       	ldi	r26, 0x53	; 83
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e3 e5       	ldi	r30, 0x53	; 83
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 62       	ori	r24, 0x20	; 32
    14f6:	8c 93       	st	X, r24



	/*select the PRESACLER divided by 256*/

	SET_BIT(TCCR0,CS02);
    14f8:	a3 e5       	ldi	r26, 0x53	; 83
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e3 e5       	ldi	r30, 0x53	; 83
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	84 60       	ori	r24, 0x04	; 4
    1504:	8c 93       	st	X, r24

	DIO_voidSetPinDirection(DIO_u8PORTB, DIO_PIN3_ID, DIO_u8OUTPUT);
    1506:	82 e0       	ldi	r24, 0x02	; 2
    1508:	63 e0       	ldi	r22, 0x03	; 3
    150a:	41 e0       	ldi	r20, 0x01	; 1
    150c:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>

	OCR0=timer_value;
    1510:	ec e5       	ldi	r30, 0x5C	; 92
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	80 83       	st	Z, r24
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <PWM2_voidInit>:
#include "DIO_config.h"


/*DEFINE  (MODE,PRESCALER) IN REGIESTER TCCR2*/
void PWM2_voidInit(void)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
	/*select the FASTPWM  mode */

	SET_BIT(TCCR2 , WGM20);
    152a:	a5 e4       	ldi	r26, 0x45	; 69
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e5 e4       	ldi	r30, 0x45	; 69
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	80 64       	ori	r24, 0x40	; 64
    1536:	8c 93       	st	X, r24
	SET_BIT(TCCR2 , WGM21);
    1538:	a5 e4       	ldi	r26, 0x45	; 69
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e5 e4       	ldi	r30, 0x45	; 69
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	88 60       	ori	r24, 0x08	; 8
    1544:	8c 93       	st	X, r24

	/*select the PRESCALER divided by 1024 */

	SET_BIT(TCCR2,CS20);
    1546:	a5 e4       	ldi	r26, 0x45	; 69
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e5 e4       	ldi	r30, 0x45	; 69
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	81 60       	ori	r24, 0x01	; 1
    1552:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS21);
    1554:	a5 e4       	ldi	r26, 0x45	; 69
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e5 e4       	ldi	r30, 0x45	; 69
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8d 7f       	andi	r24, 0xFD	; 253
    1560:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS22);
    1562:	a5 e4       	ldi	r26, 0x45	; 69
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e5 e4       	ldi	r30, 0x45	; 69
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	84 60       	ori	r24, 0x04	; 4
    156e:	8c 93       	st	X, r24

   /* Set the Compare Match Value */
   OCR2 = TIMER2_OCRVAL;
    1570:	e3 e4       	ldi	r30, 0x43	; 67
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 e4       	ldi	r24, 0x40	; 64
    1576:	80 83       	st	Z, r24

/* Clear on Compare Match, Set at Top for OC0 Pin */
    SET_BIT(TCCR2 , COM21);
    1578:	a5 e4       	ldi	r26, 0x45	; 69
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e5 e4       	ldi	r30, 0x45	; 69
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	80 62       	ori	r24, 0x20	; 32
    1584:	8c 93       	st	X, r24
    CLR_BIT(TCCR2 , COM20);
    1586:	a5 e4       	ldi	r26, 0x45	; 69
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e5 e4       	ldi	r30, 0x45	; 69
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	8f 7e       	andi	r24, 0xEF	; 239
    1592:	8c 93       	st	X, r24
	DIO_voidSetPinDirection(DIO_u8PORTD, DIO_PIN7_ID, DIO_PORT_OUTPUT);
    1594:	84 e0       	ldi	r24, 0x04	; 4
    1596:	67 e0       	ldi	r22, 0x07	; 7
    1598:	4f ef       	ldi	r20, 0xFF	; 255
    159a:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
}
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <PWM2_voidSetOcrValue>:


void PWM2_voidSetOcrValue(u16 Copy_u16OcrValue)
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <PWM2_voidSetOcrValue+0x6>
    15aa:	0f 92       	push	r0
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	9b 83       	std	Y+3, r25	; 0x03
    15b2:	8a 83       	std	Y+2, r24	; 0x02

	u8 timer_value ;
	timer_value =((u16)(Copy_u16OcrValue*255)/100);
    15b4:	4a 81       	ldd	r20, Y+2	; 0x02
    15b6:	5b 81       	ldd	r21, Y+3	; 0x03
    15b8:	ca 01       	movw	r24, r20
    15ba:	9c 01       	movw	r18, r24
    15bc:	22 0f       	add	r18, r18
    15be:	33 1f       	adc	r19, r19
    15c0:	c9 01       	movw	r24, r18
    15c2:	96 95       	lsr	r25
    15c4:	98 2f       	mov	r25, r24
    15c6:	88 27       	eor	r24, r24
    15c8:	97 95       	ror	r25
    15ca:	87 95       	ror	r24
    15cc:	82 1b       	sub	r24, r18
    15ce:	93 0b       	sbc	r25, r19
    15d0:	84 0f       	add	r24, r20
    15d2:	95 1f       	adc	r25, r21
    15d4:	24 e6       	ldi	r18, 0x64	; 100
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	b9 01       	movw	r22, r18
    15da:	0e 94 ae 39 	call	0x735c	; 0x735c <__udivmodhi4>
    15de:	cb 01       	movw	r24, r22
    15e0:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(TCCR2,TCNT2);
    15e2:	a5 e4       	ldi	r26, 0x45	; 69
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e5 e4       	ldi	r30, 0x45	; 69
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	e4 e4       	ldi	r30, 0x44	; 68
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <PWM2_voidSetOcrValue+0x60>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <PWM2_voidSetOcrValue+0x5c>
    1608:	80 95       	com	r24
    160a:	84 23       	and	r24, r20
    160c:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,7);
    160e:	a5 e4       	ldi	r26, 0x45	; 69
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e5 e4       	ldi	r30, 0x45	; 69
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	8f 77       	andi	r24, 0x7F	; 127
    161a:	8c 93       	st	X, r24
	TCCR2 |= (1 << WGM20) | (1 << WGM21) | (1 << COM21) | (1 << CS22);
    161c:	a5 e4       	ldi	r26, 0x45	; 69
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e5 e4       	ldi	r30, 0x45	; 69
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	8c 66       	ori	r24, 0x6C	; 108
    1628:	8c 93       	st	X, r24
    OCR2=Copy_u16OcrValue;
    162a:	e3 e4       	ldi	r30, 0x43	; 67
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	80 83       	st	Z, r24

}
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <UART_voidInit>:
#include "UART_private.h"
#include "UART_regiester.h"


void UART_voidInit(void)
{    /*variable =register name */
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	0f 92       	push	r0
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
	u8 Local_UCSRC=0b10000110;
    1648:	86 e8       	ldi	r24, 0x86	; 134
    164a:	89 83       	std	Y+1, r24	; 0x01

	/*disable DOUPLE SPEED */
	CLR_BIT( UCSRA,1);
    164c:	ab e2       	ldi	r26, 0x2B	; 43
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	eb e2       	ldi	r30, 0x2B	; 43
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8d 7f       	andi	r24, 0xFD	; 253
    1658:	8c 93       	st	X, r24

	/* Set character size */
	CLR_BIT(UCSRB,2);
    165a:	aa e2       	ldi	r26, 0x2A	; 42
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	ea e2       	ldi	r30, 0x2A	; 42
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	8b 7f       	andi	r24, 0xFB	; 251
    1666:	8c 93       	st	X, r24
	SET_BIT(Local_UCSRC,2);
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	84 60       	ori	r24, 0x04	; 4
    166c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_UCSRC,1);
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	82 60       	ori	r24, 0x02	; 2
    1672:	89 83       	std	Y+1, r24	; 0x01

	/*register select(UCSRC register */
	SET_BIT(Local_UCSRC,7);
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	80 68       	ori	r24, 0x80	; 128
    1678:	89 83       	std	Y+1, r24	; 0x01

	/*Asynchronous mode */
	CLR_BIT(Local_UCSRC,6);
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	8f 7b       	andi	r24, 0xBF	; 191
    167e:	89 83       	std	Y+1, r24	; 0x01

	/*Disable Parity bit (no parity)*/
	CLR_BIT(Local_UCSRC,5);
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	8f 7d       	andi	r24, 0xDF	; 223
    1684:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_UCSRC,4);
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	8f 7e       	andi	r24, 0xEF	; 239
    168a:	89 83       	std	Y+1, r24	; 0x01

	/*stop bit (2bit)*/
	SET_BIT(Local_UCSRC,3);
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	88 60       	ori	r24, 0x08	; 8
    1690:	89 83       	std	Y+1, r24	; 0x01

	/*Assign The Value to the UCSRC Register*/
	UCSRC=Local_UCSRC;
    1692:	e0 e4       	ldi	r30, 0x40	; 64
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	80 83       	st	Z, r24

	/*Set THE Baud rate to 9600 bps*/
	UBRRL=51;
    169a:	e9 e2       	ldi	r30, 0x29	; 41
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	83 e3       	ldi	r24, 0x33	; 51
    16a0:	80 83       	st	Z, r24

	/*Enable receiver  */

	UART_voidReceiverEnable();
    16a2:	0e 94 89 0b 	call	0x1712	; 0x1712 <UART_voidReceiverEnable>

    /*Enable Transmitter  */

	UART_voidTransmitterEnable();
    16a6:	0e 94 a5 0b 	call	0x174a	; 0x174a <UART_voidTransmitterEnable>

}
    16aa:	0f 90       	pop	r0
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <UART_voidSendData>:
void UART_voidSendData(u8 Copy_u8Data)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	0f 92       	push	r0
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <UART_voidSendData+0x10>
	/*wait until the register be empty */

  while ((GET_BIT(UCSRA , 5)) !=1)
{
	  asm("NOP");
    16c0:	00 00       	nop
}
void UART_voidSendData(u8 Copy_u8Data)
{
	/*wait until the register be empty */

  while ((GET_BIT(UCSRA , 5)) !=1)
    16c2:	eb e2       	ldi	r30, 0x2B	; 43
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	82 95       	swap	r24
    16ca:	86 95       	lsr	r24
    16cc:	87 70       	andi	r24, 0x07	; 7
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	81 70       	andi	r24, 0x01	; 1
    16d4:	90 70       	andi	r25, 0x00	; 0
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	99 f3       	breq	.-26     	; 0x16c0 <UART_voidSendData+0xe>
{
	  asm("NOP");

}
  /*Select Data*/
  UDR=Copy_u8Data;
    16da:	ec e2       	ldi	r30, 0x2C	; 44
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	80 83       	st	Z, r24

}
    16e2:	0f 90       	pop	r0
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <UART_u8ReceiveData>:
u8   UART_u8ReceiveData(void)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <UART_u8ReceiveData+0xc>

	/*wait until the Receiving is completed */

	  while ((GET_BIT(UCSRA,7)) !=1)
	{
		  asm("NOP");
    16f4:	00 00       	nop
u8   UART_u8ReceiveData(void)
{

	/*wait until the Receiving is completed */

	  while ((GET_BIT(UCSRA,7)) !=1)
    16f6:	eb e2       	ldi	r30, 0x2B	; 43
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	88 1f       	adc	r24, r24
    16fe:	88 27       	eor	r24, r24
    1700:	88 1f       	adc	r24, r24
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	b9 f7       	brne	.-18     	; 0x16f4 <UART_u8ReceiveData+0xa>
	{
		  asm("NOP");

	}
	  /*read data */
	  return UDR;
    1706:	ec e2       	ldi	r30, 0x2C	; 44
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z

}
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <UART_voidReceiverEnable>:
void UART_voidReceiverEnable(void)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,4);
    171a:	aa e2       	ldi	r26, 0x2A	; 42
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	ea e2       	ldi	r30, 0x2A	; 42
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	80 61       	ori	r24, 0x10	; 16
    1726:	8c 93       	st	X, r24
}
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <UART_voidReceiverDisable>:
void UART_voidReceiverDisable(void)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,4);
    1736:	aa e2       	ldi	r26, 0x2A	; 42
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	ea e2       	ldi	r30, 0x2A	; 42
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	8f 7e       	andi	r24, 0xEF	; 239
    1742:	8c 93       	st	X, r24
}
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <UART_voidTransmitterEnable>:
void UART_voidTransmitterEnable(void)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,3);
    1752:	aa e2       	ldi	r26, 0x2A	; 42
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ea e2       	ldi	r30, 0x2A	; 42
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	88 60       	ori	r24, 0x08	; 8
    175e:	8c 93       	st	X, r24
}
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <UART_voidTransmitterDisable>:
void UART_voidTransmitterDisable(void)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,3);
    176e:	aa e2       	ldi	r26, 0x2A	; 42
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ea e2       	ldi	r30, 0x2A	; 42
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	87 7f       	andi	r24, 0xF7	; 247
    177a:	8c 93       	st	X, r24

}
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1782:	1f 92       	push	r1
    1784:	0f 92       	push	r0
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	0f 92       	push	r0
    178a:	11 24       	eor	r1, r1
    178c:	2f 93       	push	r18
    178e:	3f 93       	push	r19
    1790:	4f 93       	push	r20
    1792:	5f 93       	push	r21
    1794:	6f 93       	push	r22
    1796:	7f 93       	push	r23
    1798:	8f 93       	push	r24
    179a:	9f 93       	push	r25
    179c:	af 93       	push	r26
    179e:	bf 93       	push	r27
    17a0:	ef 93       	push	r30
    17a2:	ff 93       	push	r31
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    17ac:	80 91 70 01 	lds	r24, 0x0170
    17b0:	90 91 71 01 	lds	r25, 0x0171
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	29 f0       	breq	.+10     	; 0x17c2 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    17b8:	e0 91 70 01 	lds	r30, 0x0170
    17bc:	f0 91 71 01 	lds	r31, 0x0171
    17c0:	09 95       	icall
	}
}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	ff 91       	pop	r31
    17c8:	ef 91       	pop	r30
    17ca:	bf 91       	pop	r27
    17cc:	af 91       	pop	r26
    17ce:	9f 91       	pop	r25
    17d0:	8f 91       	pop	r24
    17d2:	7f 91       	pop	r23
    17d4:	6f 91       	pop	r22
    17d6:	5f 91       	pop	r21
    17d8:	4f 91       	pop	r20
    17da:	3f 91       	pop	r19
    17dc:	2f 91       	pop	r18
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	1f 90       	pop	r1
    17e6:	18 95       	reti

000017e8 <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <Icu_init+0x6>
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	9a 83       	std	Y+2, r25	; 0x02
    17f4:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    17f6:	a1 e3       	ldi	r26, 0x31	; 49
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e1 e3       	ldi	r30, 0x31	; 49
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	8f 7b       	andi	r24, 0xBF	; 191
    1802:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1804:	ef e4       	ldi	r30, 0x4F	; 79
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	8c e0       	ldi	r24, 0x0C	; 12
    180a:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    180c:	ae e4       	ldi	r26, 0x4E	; 78
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	ee e4       	ldi	r30, 0x4E	; 78
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	98 2f       	mov	r25, r24
    1818:	98 7f       	andi	r25, 0xF8	; 248
    181a:	e9 81       	ldd	r30, Y+1	; 0x01
    181c:	fa 81       	ldd	r31, Y+2	; 0x02
    181e:	80 81       	ld	r24, Z
    1820:	89 2b       	or	r24, r25
    1822:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    1824:	ae e4       	ldi	r26, 0x4E	; 78
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ee e4       	ldi	r30, 0x4E	; 78
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	28 2f       	mov	r18, r24
    1830:	2f 7b       	andi	r18, 0xBF	; 191
    1832:	e9 81       	ldd	r30, Y+1	; 0x01
    1834:	fa 81       	ldd	r31, Y+2	; 0x02
    1836:	81 81       	ldd	r24, Z+1	; 0x01
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	00 24       	eor	r0, r0
    183e:	96 95       	lsr	r25
    1840:	87 95       	ror	r24
    1842:	07 94       	ror	r0
    1844:	96 95       	lsr	r25
    1846:	87 95       	ror	r24
    1848:	07 94       	ror	r0
    184a:	98 2f       	mov	r25, r24
    184c:	80 2d       	mov	r24, r0
    184e:	82 2b       	or	r24, r18
    1850:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    1852:	ec e4       	ldi	r30, 0x4C	; 76
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	11 82       	std	Z+1, r1	; 0x01
    1858:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    185a:	e6 e4       	ldi	r30, 0x46	; 70
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	11 82       	std	Z+1, r1	; 0x01
    1860:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    1862:	a9 e5       	ldi	r26, 0x59	; 89
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e9 e5       	ldi	r30, 0x59	; 89
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	80 62       	ori	r24, 0x20	; 32
    186e:	8c 93       	st	X, r24
}
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	00 d0       	rcall	.+0      	; 0x1880 <Icu_setCallBack+0x6>
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	9a 81       	ldd	r25, Y+2	; 0x02
    188c:	90 93 71 01 	sts	0x0171, r25
    1890:	80 93 70 01 	sts	0x0170, r24
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	0f 92       	push	r0
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    18aa:	ae e4       	ldi	r26, 0x4E	; 78
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	ee e4       	ldi	r30, 0x4E	; 78
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	28 2f       	mov	r18, r24
    18b6:	2f 7b       	andi	r18, 0xBF	; 191
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	88 2f       	mov	r24, r24
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	00 24       	eor	r0, r0
    18c0:	96 95       	lsr	r25
    18c2:	87 95       	ror	r24
    18c4:	07 94       	ror	r0
    18c6:	96 95       	lsr	r25
    18c8:	87 95       	ror	r24
    18ca:	07 94       	ror	r0
    18cc:	98 2f       	mov	r25, r24
    18ce:	80 2d       	mov	r24, r0
    18d0:	82 2b       	or	r24, r18
    18d2:	8c 93       	st	X, r24
}
    18d4:	0f 90       	pop	r0
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
u16 Icu_getInputCaptureValue(void)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    18e4:	e6 e4       	ldi	r30, 0x46	; 70
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
}
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    18fa:	ec e4       	ldi	r30, 0x4C	; 76
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	11 82       	std	Z+1, r1	; 0x01
    1900:	10 82       	st	Z, r1
}
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <Icu_DeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_DeInit(void)
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1910:	ef e4       	ldi	r30, 0x4F	; 79
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	10 82       	st	Z, r1
	TCCR1B = 0;
    1916:	ee e4       	ldi	r30, 0x4E	; 78
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	10 82       	st	Z, r1
	TCNT1 = 0;
    191c:	ec e4       	ldi	r30, 0x4C	; 76
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	11 82       	std	Z+1, r1	; 0x01
    1922:	10 82       	st	Z, r1
	ICR1 = 0;
    1924:	e6 e4       	ldi	r30, 0x46	; 70
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	11 82       	std	Z+1, r1	; 0x01
    192a:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    192c:	a9 e5       	ldi	r26, 0x59	; 89
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e9 e5       	ldi	r30, 0x59	; 89
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	8f 7d       	andi	r24, 0xDF	; 223
    1938:	8c 93       	st	X, r24
}
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <DC_MOTOR1_Init>:
#include "DC_MOTOR_Interface.h"

//MOTOR 1 Functions 

void DC_MOTOR1_Init(void)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR1_PIN0,DIO_u8OUTPUT);
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR1_PIN1,DIO_u8OUTPUT);
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	61 e0       	ldi	r22, 0x01	; 1
    1956:	41 e0       	ldi	r20, 0x01	; 1
    1958:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTD,DIO_PIN7_ID,DIO_u8OUTPUT);/*PWM2 PIN IN MC (OC2) */
    195c:	84 e0       	ldi	r24, 0x04	; 4
    195e:	67 e0       	ldi	r22, 0x07	; 7
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
}
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <DC_MOTOR1_voidRotateClockwise>:

void DC_MOTOR1_voidRotateClockwise(void)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR1_PIN0 , DIO_u8LOW);
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR1_PIN1 , DIO_u8HIGH);
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	61 e0       	ldi	r22, 0x01	; 1
    1982:	41 e0       	ldi	r20, 0x01	; 1
    1984:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>


}
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <DC_MOTOR1_voidRotateAntiClockwise>:
void DC_MOTOR1_voidRotateAntiClockwise(void)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR1_PIN1 , DIO_u8LOW);
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	61 e0       	ldi	r22, 0x01	; 1
    199a:	40 e0       	ldi	r20, 0x00	; 0
    199c:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR1_PIN0 , DIO_u8HIGH);
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	41 e0       	ldi	r20, 0x01	; 1
    19a6:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>


}
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <DC_MOTOR1_voidStop>:
void DC_MOTOR1_voidStop(void)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR1_PIN0 , DIO_u8LOW);
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR1_PIN1 , DIO_u8LOW);
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	61 e0       	ldi	r22, 0x01	; 1
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

}
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <DC_MOTOR2_Init>:

//MOTOR 2 Functions 

void DC_MOTOR2_Init(void)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR2_PIN2,DIO_u8OUTPUT);
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	64 e0       	ldi	r22, 0x04	; 4
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR2_PIN3,DIO_u8OUTPUT);
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	65 e0       	ldi	r22, 0x05	; 5
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTD,DIO_PIN7_ID,DIO_u8OUTPUT);/*PWM2 PIN IN MC (OC2) */
    19ee:	84 e0       	ldi	r24, 0x04	; 4
    19f0:	67 e0       	ldi	r22, 0x07	; 7
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>

}
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <DC_MOTOR2_voidRotateClockwise>:

void DC_MOTOR2_voidRotateClockwise(void)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR2_PIN2 , DIO_u8LOW);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	64 e0       	ldi	r22, 0x04	; 4
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR2_PIN3 , DIO_u8HIGH);
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	65 e0       	ldi	r22, 0x05	; 5
    1a14:	41 e0       	ldi	r20, 0x01	; 1
    1a16:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>


}
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <DC_MOTOR2_voidRotateAntiClockwise>:
void DC_MOTOR2_voidRotateAntiClockwise(void)
{
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR2_PIN3 , DIO_u8LOW);
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	65 e0       	ldi	r22, 0x05	; 5
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR2_PIN2 , DIO_u8HIGH);
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	64 e0       	ldi	r22, 0x04	; 4
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>




}
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <DC_MOTOR2_voidStop>:
void DC_MOTOR2_voidStop(void)
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR2_PIN2 , DIO_u8LOW);
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	64 e0       	ldi	r22, 0x04	; 4
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR2_PIN3 , DIO_u8LOW);
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	65 e0       	ldi	r22, 0x05	; 5
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

}
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <DC_MOTOR3_Init>:
//MOTOR 3 Functions 

void DC_MOTOR3_Init(void)
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR3_PIN4 ,DIO_u8OUTPUT);
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	64 e0       	ldi	r22, 0x04	; 4
    1a70:	41 e0       	ldi	r20, 0x01	; 1
    1a72:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR3_PIN5,DIO_u8OUTPUT);
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	65 e0       	ldi	r22, 0x05	; 5
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTD,DIO_PIN7_ID,DIO_u8OUTPUT);/*PWM2 PIN IN MC (OC2) */
    1a80:	84 e0       	ldi	r24, 0x04	; 4
    1a82:	67 e0       	ldi	r22, 0x07	; 7
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>

}
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <DC_MOTOR3_voidRotateClockwise>:

void DC_MOTOR3_voidRotateClockwise(void)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR3_PIN4 , DIO_u8LOW);
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	64 e0       	ldi	r22, 0x04	; 4
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR3_PIN5 , DIO_u8HIGH);
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	65 e0       	ldi	r22, 0x05	; 5
    1aa6:	41 e0       	ldi	r20, 0x01	; 1
    1aa8:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>


}
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <DC_MOTOR3_voidRotateAntiClockwise>:
void DC_MOTOR3_voidRotateAntiClockwise(void)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR3_PIN5 , DIO_u8LOW);
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	65 e0       	ldi	r22, 0x05	; 5
    1abe:	40 e0       	ldi	r20, 0x00	; 0
    1ac0:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR3_PIN4 , DIO_u8HIGH);
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	64 e0       	ldi	r22, 0x04	; 4
    1ac8:	41 e0       	ldi	r20, 0x01	; 1
    1aca:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>


}
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <DC_MOTOR3_voidStop>:
void DC_MOTOR3_voidStop(void)
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR3_PIN4 , DIO_u8LOW);
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	64 e0       	ldi	r22, 0x04	; 4
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR3_PIN5 , DIO_u8LOW);
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	65 e0       	ldi	r22, 0x05	; 5
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

}
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <DC_MOTOR4_Init>:

//MOTOR 4 Functions 

void DC_MOTOR4_Init(void)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR4_PIN6 ,DIO_u8OUTPUT);
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	41 e0       	ldi	r20, 0x01	; 1
    1b04:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR4_PIN7,DIO_u8OUTPUT);
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	41 e0       	ldi	r20, 0x01	; 1
    1b0e:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTD,DIO_PIN7_ID,DIO_u8OUTPUT);/*PWM2 PIN IN MC (OC2) */
    1b12:	84 e0       	ldi	r24, 0x04	; 4
    1b14:	67 e0       	ldi	r22, 0x07	; 7
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>

}
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <DC_MOTOR4_voidRotateClockwise>:

void DC_MOTOR4_voidRotateClockwise(void)
{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR4_PIN6 , DIO_u8LOW);
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	40 e0       	ldi	r20, 0x00	; 0
    1b30:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR4_PIN7 , DIO_u8HIGH);
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>


}
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <DC_MOTOR4_voidRotateAntiClockwise>:
void DC_MOTOR4_voidRotateAntiClockwise(void)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR4_PIN7 , DIO_u8LOW);
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	61 e0       	ldi	r22, 0x01	; 1
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR4_PIN6 , DIO_u8HIGH);
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	41 e0       	ldi	r20, 0x01	; 1
    1b5c:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>


}
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <DC_MOTOR4_voidStop>:
void DC_MOTOR4_voidStop(void)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR4_PIN6 , DIO_u8LOW);
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR4_PIN7 , DIO_u8LOW);
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

}
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <Set_Angle_Servo_motor_3>:
#include "../MCAL/PWM0_interface.h"
#include "../LIB/STD_TYPES.h"

void Set_Angle_Servo_motor_3(u8 angle)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	0f 92       	push	r0
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	89 83       	std	Y+1, r24	; 0x01
	if (angle == 0)
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	88 23       	and	r24, r24
    1b98:	21 f4       	brne	.+8      	; 0x1ba2 <Set_Angle_Servo_motor_3+0x1a>
	{
		PWM0_voidInit(19);
    1b9a:	83 e1       	ldi	r24, 0x13	; 19
    1b9c:	0e 94 34 0a 	call	0x1468	; 0x1468 <PWM0_voidInit>
    1ba0:	06 c0       	rjmp	.+12     	; 0x1bae <Set_Angle_Servo_motor_3+0x26>
	}
	else if(angle ==90)
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	8a 35       	cpi	r24, 0x5A	; 90
    1ba6:	19 f4       	brne	.+6      	; 0x1bae <Set_Angle_Servo_motor_3+0x26>
	{
		PWM0_voidInit(7.8);
    1ba8:	87 e0       	ldi	r24, 0x07	; 7
    1baa:	0e 94 34 0a 	call	0x1468	; 0x1468 <PWM0_voidInit>
	}
}
    1bae:	0f 90       	pop	r0
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <Ultrasonic_edgeProcessing>:
u8 g_edgeCount3 = 0;
u16 g_timeHigh=0;
u16 g_timeHigh2=0;
u16 g_timeHigh3=0;
void Ultrasonic_edgeProcessing(void)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62

	g_edgeCount++;
    1bbe:	80 91 7e 01 	lds	r24, 0x017E
    1bc2:	8f 5f       	subi	r24, 0xFF	; 255
    1bc4:	80 93 7e 01 	sts	0x017E, r24
	if(g_edgeCount == 1)
    1bc8:	80 91 7e 01 	lds	r24, 0x017E
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	31 f4       	brne	.+12     	; 0x1bdc <Ultrasonic_edgeProcessing+0x26>
	{
		Icu_clearTimerValue();
    1bd0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(FALLING);
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	0e 94 4f 0c 	call	0x189e	; 0x189e <Icu_setEdgeDetectionType>
    1bda:	0f c0       	rjmp	.+30     	; 0x1bfa <Ultrasonic_edgeProcessing+0x44>
	}
	else if(g_edgeCount == 2)
    1bdc:	80 91 7e 01 	lds	r24, 0x017E
    1be0:	82 30       	cpi	r24, 0x02	; 2
    1be2:	59 f4       	brne	.+22     	; 0x1bfa <Ultrasonic_edgeProcessing+0x44>
	{
		g_timeHigh = Icu_getInputCaptureValue();
    1be4:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Icu_getInputCaptureValue>
    1be8:	90 93 82 01 	sts	0x0182, r25
    1bec:	80 93 81 01 	sts	0x0181, r24
		Icu_setEdgeDetectionType(RISING);
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	0e 94 4f 0c 	call	0x189e	; 0x189e <Icu_setEdgeDetectionType>
		g_edgeCount=0;
    1bf6:	10 92 7e 01 	sts	0x017E, r1
	}

}
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <Ultrasonic_edgeProcessing2>:

void Ultrasonic_edgeProcessing2(void)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62

	g_edgeCount2++;
    1c08:	80 91 7f 01 	lds	r24, 0x017F
    1c0c:	8f 5f       	subi	r24, 0xFF	; 255
    1c0e:	80 93 7f 01 	sts	0x017F, r24
	if(g_edgeCount2 == 1)
    1c12:	80 91 7f 01 	lds	r24, 0x017F
    1c16:	81 30       	cpi	r24, 0x01	; 1
    1c18:	31 f4       	brne	.+12     	; 0x1c26 <Ultrasonic_edgeProcessing2+0x26>
	{
		Icu_clearTimerValue();
    1c1a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(FALLING);
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	0e 94 4f 0c 	call	0x189e	; 0x189e <Icu_setEdgeDetectionType>
    1c24:	0f c0       	rjmp	.+30     	; 0x1c44 <Ultrasonic_edgeProcessing2+0x44>
	}
	else if(g_edgeCount2 == 2)
    1c26:	80 91 7f 01 	lds	r24, 0x017F
    1c2a:	82 30       	cpi	r24, 0x02	; 2
    1c2c:	59 f4       	brne	.+22     	; 0x1c44 <Ultrasonic_edgeProcessing2+0x44>
	{
		g_timeHigh2 = Icu_getInputCaptureValue();
    1c2e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Icu_getInputCaptureValue>
    1c32:	90 93 84 01 	sts	0x0184, r25
    1c36:	80 93 83 01 	sts	0x0183, r24
		Icu_setEdgeDetectionType(RISING);
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	0e 94 4f 0c 	call	0x189e	; 0x189e <Icu_setEdgeDetectionType>
		g_edgeCount2=0;
    1c40:	10 92 7f 01 	sts	0x017F, r1
	}

}
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <Ultrasonic_edgeProcessing3>:
void Ultrasonic_edgeProcessing3(void)
{
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62

	g_edgeCount3++;
    1c52:	80 91 80 01 	lds	r24, 0x0180
    1c56:	8f 5f       	subi	r24, 0xFF	; 255
    1c58:	80 93 80 01 	sts	0x0180, r24
	if(g_edgeCount3 == 1)
    1c5c:	80 91 80 01 	lds	r24, 0x0180
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	31 f4       	brne	.+12     	; 0x1c70 <Ultrasonic_edgeProcessing3+0x26>
	{
		Icu_clearTimerValue();
    1c64:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(FALLING);
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	0e 94 4f 0c 	call	0x189e	; 0x189e <Icu_setEdgeDetectionType>
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <Ultrasonic_edgeProcessing3+0x44>
	}
	else if(g_edgeCount3 == 2)
    1c70:	80 91 80 01 	lds	r24, 0x0180
    1c74:	82 30       	cpi	r24, 0x02	; 2
    1c76:	59 f4       	brne	.+22     	; 0x1c8e <Ultrasonic_edgeProcessing3+0x44>
	{
		g_timeHigh3 = Icu_getInputCaptureValue();
    1c78:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Icu_getInputCaptureValue>
    1c7c:	90 93 86 01 	sts	0x0186, r25
    1c80:	80 93 85 01 	sts	0x0185, r24
		Icu_setEdgeDetectionType(RISING);
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	0e 94 4f 0c 	call	0x189e	; 0x189e <Icu_setEdgeDetectionType>
		g_edgeCount3=0;
    1c8a:	10 92 80 01 	sts	0x0180, r1
	}

}
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <Ultrasonic_init>:

void Ultrasonic_init(void)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	0f 92       	push	r0
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
	/* Create configuration structure for ICU driver */
	Icu_Clock Icu_Config_ultrasonic = {F_CPU_8,RISING};
    1c9e:	82 e0       	ldi	r24, 0x02	; 2
    1ca0:	89 83       	std	Y+1, r24	; 0x01
	Icu_setCallBack(Ultrasonic_edgeProcessing);
    1ca2:	8b ed       	ldi	r24, 0xDB	; 219
    1ca4:	9d e0       	ldi	r25, 0x0D	; 13
    1ca6:	0e 94 3d 0c 	call	0x187a	; 0x187a <Icu_setCallBack>
	Icu_init(&Icu_Config_ultrasonic);
    1caa:	ce 01       	movw	r24, r28
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <Icu_init>
	DIO_voidSetPinDirection(TRIG_PORT_ID, TRIG_PIN_ID, DIO_u8OUTPUT);
    1cb2:	82 e0       	ldi	r24, 0x02	; 2
    1cb4:	64 e0       	ldi	r22, 0x04	; 4
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(TRIG_PORT_ID, TRIG_PIN_ID,DIO_u8LOW);
    1cbc:	82 e0       	ldi	r24, 0x02	; 2
    1cbe:	64 e0       	ldi	r22, 0x04	; 4
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

}
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <Ultrasonic2_init>:
void Ultrasonic2_init(void)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	0f 92       	push	r0
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
	/* Create configuration structure for ICU driver */
	Icu_Clock Icu_Config_ultrasonic2 = {F_CPU_8,RISING};
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	89 83       	std	Y+1, r24	; 0x01
	Icu_setCallBack(Ultrasonic_edgeProcessing2);
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	9e e0       	ldi	r25, 0x0E	; 14
    1ce0:	0e 94 3d 0c 	call	0x187a	; 0x187a <Icu_setCallBack>
	Icu_init(&Icu_Config_ultrasonic2);
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	01 96       	adiw	r24, 0x01	; 1
    1ce8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <Icu_init>
	DIO_voidSetPinDirection(TRIG2_PORT_ID, TRIG2_PIN_ID, DIO_u8OUTPUT);
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	65 e0       	ldi	r22, 0x05	; 5
    1cf0:	41 e0       	ldi	r20, 0x01	; 1
    1cf2:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(TRIG2_PORT_ID, TRIG2_PIN_ID,DIO_u8LOW);
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	65 e0       	ldi	r22, 0x05	; 5
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

}
    1d00:	0f 90       	pop	r0
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <Ultrasonic3_init>:
void Ultrasonic3_init(void)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	0f 92       	push	r0
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
	/* Create configuration structure for ICU driver */
	Icu_Clock Icu_Config_ultrasonic3 = {F_CPU_8,RISING};
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	89 83       	std	Y+1, r24	; 0x01
	Icu_setCallBack(Ultrasonic_edgeProcessing3);
    1d16:	85 e2       	ldi	r24, 0x25	; 37
    1d18:	9e e0       	ldi	r25, 0x0E	; 14
    1d1a:	0e 94 3d 0c 	call	0x187a	; 0x187a <Icu_setCallBack>
	Icu_init(&Icu_Config_ultrasonic3);
    1d1e:	ce 01       	movw	r24, r28
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <Icu_init>
	DIO_voidSetPinDirection(TRIG3_PORT_ID, TRIG3_PIN_ID, DIO_u8OUTPUT);
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	66 e0       	ldi	r22, 0x06	; 6
    1d2a:	41 e0       	ldi	r20, 0x01	; 1
    1d2c:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(TRIG3_PORT_ID, TRIG3_PIN_ID,DIO_u8LOW);
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	66 e0       	ldi	r22, 0x06	; 6
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

}
    1d3a:	0f 90       	pop	r0
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <Ultrasonic_Trigger>:

void Ultrasonic_Trigger(void)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	68 97       	sbiw	r28, 0x18	; 24
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(TRIG_PORT_ID, TRIG_PIN_ID,DIO_u8HIGH);
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	64 e0       	ldi	r22, 0x04	; 4
    1d5a:	41 e0       	ldi	r20, 0x01	; 1
    1d5c:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a0 e2       	ldi	r26, 0x20	; 32
    1d66:	b1 e4       	ldi	r27, 0x41	; 65
    1d68:	8d 8b       	std	Y+21, r24	; 0x15
    1d6a:	9e 8b       	std	Y+22, r25	; 0x16
    1d6c:	af 8b       	std	Y+23, r26	; 0x17
    1d6e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d70:	6d 89       	ldd	r22, Y+21	; 0x15
    1d72:	7e 89       	ldd	r23, Y+22	; 0x16
    1d74:	8f 89       	ldd	r24, Y+23	; 0x17
    1d76:	98 8d       	ldd	r25, Y+24	; 0x18
    1d78:	2b ea       	ldi	r18, 0xAB	; 171
    1d7a:	3a ea       	ldi	r19, 0xAA	; 170
    1d7c:	4a e2       	ldi	r20, 0x2A	; 42
    1d7e:	50 e4       	ldi	r21, 0x40	; 64
    1d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	89 8b       	std	Y+17, r24	; 0x11
    1d8a:	9a 8b       	std	Y+18, r25	; 0x12
    1d8c:	ab 8b       	std	Y+19, r26	; 0x13
    1d8e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d90:	69 89       	ldd	r22, Y+17	; 0x11
    1d92:	7a 89       	ldd	r23, Y+18	; 0x12
    1d94:	8b 89       	ldd	r24, Y+19	; 0x13
    1d96:	9c 89       	ldd	r25, Y+20	; 0x14
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e8       	ldi	r20, 0x80	; 128
    1d9e:	5f e3       	ldi	r21, 0x3F	; 63
    1da0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da4:	88 23       	and	r24, r24
    1da6:	1c f4       	brge	.+6      	; 0x1dae <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	88 8b       	std	Y+16, r24	; 0x10
    1dac:	91 c0       	rjmp	.+290    	; 0x1ed0 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    1dae:	69 89       	ldd	r22, Y+17	; 0x11
    1db0:	7a 89       	ldd	r23, Y+18	; 0x12
    1db2:	8b 89       	ldd	r24, Y+19	; 0x13
    1db4:	9c 89       	ldd	r25, Y+20	; 0x14
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	4f e7       	ldi	r20, 0x7F	; 127
    1dbc:	53 e4       	ldi	r21, 0x43	; 67
    1dbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dc2:	18 16       	cp	r1, r24
    1dc4:	0c f0       	brlt	.+2      	; 0x1dc8 <Ultrasonic_Trigger+0x86>
    1dc6:	7b c0       	rjmp	.+246    	; 0x1ebe <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dca:	7e 89       	ldd	r23, Y+22	; 0x16
    1dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dce:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	4a e7       	ldi	r20, 0x7A	; 122
    1dd6:	54 e4       	ldi	r21, 0x44	; 68
    1dd8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	8c 87       	std	Y+12, r24	; 0x0c
    1de2:	9d 87       	std	Y+13, r25	; 0x0d
    1de4:	ae 87       	std	Y+14, r26	; 0x0e
    1de6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dea:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dec:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dee:	9f 85       	ldd	r25, Y+15	; 0x0f
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a ef       	ldi	r20, 0xFA	; 250
    1df6:	54 e4       	ldi	r21, 0x44	; 68
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	88 87       	std	Y+8, r24	; 0x08
    1e02:	99 87       	std	Y+9, r25	; 0x09
    1e04:	aa 87       	std	Y+10, r26	; 0x0a
    1e06:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e08:	68 85       	ldd	r22, Y+8	; 0x08
    1e0a:	79 85       	ldd	r23, Y+9	; 0x09
    1e0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	2c f4       	brge	.+10     	; 0x1e2a <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9f 83       	std	Y+7, r25	; 0x07
    1e26:	8e 83       	std	Y+6, r24	; 0x06
    1e28:	3f c0       	rjmp	.+126    	; 0x1ea8 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    1e2a:	68 85       	ldd	r22, Y+8	; 0x08
    1e2c:	79 85       	ldd	r23, Y+9	; 0x09
    1e2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	4f e7       	ldi	r20, 0x7F	; 127
    1e38:	57 e4       	ldi	r21, 0x47	; 71
    1e3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	4c f5       	brge	.+82     	; 0x1e94 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e42:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e44:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e46:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e48:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e2       	ldi	r20, 0x20	; 32
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9f 83       	std	Y+7, r25	; 0x07
    1e68:	8e 83       	std	Y+6, r24	; 0x06
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <Ultrasonic_Trigger+0x148>
    1e6c:	88 ec       	ldi	r24, 0xC8	; 200
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9d 83       	std	Y+5, r25	; 0x05
    1e72:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e74:	8c 81       	ldd	r24, Y+4	; 0x04
    1e76:	9d 81       	ldd	r25, Y+5	; 0x05
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <Ultrasonic_Trigger+0x136>
    1e7c:	9d 83       	std	Y+5, r25	; 0x05
    1e7e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e80:	8e 81       	ldd	r24, Y+6	; 0x06
    1e82:	9f 81       	ldd	r25, Y+7	; 0x07
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	9f 83       	std	Y+7, r25	; 0x07
    1e88:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f7       	brne	.-38     	; 0x1e6c <Ultrasonic_Trigger+0x12a>
    1e92:	24 c0       	rjmp	.+72     	; 0x1edc <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e94:	68 85       	ldd	r22, Y+8	; 0x08
    1e96:	79 85       	ldd	r23, Y+9	; 0x09
    1e98:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9f 83       	std	Y+7, r25	; 0x07
    1ea6:	8e 83       	std	Y+6, r24	; 0x06
    1ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eaa:	9f 81       	ldd	r25, Y+7	; 0x07
    1eac:	9b 83       	std	Y+3, r25	; 0x03
    1eae:	8a 83       	std	Y+2, r24	; 0x02
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <Ultrasonic_Trigger+0x172>
    1eb8:	9b 83       	std	Y+3, r25	; 0x03
    1eba:	8a 83       	std	Y+2, r24	; 0x02
    1ebc:	0f c0       	rjmp	.+30     	; 0x1edc <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ebe:	69 89       	ldd	r22, Y+17	; 0x11
    1ec0:	7a 89       	ldd	r23, Y+18	; 0x12
    1ec2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	88 8b       	std	Y+16, r24	; 0x10
    1ed0:	88 89       	ldd	r24, Y+16	; 0x10
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	8a 95       	dec	r24
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <Ultrasonic_Trigger+0x194>
    1eda:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(TRIG_PORT_ID, TRIG_PIN_ID,DIO_u8LOW);
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	64 e0       	ldi	r22, 0x04	; 4
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
}
    1ee6:	68 96       	adiw	r28, 0x18	; 24
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <Ultrasonic2_Trigger>:

void Ultrasonic2_Trigger(void)
{
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	68 97       	sbiw	r28, 0x18	; 24
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(TRIG2_PORT_ID, TRIG2_PIN_ID,DIO_u8HIGH);
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	65 e0       	ldi	r22, 0x05	; 5
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	a0 e2       	ldi	r26, 0x20	; 32
    1f1c:	b1 e4       	ldi	r27, 0x41	; 65
    1f1e:	8d 8b       	std	Y+21, r24	; 0x15
    1f20:	9e 8b       	std	Y+22, r25	; 0x16
    1f22:	af 8b       	std	Y+23, r26	; 0x17
    1f24:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f26:	6d 89       	ldd	r22, Y+21	; 0x15
    1f28:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2e:	2b ea       	ldi	r18, 0xAB	; 171
    1f30:	3a ea       	ldi	r19, 0xAA	; 170
    1f32:	4a e2       	ldi	r20, 0x2A	; 42
    1f34:	50 e4       	ldi	r21, 0x40	; 64
    1f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	89 8b       	std	Y+17, r24	; 0x11
    1f40:	9a 8b       	std	Y+18, r25	; 0x12
    1f42:	ab 8b       	std	Y+19, r26	; 0x13
    1f44:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f46:	69 89       	ldd	r22, Y+17	; 0x11
    1f48:	7a 89       	ldd	r23, Y+18	; 0x12
    1f4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e8       	ldi	r20, 0x80	; 128
    1f54:	5f e3       	ldi	r21, 0x3F	; 63
    1f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f5a:	88 23       	and	r24, r24
    1f5c:	1c f4       	brge	.+6      	; 0x1f64 <Ultrasonic2_Trigger+0x6c>
		__ticks = 1;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	88 8b       	std	Y+16, r24	; 0x10
    1f62:	91 c0       	rjmp	.+290    	; 0x2086 <Ultrasonic2_Trigger+0x18e>
	else if (__tmp > 255)
    1f64:	69 89       	ldd	r22, Y+17	; 0x11
    1f66:	7a 89       	ldd	r23, Y+18	; 0x12
    1f68:	8b 89       	ldd	r24, Y+19	; 0x13
    1f6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4f e7       	ldi	r20, 0x7F	; 127
    1f72:	53 e4       	ldi	r21, 0x43	; 67
    1f74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f78:	18 16       	cp	r1, r24
    1f7a:	0c f0       	brlt	.+2      	; 0x1f7e <Ultrasonic2_Trigger+0x86>
    1f7c:	7b c0       	rjmp	.+246    	; 0x2074 <Ultrasonic2_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1f7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f80:	7e 89       	ldd	r23, Y+22	; 0x16
    1f82:	8f 89       	ldd	r24, Y+23	; 0x17
    1f84:	98 8d       	ldd	r25, Y+24	; 0x18
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	4a e7       	ldi	r20, 0x7A	; 122
    1f8c:	54 e4       	ldi	r21, 0x44	; 68
    1f8e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	8c 87       	std	Y+12, r24	; 0x0c
    1f98:	9d 87       	std	Y+13, r25	; 0x0d
    1f9a:	ae 87       	std	Y+14, r26	; 0x0e
    1f9c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fa0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fa2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fa4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a ef       	ldi	r20, 0xFA	; 250
    1fac:	54 e4       	ldi	r21, 0x44	; 68
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	88 87       	std	Y+8, r24	; 0x08
    1fb8:	99 87       	std	Y+9, r25	; 0x09
    1fba:	aa 87       	std	Y+10, r26	; 0x0a
    1fbc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1fbe:	68 85       	ldd	r22, Y+8	; 0x08
    1fc0:	79 85       	ldd	r23, Y+9	; 0x09
    1fc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e8       	ldi	r20, 0x80	; 128
    1fcc:	5f e3       	ldi	r21, 0x3F	; 63
    1fce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	2c f4       	brge	.+10     	; 0x1fe0 <Ultrasonic2_Trigger+0xe8>
		__ticks = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9f 83       	std	Y+7, r25	; 0x07
    1fdc:	8e 83       	std	Y+6, r24	; 0x06
    1fde:	3f c0       	rjmp	.+126    	; 0x205e <Ultrasonic2_Trigger+0x166>
	else if (__tmp > 65535)
    1fe0:	68 85       	ldd	r22, Y+8	; 0x08
    1fe2:	79 85       	ldd	r23, Y+9	; 0x09
    1fe4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fe6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	3f ef       	ldi	r19, 0xFF	; 255
    1fec:	4f e7       	ldi	r20, 0x7F	; 127
    1fee:	57 e4       	ldi	r21, 0x47	; 71
    1ff0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ff4:	18 16       	cp	r1, r24
    1ff6:	4c f5       	brge	.+82     	; 0x204a <Ultrasonic2_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ffa:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ffc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ffe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e2       	ldi	r20, 0x20	; 32
    2006:	51 e4       	ldi	r21, 0x41	; 65
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9f 83       	std	Y+7, r25	; 0x07
    201e:	8e 83       	std	Y+6, r24	; 0x06
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <Ultrasonic2_Trigger+0x148>
    2022:	88 ec       	ldi	r24, 0xC8	; 200
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9d 83       	std	Y+5, r25	; 0x05
    2028:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    202a:	8c 81       	ldd	r24, Y+4	; 0x04
    202c:	9d 81       	ldd	r25, Y+5	; 0x05
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <Ultrasonic2_Trigger+0x136>
    2032:	9d 83       	std	Y+5, r25	; 0x05
    2034:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2036:	8e 81       	ldd	r24, Y+6	; 0x06
    2038:	9f 81       	ldd	r25, Y+7	; 0x07
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	9f 83       	std	Y+7, r25	; 0x07
    203e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2040:	8e 81       	ldd	r24, Y+6	; 0x06
    2042:	9f 81       	ldd	r25, Y+7	; 0x07
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	69 f7       	brne	.-38     	; 0x2022 <Ultrasonic2_Trigger+0x12a>
    2048:	24 c0       	rjmp	.+72     	; 0x2092 <Ultrasonic2_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204a:	68 85       	ldd	r22, Y+8	; 0x08
    204c:	79 85       	ldd	r23, Y+9	; 0x09
    204e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2050:	9b 85       	ldd	r25, Y+11	; 0x0b
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9f 83       	std	Y+7, r25	; 0x07
    205c:	8e 83       	std	Y+6, r24	; 0x06
    205e:	8e 81       	ldd	r24, Y+6	; 0x06
    2060:	9f 81       	ldd	r25, Y+7	; 0x07
    2062:	9b 83       	std	Y+3, r25	; 0x03
    2064:	8a 83       	std	Y+2, r24	; 0x02
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	9b 81       	ldd	r25, Y+3	; 0x03
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <Ultrasonic2_Trigger+0x172>
    206e:	9b 83       	std	Y+3, r25	; 0x03
    2070:	8a 83       	std	Y+2, r24	; 0x02
    2072:	0f c0       	rjmp	.+30     	; 0x2092 <Ultrasonic2_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2074:	69 89       	ldd	r22, Y+17	; 0x11
    2076:	7a 89       	ldd	r23, Y+18	; 0x12
    2078:	8b 89       	ldd	r24, Y+19	; 0x13
    207a:	9c 89       	ldd	r25, Y+20	; 0x14
    207c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	88 8b       	std	Y+16, r24	; 0x10
    2086:	88 89       	ldd	r24, Y+16	; 0x10
    2088:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	8a 95       	dec	r24
    208e:	f1 f7       	brne	.-4      	; 0x208c <Ultrasonic2_Trigger+0x194>
    2090:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(TRIG2_PORT_ID, TRIG2_PIN_ID,DIO_u8LOW);
    2092:	82 e0       	ldi	r24, 0x02	; 2
    2094:	65 e0       	ldi	r22, 0x05	; 5
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
}
    209c:	68 96       	adiw	r28, 0x18	; 24
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <Ultrasonic3_Trigger>:
void Ultrasonic3_Trigger(void)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	68 97       	sbiw	r28, 0x18	; 24
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(TRIG3_PORT_ID, TRIG3_PIN_ID,DIO_u8HIGH);
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	66 e0       	ldi	r22, 0x06	; 6
    20c6:	41 e0       	ldi	r20, 0x01	; 1
    20c8:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a0 e2       	ldi	r26, 0x20	; 32
    20d2:	b1 e4       	ldi	r27, 0x41	; 65
    20d4:	8d 8b       	std	Y+21, r24	; 0x15
    20d6:	9e 8b       	std	Y+22, r25	; 0x16
    20d8:	af 8b       	std	Y+23, r26	; 0x17
    20da:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20dc:	6d 89       	ldd	r22, Y+21	; 0x15
    20de:	7e 89       	ldd	r23, Y+22	; 0x16
    20e0:	8f 89       	ldd	r24, Y+23	; 0x17
    20e2:	98 8d       	ldd	r25, Y+24	; 0x18
    20e4:	2b ea       	ldi	r18, 0xAB	; 171
    20e6:	3a ea       	ldi	r19, 0xAA	; 170
    20e8:	4a e2       	ldi	r20, 0x2A	; 42
    20ea:	50 e4       	ldi	r21, 0x40	; 64
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	89 8b       	std	Y+17, r24	; 0x11
    20f6:	9a 8b       	std	Y+18, r25	; 0x12
    20f8:	ab 8b       	std	Y+19, r26	; 0x13
    20fa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20fc:	69 89       	ldd	r22, Y+17	; 0x11
    20fe:	7a 89       	ldd	r23, Y+18	; 0x12
    2100:	8b 89       	ldd	r24, Y+19	; 0x13
    2102:	9c 89       	ldd	r25, Y+20	; 0x14
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2110:	88 23       	and	r24, r24
    2112:	1c f4       	brge	.+6      	; 0x211a <Ultrasonic3_Trigger+0x6c>
		__ticks = 1;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	88 8b       	std	Y+16, r24	; 0x10
    2118:	91 c0       	rjmp	.+290    	; 0x223c <Ultrasonic3_Trigger+0x18e>
	else if (__tmp > 255)
    211a:	69 89       	ldd	r22, Y+17	; 0x11
    211c:	7a 89       	ldd	r23, Y+18	; 0x12
    211e:	8b 89       	ldd	r24, Y+19	; 0x13
    2120:	9c 89       	ldd	r25, Y+20	; 0x14
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	4f e7       	ldi	r20, 0x7F	; 127
    2128:	53 e4       	ldi	r21, 0x43	; 67
    212a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    212e:	18 16       	cp	r1, r24
    2130:	0c f0       	brlt	.+2      	; 0x2134 <Ultrasonic3_Trigger+0x86>
    2132:	7b c0       	rjmp	.+246    	; 0x222a <Ultrasonic3_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2134:	6d 89       	ldd	r22, Y+21	; 0x15
    2136:	7e 89       	ldd	r23, Y+22	; 0x16
    2138:	8f 89       	ldd	r24, Y+23	; 0x17
    213a:	98 8d       	ldd	r25, Y+24	; 0x18
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	4a e7       	ldi	r20, 0x7A	; 122
    2142:	54 e4       	ldi	r21, 0x44	; 68
    2144:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	8c 87       	std	Y+12, r24	; 0x0c
    214e:	9d 87       	std	Y+13, r25	; 0x0d
    2150:	ae 87       	std	Y+14, r26	; 0x0e
    2152:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2154:	6c 85       	ldd	r22, Y+12	; 0x0c
    2156:	7d 85       	ldd	r23, Y+13	; 0x0d
    2158:	8e 85       	ldd	r24, Y+14	; 0x0e
    215a:	9f 85       	ldd	r25, Y+15	; 0x0f
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	4a ef       	ldi	r20, 0xFA	; 250
    2162:	54 e4       	ldi	r21, 0x44	; 68
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	88 87       	std	Y+8, r24	; 0x08
    216e:	99 87       	std	Y+9, r25	; 0x09
    2170:	aa 87       	std	Y+10, r26	; 0x0a
    2172:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2174:	68 85       	ldd	r22, Y+8	; 0x08
    2176:	79 85       	ldd	r23, Y+9	; 0x09
    2178:	8a 85       	ldd	r24, Y+10	; 0x0a
    217a:	9b 85       	ldd	r25, Y+11	; 0x0b
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e8       	ldi	r20, 0x80	; 128
    2182:	5f e3       	ldi	r21, 0x3F	; 63
    2184:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2188:	88 23       	and	r24, r24
    218a:	2c f4       	brge	.+10     	; 0x2196 <Ultrasonic3_Trigger+0xe8>
		__ticks = 1;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9f 83       	std	Y+7, r25	; 0x07
    2192:	8e 83       	std	Y+6, r24	; 0x06
    2194:	3f c0       	rjmp	.+126    	; 0x2214 <Ultrasonic3_Trigger+0x166>
	else if (__tmp > 65535)
    2196:	68 85       	ldd	r22, Y+8	; 0x08
    2198:	79 85       	ldd	r23, Y+9	; 0x09
    219a:	8a 85       	ldd	r24, Y+10	; 0x0a
    219c:	9b 85       	ldd	r25, Y+11	; 0x0b
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	3f ef       	ldi	r19, 0xFF	; 255
    21a2:	4f e7       	ldi	r20, 0x7F	; 127
    21a4:	57 e4       	ldi	r21, 0x47	; 71
    21a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21aa:	18 16       	cp	r1, r24
    21ac:	4c f5       	brge	.+82     	; 0x2200 <Ultrasonic3_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    21b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    21b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    21b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e2       	ldi	r20, 0x20	; 32
    21bc:	51 e4       	ldi	r21, 0x41	; 65
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9f 83       	std	Y+7, r25	; 0x07
    21d4:	8e 83       	std	Y+6, r24	; 0x06
    21d6:	0f c0       	rjmp	.+30     	; 0x21f6 <Ultrasonic3_Trigger+0x148>
    21d8:	88 ec       	ldi	r24, 0xC8	; 200
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9d 83       	std	Y+5, r25	; 0x05
    21de:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21e0:	8c 81       	ldd	r24, Y+4	; 0x04
    21e2:	9d 81       	ldd	r25, Y+5	; 0x05
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <Ultrasonic3_Trigger+0x136>
    21e8:	9d 83       	std	Y+5, r25	; 0x05
    21ea:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ec:	8e 81       	ldd	r24, Y+6	; 0x06
    21ee:	9f 81       	ldd	r25, Y+7	; 0x07
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	9f 83       	std	Y+7, r25	; 0x07
    21f4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f6:	8e 81       	ldd	r24, Y+6	; 0x06
    21f8:	9f 81       	ldd	r25, Y+7	; 0x07
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	69 f7       	brne	.-38     	; 0x21d8 <Ultrasonic3_Trigger+0x12a>
    21fe:	24 c0       	rjmp	.+72     	; 0x2248 <Ultrasonic3_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2200:	68 85       	ldd	r22, Y+8	; 0x08
    2202:	79 85       	ldd	r23, Y+9	; 0x09
    2204:	8a 85       	ldd	r24, Y+10	; 0x0a
    2206:	9b 85       	ldd	r25, Y+11	; 0x0b
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9f 83       	std	Y+7, r25	; 0x07
    2212:	8e 83       	std	Y+6, r24	; 0x06
    2214:	8e 81       	ldd	r24, Y+6	; 0x06
    2216:	9f 81       	ldd	r25, Y+7	; 0x07
    2218:	9b 83       	std	Y+3, r25	; 0x03
    221a:	8a 83       	std	Y+2, r24	; 0x02
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	9b 81       	ldd	r25, Y+3	; 0x03
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <Ultrasonic3_Trigger+0x172>
    2224:	9b 83       	std	Y+3, r25	; 0x03
    2226:	8a 83       	std	Y+2, r24	; 0x02
    2228:	0f c0       	rjmp	.+30     	; 0x2248 <Ultrasonic3_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    222a:	69 89       	ldd	r22, Y+17	; 0x11
    222c:	7a 89       	ldd	r23, Y+18	; 0x12
    222e:	8b 89       	ldd	r24, Y+19	; 0x13
    2230:	9c 89       	ldd	r25, Y+20	; 0x14
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	88 8b       	std	Y+16, r24	; 0x10
    223c:	88 89       	ldd	r24, Y+16	; 0x10
    223e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	8a 95       	dec	r24
    2244:	f1 f7       	brne	.-4      	; 0x2242 <Ultrasonic3_Trigger+0x194>
    2246:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(TRIG3_PORT_ID, TRIG3_PIN_ID,DIO_u8LOW);
    2248:	82 e0       	ldi	r24, 0x02	; 2
    224a:	66 e0       	ldi	r22, 0x06	; 6
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
}
    2252:	68 96       	adiw	r28, 0x18	; 24
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <Ultrasonic_readDistance>:

 u16 Ultrasonic_readDistance(void)
 {
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	2e 97       	sbiw	r28, 0x0e	; 14
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61

	 Ultrasonic_Trigger();
    2278:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Ultrasonic_Trigger>
= 0.017 x (TIMER value) cm
= (TIMER value) / 58.8 cm
Note TIMER VALUE is the pulse width time calculated by the ICU
*/

	 distance=(float)((g_timeHigh/57.5));
    227c:	80 91 81 01 	lds	r24, 0x0181
    2280:	90 91 82 01 	lds	r25, 0x0182
    2284:	cc 01       	movw	r24, r24
    2286:	a0 e0       	ldi	r26, 0x00	; 0
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	46 e6       	ldi	r20, 0x66	; 102
    22a0:	52 e4       	ldi	r21, 0x42	; 66
    22a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	80 93 72 01 	sts	0x0172, r24
    22ae:	90 93 73 01 	sts	0x0173, r25
    22b2:	a0 93 74 01 	sts	0x0174, r26
    22b6:	b0 93 75 01 	sts	0x0175, r27
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a8 e4       	ldi	r26, 0x48	; 72
    22c0:	b2 e4       	ldi	r27, 0x42	; 66
    22c2:	8b 87       	std	Y+11, r24	; 0x0b
    22c4:	9c 87       	std	Y+12, r25	; 0x0c
    22c6:	ad 87       	std	Y+13, r26	; 0x0d
    22c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    22cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	4a ef       	ldi	r20, 0xFA	; 250
    22d8:	54 e4       	ldi	r21, 0x44	; 68
    22da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	8f 83       	std	Y+7, r24	; 0x07
    22e4:	98 87       	std	Y+8, r25	; 0x08
    22e6:	a9 87       	std	Y+9, r26	; 0x09
    22e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ea:	6f 81       	ldd	r22, Y+7	; 0x07
    22ec:	78 85       	ldd	r23, Y+8	; 0x08
    22ee:	89 85       	ldd	r24, Y+9	; 0x09
    22f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	2c f4       	brge	.+10     	; 0x230c <Ultrasonic_readDistance+0xa8>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9e 83       	std	Y+6, r25	; 0x06
    2308:	8d 83       	std	Y+5, r24	; 0x05
    230a:	3f c0       	rjmp	.+126    	; 0x238a <Ultrasonic_readDistance+0x126>
	else if (__tmp > 65535)
    230c:	6f 81       	ldd	r22, Y+7	; 0x07
    230e:	78 85       	ldd	r23, Y+8	; 0x08
    2310:	89 85       	ldd	r24, Y+9	; 0x09
    2312:	9a 85       	ldd	r25, Y+10	; 0x0a
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2320:	18 16       	cp	r1, r24
    2322:	4c f5       	brge	.+82     	; 0x2376 <Ultrasonic_readDistance+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2324:	6b 85       	ldd	r22, Y+11	; 0x0b
    2326:	7c 85       	ldd	r23, Y+12	; 0x0c
    2328:	8d 85       	ldd	r24, Y+13	; 0x0d
    232a:	9e 85       	ldd	r25, Y+14	; 0x0e
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9e 83       	std	Y+6, r25	; 0x06
    234a:	8d 83       	std	Y+5, r24	; 0x05
    234c:	0f c0       	rjmp	.+30     	; 0x236c <Ultrasonic_readDistance+0x108>
    234e:	88 ec       	ldi	r24, 0xC8	; 200
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9c 83       	std	Y+4, r25	; 0x04
    2354:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	9c 81       	ldd	r25, Y+4	; 0x04
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <Ultrasonic_readDistance+0xf6>
    235e:	9c 83       	std	Y+4, r25	; 0x04
    2360:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	9e 81       	ldd	r25, Y+6	; 0x06
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9e 83       	std	Y+6, r25	; 0x06
    236a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	9e 81       	ldd	r25, Y+6	; 0x06
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	69 f7       	brne	.-38     	; 0x234e <Ultrasonic_readDistance+0xea>
    2374:	14 c0       	rjmp	.+40     	; 0x239e <Ultrasonic_readDistance+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
    238a:	8d 81       	ldd	r24, Y+5	; 0x05
    238c:	9e 81       	ldd	r25, Y+6	; 0x06
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <Ultrasonic_readDistance+0x132>
    239a:	9a 83       	std	Y+2, r25	; 0x02
    239c:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(50);
	 Icu_DeInit();
    239e:	0e 94 84 0c 	call	0x1908	; 0x1908 <Icu_DeInit>
	 return distance;
    23a2:	80 91 72 01 	lds	r24, 0x0172
    23a6:	90 91 73 01 	lds	r25, 0x0173
    23aa:	a0 91 74 01 	lds	r26, 0x0174
    23ae:	b0 91 75 01 	lds	r27, 0x0175
    23b2:	bc 01       	movw	r22, r24
    23b4:	cd 01       	movw	r24, r26
    23b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22

 }
    23be:	2e 96       	adiw	r28, 0x0e	; 14
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	f8 94       	cli
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <Ultrasonic2_readDistance>:

 u16 Ultrasonic2_readDistance(void)
  {
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	2e 97       	sbiw	r28, 0x0e	; 14
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61

 	 Ultrasonic2_Trigger();
    23e4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <Ultrasonic2_Trigger>
 = 0.017 x (TIMER value) cm
 = (TIMER value) / 58.8 cm
 Note TIMER VALUE is the pulse width time calculated by the ICU
 */

 	 distance2=(float)((g_timeHigh2/57.5));
    23e8:	80 91 83 01 	lds	r24, 0x0183
    23ec:	90 91 84 01 	lds	r25, 0x0184
    23f0:	cc 01       	movw	r24, r24
    23f2:	a0 e0       	ldi	r26, 0x00	; 0
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	bc 01       	movw	r22, r24
    23f8:	cd 01       	movw	r24, r26
    23fa:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	bc 01       	movw	r22, r24
    2404:	cd 01       	movw	r24, r26
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	46 e6       	ldi	r20, 0x66	; 102
    240c:	52 e4       	ldi	r21, 0x42	; 66
    240e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	80 93 76 01 	sts	0x0176, r24
    241a:	90 93 77 01 	sts	0x0177, r25
    241e:	a0 93 78 01 	sts	0x0178, r26
    2422:	b0 93 79 01 	sts	0x0179, r27
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a8 e4       	ldi	r26, 0x48	; 72
    242c:	b2 e4       	ldi	r27, 0x42	; 66
    242e:	8b 87       	std	Y+11, r24	; 0x0b
    2430:	9c 87       	std	Y+12, r25	; 0x0c
    2432:	ad 87       	std	Y+13, r26	; 0x0d
    2434:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2436:	6b 85       	ldd	r22, Y+11	; 0x0b
    2438:	7c 85       	ldd	r23, Y+12	; 0x0c
    243a:	8d 85       	ldd	r24, Y+13	; 0x0d
    243c:	9e 85       	ldd	r25, Y+14	; 0x0e
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	4a ef       	ldi	r20, 0xFA	; 250
    2444:	54 e4       	ldi	r21, 0x44	; 68
    2446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	8f 83       	std	Y+7, r24	; 0x07
    2450:	98 87       	std	Y+8, r25	; 0x08
    2452:	a9 87       	std	Y+9, r26	; 0x09
    2454:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2456:	6f 81       	ldd	r22, Y+7	; 0x07
    2458:	78 85       	ldd	r23, Y+8	; 0x08
    245a:	89 85       	ldd	r24, Y+9	; 0x09
    245c:	9a 85       	ldd	r25, Y+10	; 0x0a
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e8       	ldi	r20, 0x80	; 128
    2464:	5f e3       	ldi	r21, 0x3F	; 63
    2466:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    246a:	88 23       	and	r24, r24
    246c:	2c f4       	brge	.+10     	; 0x2478 <Ultrasonic2_readDistance+0xa8>
		__ticks = 1;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	9e 83       	std	Y+6, r25	; 0x06
    2474:	8d 83       	std	Y+5, r24	; 0x05
    2476:	3f c0       	rjmp	.+126    	; 0x24f6 <Ultrasonic2_readDistance+0x126>
	else if (__tmp > 65535)
    2478:	6f 81       	ldd	r22, Y+7	; 0x07
    247a:	78 85       	ldd	r23, Y+8	; 0x08
    247c:	89 85       	ldd	r24, Y+9	; 0x09
    247e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	3f ef       	ldi	r19, 0xFF	; 255
    2484:	4f e7       	ldi	r20, 0x7F	; 127
    2486:	57 e4       	ldi	r21, 0x47	; 71
    2488:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    248c:	18 16       	cp	r1, r24
    248e:	4c f5       	brge	.+82     	; 0x24e2 <Ultrasonic2_readDistance+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2490:	6b 85       	ldd	r22, Y+11	; 0x0b
    2492:	7c 85       	ldd	r23, Y+12	; 0x0c
    2494:	8d 85       	ldd	r24, Y+13	; 0x0d
    2496:	9e 85       	ldd	r25, Y+14	; 0x0e
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e2       	ldi	r20, 0x20	; 32
    249e:	51 e4       	ldi	r21, 0x41	; 65
    24a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	bc 01       	movw	r22, r24
    24aa:	cd 01       	movw	r24, r26
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9e 83       	std	Y+6, r25	; 0x06
    24b6:	8d 83       	std	Y+5, r24	; 0x05
    24b8:	0f c0       	rjmp	.+30     	; 0x24d8 <Ultrasonic2_readDistance+0x108>
    24ba:	88 ec       	ldi	r24, 0xC8	; 200
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	9c 83       	std	Y+4, r25	; 0x04
    24c0:	8b 83       	std	Y+3, r24	; 0x03
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	9c 81       	ldd	r25, Y+4	; 0x04
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <Ultrasonic2_readDistance+0xf6>
    24ca:	9c 83       	std	Y+4, r25	; 0x04
    24cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ce:	8d 81       	ldd	r24, Y+5	; 0x05
    24d0:	9e 81       	ldd	r25, Y+6	; 0x06
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	9e 83       	std	Y+6, r25	; 0x06
    24d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	69 f7       	brne	.-38     	; 0x24ba <Ultrasonic2_readDistance+0xea>
    24e0:	14 c0       	rjmp	.+40     	; 0x250a <Ultrasonic2_readDistance+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e2:	6f 81       	ldd	r22, Y+7	; 0x07
    24e4:	78 85       	ldd	r23, Y+8	; 0x08
    24e6:	89 85       	ldd	r24, Y+9	; 0x09
    24e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	9e 83       	std	Y+6, r25	; 0x06
    24f4:	8d 83       	std	Y+5, r24	; 0x05
    24f6:	8d 81       	ldd	r24, Y+5	; 0x05
    24f8:	9e 81       	ldd	r25, Y+6	; 0x06
    24fa:	9a 83       	std	Y+2, r25	; 0x02
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	9a 81       	ldd	r25, Y+2	; 0x02
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <Ultrasonic2_readDistance+0x132>
    2506:	9a 83       	std	Y+2, r25	; 0x02
    2508:	89 83       	std	Y+1, r24	; 0x01
 	 _delay_ms(50);
 	Icu_DeInit();
    250a:	0e 94 84 0c 	call	0x1908	; 0x1908 <Icu_DeInit>
 	 return distance2;
    250e:	80 91 76 01 	lds	r24, 0x0176
    2512:	90 91 77 01 	lds	r25, 0x0177
    2516:	a0 91 78 01 	lds	r26, 0x0178
    251a:	b0 91 79 01 	lds	r27, 0x0179
    251e:	bc 01       	movw	r22, r24
    2520:	cd 01       	movw	r24, r26
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22

  }
    252a:	2e 96       	adiw	r28, 0x0e	; 14
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <Ultrasonic3_readDistance>:


 u16 Ultrasonic3_readDistance(void)
  {
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	2e 97       	sbiw	r28, 0x0e	; 14
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61

 	 Ultrasonic3_Trigger();
    2550:	0e 94 57 10 	call	0x20ae	; 0x20ae <Ultrasonic3_Trigger>
 = 0.017 x (TIMER value) cm
 = (TIMER value) / 58.8 cm
 Note TIMER VALUE is the pulse width time calculated by the ICU
 */

 	 distance3=(float)((g_timeHigh3/57.5));
    2554:	80 91 85 01 	lds	r24, 0x0185
    2558:	90 91 86 01 	lds	r25, 0x0186
    255c:	cc 01       	movw	r24, r24
    255e:	a0 e0       	ldi	r26, 0x00	; 0
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	bc 01       	movw	r22, r24
    2564:	cd 01       	movw	r24, r26
    2566:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	bc 01       	movw	r22, r24
    2570:	cd 01       	movw	r24, r26
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	46 e6       	ldi	r20, 0x66	; 102
    2578:	52 e4       	ldi	r21, 0x42	; 66
    257a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	80 93 7a 01 	sts	0x017A, r24
    2586:	90 93 7b 01 	sts	0x017B, r25
    258a:	a0 93 7c 01 	sts	0x017C, r26
    258e:	b0 93 7d 01 	sts	0x017D, r27
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a8 e4       	ldi	r26, 0x48	; 72
    2598:	b2 e4       	ldi	r27, 0x42	; 66
    259a:	8b 87       	std	Y+11, r24	; 0x0b
    259c:	9c 87       	std	Y+12, r25	; 0x0c
    259e:	ad 87       	std	Y+13, r26	; 0x0d
    25a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	4a ef       	ldi	r20, 0xFA	; 250
    25b0:	54 e4       	ldi	r21, 0x44	; 68
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	8f 83       	std	Y+7, r24	; 0x07
    25bc:	98 87       	std	Y+8, r25	; 0x08
    25be:	a9 87       	std	Y+9, r26	; 0x09
    25c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25c2:	6f 81       	ldd	r22, Y+7	; 0x07
    25c4:	78 85       	ldd	r23, Y+8	; 0x08
    25c6:	89 85       	ldd	r24, Y+9	; 0x09
    25c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	2c f4       	brge	.+10     	; 0x25e4 <Ultrasonic3_readDistance+0xa8>
		__ticks = 1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
    25e2:	3f c0       	rjmp	.+126    	; 0x2662 <Ultrasonic3_readDistance+0x126>
	else if (__tmp > 65535)
    25e4:	6f 81       	ldd	r22, Y+7	; 0x07
    25e6:	78 85       	ldd	r23, Y+8	; 0x08
    25e8:	89 85       	ldd	r24, Y+9	; 0x09
    25ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	3f ef       	ldi	r19, 0xFF	; 255
    25f0:	4f e7       	ldi	r20, 0x7F	; 127
    25f2:	57 e4       	ldi	r21, 0x47	; 71
    25f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25f8:	18 16       	cp	r1, r24
    25fa:	4c f5       	brge	.+82     	; 0x264e <Ultrasonic3_readDistance+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2600:	8d 85       	ldd	r24, Y+13	; 0x0d
    2602:	9e 85       	ldd	r25, Y+14	; 0x0e
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e2       	ldi	r20, 0x20	; 32
    260a:	51 e4       	ldi	r21, 0x41	; 65
    260c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9e 83       	std	Y+6, r25	; 0x06
    2622:	8d 83       	std	Y+5, r24	; 0x05
    2624:	0f c0       	rjmp	.+30     	; 0x2644 <Ultrasonic3_readDistance+0x108>
    2626:	88 ec       	ldi	r24, 0xC8	; 200
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9c 83       	std	Y+4, r25	; 0x04
    262c:	8b 83       	std	Y+3, r24	; 0x03
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	9c 81       	ldd	r25, Y+4	; 0x04
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <Ultrasonic3_readDistance+0xf6>
    2636:	9c 83       	std	Y+4, r25	; 0x04
    2638:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	9e 81       	ldd	r25, Y+6	; 0x06
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2644:	8d 81       	ldd	r24, Y+5	; 0x05
    2646:	9e 81       	ldd	r25, Y+6	; 0x06
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	69 f7       	brne	.-38     	; 0x2626 <Ultrasonic3_readDistance+0xea>
    264c:	14 c0       	rjmp	.+40     	; 0x2676 <Ultrasonic3_readDistance+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264e:	6f 81       	ldd	r22, Y+7	; 0x07
    2650:	78 85       	ldd	r23, Y+8	; 0x08
    2652:	89 85       	ldd	r24, Y+9	; 0x09
    2654:	9a 85       	ldd	r25, Y+10	; 0x0a
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	8d 81       	ldd	r24, Y+5	; 0x05
    2664:	9e 81       	ldd	r25, Y+6	; 0x06
    2666:	9a 83       	std	Y+2, r25	; 0x02
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	9a 81       	ldd	r25, Y+2	; 0x02
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <Ultrasonic3_readDistance+0x132>
    2672:	9a 83       	std	Y+2, r25	; 0x02
    2674:	89 83       	std	Y+1, r24	; 0x01
 	 _delay_ms(50);
 	Icu_DeInit();
    2676:	0e 94 84 0c 	call	0x1908	; 0x1908 <Icu_DeInit>
 	 return distance3;
    267a:	80 91 7a 01 	lds	r24, 0x017A
    267e:	90 91 7b 01 	lds	r25, 0x017B
    2682:	a0 91 7c 01 	lds	r26, 0x017C
    2686:	b0 91 7d 01 	lds	r27, 0x017D
    268a:	bc 01       	movw	r22, r24
    268c:	cd 01       	movw	r24, r26
    268e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22

  }
    2696:	2e 96       	adiw	r28, 0x0e	; 14
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <main>:
void MOVE_FORWARD_2_perpindicular(u8 Copy_u8Speed);
void MOVE_BACKWORD_1_perpindicular(u8 Copy_u8Speed);
void MOVE_BACKWORD_2_perpindicular(u8 Copy_u8Speed);
int main()

{
    26a8:	ef 92       	push	r14
    26aa:	ff 92       	push	r15
    26ac:	0f 93       	push	r16
    26ae:	1f 93       	push	r17
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	cc 58       	subi	r28, 0x8C	; 140
    26ba:	d0 40       	sbci	r29, 0x00	; 0
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61

	UART_voidInit();
    26c6:	0e 94 1f 0b 	call	0x163e	; 0x163e <UART_voidInit>
	//D0 set it input to recieve data (Rx)
	DIO_voidSetPinDirection(DIO_u8PORTD,0,DIO_u8INPUT);
    26ca:	84 e0       	ldi	r24, 0x04	; 4
    26cc:	60 e0       	ldi	r22, 0x00	; 0
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	//D1 set it output to send data (Tx)
	DIO_voidSetPinDirection(DIO_u8PORTD,1,DIO_u8OUTPUT);
    26d4:	84 e0       	ldi	r24, 0x04	; 4
    26d6:	61 e0       	ldi	r22, 0x01	; 1
    26d8:	41 e0       	ldi	r20, 0x01	; 1
    26da:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	/*INITIALIZATION LCD 4 PIN MODE & 4LINE MODE  AND CONFIGRATION (DATA PORT D pins(4,5,6,7)&& CONTROL PORT B PINS(0,2) */
	DDRB = DDRB & (~(1<<PB0)); // Configure pin 0 in PORTB as input pin
    26de:	a7 e3       	ldi	r26, 0x37	; 55
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	e7 e3       	ldi	r30, 0x37	; 55
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	8e 7f       	andi	r24, 0xFE	; 254
    26ea:	8c 93       	st	X, r24
	PORTB |= (1<<PB0);         // Activate the internal pull up resistor at PB0
    26ec:	a8 e3       	ldi	r26, 0x38	; 56
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	e8 e3       	ldi	r30, 0x38	; 56
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	81 60       	ori	r24, 0x01	; 1
    26f8:	8c 93       	st	X, r24

	DDRB = DDRB & (~(1<<PB1)); // Configure pin 1 in PORTB as input pin
    26fa:	a7 e3       	ldi	r26, 0x37	; 55
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e7 e3       	ldi	r30, 0x37	; 55
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	8d 7f       	andi	r24, 0xFD	; 253
    2706:	8c 93       	st	X, r24
	PORTB |= (1<<PB1);         // Activate the internal pull up resistor at PB1
    2708:	a8 e3       	ldi	r26, 0x38	; 56
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	e8 e3       	ldi	r30, 0x38	; 56
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	82 60       	ori	r24, 0x02	; 2
    2714:	8c 93       	st	X, r24


	/*DEFINE PORT && PINS FOR EACH MOTOR (PORT A &PINS (0,1,4,5) && define PWM2 pin7) */
	DC_MOTORS_Init();
    2716:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <DC_MOTORS_Init>

	/*DEFINE PORT && PINS FOR EACH MOTOR (PORT B &PIN 3)&& define PWM0 PIN 3 */
	//SERVOS_MOTORS_Init();

	/*INITALIZE THE PIN OF GLOBAL INTERRUPT ENABLE  */
	GIE_voidEnable();
    271a:	0e 94 18 0a 	call	0x1430	; 0x1430 <GIE_voidEnable>

	/*DEFINE PORT && PIN FOR TWO BUTTON (PORT D,PIN 2,3) */
	/*DEFINE PORT && PIN FOR TWO BUTTON (PORT A,PIN 2,3)*/
	DIO_voidSetPinDirection(DIO_u8PORTD,DIO_PIN2_ID, DIO_u8INPUT);
    271e:	84 e0       	ldi	r24, 0x04	; 4
    2720:	62 e0       	ldi	r22, 0x02	; 2
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTD,DIO_PIN3_ID, DIO_u8INPUT);
    2728:	84 e0       	ldi	r24, 0x04	; 4
    272a:	63 e0       	ldi	r22, 0x03	; 3
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTA,DIO_PIN2_ID, DIO_u8INPUT);
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	62 e0       	ldi	r22, 0x02	; 2
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTA,DIO_PIN3_ID, DIO_u8INPUT);
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	63 e0       	ldi	r22, 0x03	; 3
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTA,DIO_PIN6_ID, DIO_u8INPUT);
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	66 e0       	ldi	r22, 0x06	; 6
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	/*DEFINE  (MODE,PRESCALER) IN REGIESTER TCCR0*/
	/*DEFINE  (MODE,PRESCALER) IN REGIESTER TCCR2*/
	DIO_voidSetPinDirection(DIO_u8PORTC,0,DIO_u8INPUT);
    2750:	83 e0       	ldi	r24, 0x03	; 3
    2752:	60 e0       	ldi	r22, 0x00	; 0
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_u8PORTC,0,DIO_u8HIGH);
    275a:	83 e0       	ldi	r24, 0x03	; 3
    275c:	60 e0       	ldi	r22, 0x00	; 0
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(DIO_u8PORTC,1,DIO_u8INPUT);
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	61 e0       	ldi	r22, 0x01	; 1
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_u8PORTC,1,DIO_u8HIGH);
    276e:	83 e0       	ldi	r24, 0x03	; 3
    2770:	61 e0       	ldi	r22, 0x01	; 1
    2772:	41 e0       	ldi	r20, 0x01	; 1
    2774:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	PWM2_voidInit();
    2778:	0e 94 91 0a 	call	0x1522	; 0x1522 <PWM2_voidInit>

	//time that will take to detect length of the car only
	time_of_lengh_of_car=(lenght*10/REAL_SPEED_OF_MOTOR);
    277c:	80 91 6a 01 	lds	r24, 0x016A
    2780:	90 91 6b 01 	lds	r25, 0x016B
    2784:	9c 01       	movw	r18, r24
    2786:	22 0f       	add	r18, r18
    2788:	33 1f       	adc	r19, r19
    278a:	c9 01       	movw	r24, r18
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	82 0f       	add	r24, r18
    2796:	93 1f       	adc	r25, r19
    2798:	28 e2       	ldi	r18, 0x28	; 40
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	b9 01       	movw	r22, r18
    279e:	0e 94 ae 39 	call	0x735c	; 0x735c <__udivmodhi4>
    27a2:	cb 01       	movw	r24, r22
    27a4:	90 93 9b 01 	sts	0x019B, r25
    27a8:	80 93 9a 01 	sts	0x019A, r24
	DistanceForParking =(lenght +(lenght/4));
    27ac:	80 91 6a 01 	lds	r24, 0x016A
    27b0:	90 91 6b 01 	lds	r25, 0x016B
    27b4:	9c 01       	movw	r18, r24
    27b6:	36 95       	lsr	r19
    27b8:	27 95       	ror	r18
    27ba:	36 95       	lsr	r19
    27bc:	27 95       	ror	r18
    27be:	80 91 6a 01 	lds	r24, 0x016A
    27c2:	90 91 6b 01 	lds	r25, 0x016B
    27c6:	82 0f       	add	r24, r18
    27c8:	93 1f       	adc	r25, r19
    27ca:	90 93 b6 01 	sts	0x01B6, r25
    27ce:	80 93 b5 01 	sts	0x01B5, r24


	//calculate time that i will take for detecting the distance that i will park on it
	TimeForParking=((DistanceForParking*10/REAL_SPEED_OF_MOTOR))*10;
    27d2:	80 91 b5 01 	lds	r24, 0x01B5
    27d6:	90 91 b6 01 	lds	r25, 0x01B6
    27da:	9c 01       	movw	r18, r24
    27dc:	22 0f       	add	r18, r18
    27de:	33 1f       	adc	r19, r19
    27e0:	c9 01       	movw	r24, r18
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	82 0f       	add	r24, r18
    27ec:	93 1f       	adc	r25, r19
    27ee:	28 e2       	ldi	r18, 0x28	; 40
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	b9 01       	movw	r22, r18
    27f4:	0e 94 ae 39 	call	0x735c	; 0x735c <__udivmodhi4>
    27f8:	cb 01       	movw	r24, r22
    27fa:	9c 01       	movw	r18, r24
    27fc:	22 0f       	add	r18, r18
    27fe:	33 1f       	adc	r19, r19
    2800:	c9 01       	movw	r24, r18
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	82 0f       	add	r24, r18
    280c:	93 1f       	adc	r25, r19
    280e:	90 93 8f 01 	sts	0x018F, r25
    2812:	80 93 8e 01 	sts	0x018E, r24
	//TimeForParking=TimeForParking*10;
	//LCD_moveCursor1(2,11);
	//LCD_intgerToString1(TimeForParking*100);
	//5 is the number for checking of sensor in operation
	TimeToCheckParking=TimeForParking/5;
    2816:	80 91 8e 01 	lds	r24, 0x018E
    281a:	90 91 8f 01 	lds	r25, 0x018F
    281e:	25 e0       	ldi	r18, 0x05	; 5
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	b9 01       	movw	r22, r18
    2824:	0e 94 ae 39 	call	0x735c	; 0x735c <__udivmodhi4>
    2828:	cb 01       	movw	r24, r22
    282a:	90 93 a3 01 	sts	0x01A3, r25
    282e:	80 93 a2 01 	sts	0x01A2, r24
	//equation to calculate distance between sensor and sidewalk
	Distance_Away =Width +(Width/3);
    2832:	80 91 68 01 	lds	r24, 0x0168
    2836:	90 91 69 01 	lds	r25, 0x0169
    283a:	23 e0       	ldi	r18, 0x03	; 3
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	b9 01       	movw	r22, r18
    2840:	0e 94 ae 39 	call	0x735c	; 0x735c <__udivmodhi4>
    2844:	cb 01       	movw	r24, r22
    2846:	9c 01       	movw	r18, r24
    2848:	80 91 68 01 	lds	r24, 0x0168
    284c:	90 91 69 01 	lds	r25, 0x0169
    2850:	82 0f       	add	r24, r18
    2852:	93 1f       	adc	r25, r19
    2854:	90 93 95 01 	sts	0x0195, r25
    2858:	80 93 94 01 	sts	0x0194, r24
	//calculate time that i will take while moving back to park
	timedMoveBack =((TimeForParking-time_of_lengh_of_car)*100/2);
    285c:	20 91 8e 01 	lds	r18, 0x018E
    2860:	30 91 8f 01 	lds	r19, 0x018F
    2864:	80 91 9a 01 	lds	r24, 0x019A
    2868:	90 91 9b 01 	lds	r25, 0x019B
    286c:	28 1b       	sub	r18, r24
    286e:	39 0b       	sbc	r19, r25
    2870:	84 e6       	ldi	r24, 0x64	; 100
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	ac 01       	movw	r20, r24
    2876:	24 9f       	mul	r18, r20
    2878:	c0 01       	movw	r24, r0
    287a:	25 9f       	mul	r18, r21
    287c:	90 0d       	add	r25, r0
    287e:	34 9f       	mul	r19, r20
    2880:	90 0d       	add	r25, r0
    2882:	11 24       	eor	r1, r1
    2884:	96 95       	lsr	r25
    2886:	87 95       	ror	r24
    2888:	90 93 bc 01 	sts	0x01BC, r25
    288c:	80 93 bb 01 	sts	0x01BB, r24
	/*
	time_of_moving_parallel_with_SideWalk=(3/4)*lenght / REAL_SPEED_OF_MOTOR;
	time_of_moving_parallel_with_road=(1/4)*lenght / REAL_SPEED_OF_MOTOR;
	 */
	/*	our equation of parking and exit of parking	*/
		time_of_extra_space_for_parking_after_check=((f32)((lenght*300)/4)/REAL_SPEED_OF_MOTOR);//750
    2890:	20 91 6a 01 	lds	r18, 0x016A
    2894:	30 91 6b 01 	lds	r19, 0x016B
    2898:	8c e2       	ldi	r24, 0x2C	; 44
    289a:	91 e0       	ldi	r25, 0x01	; 1
    289c:	fc 01       	movw	r30, r24
    289e:	2e 9f       	mul	r18, r30
    28a0:	c0 01       	movw	r24, r0
    28a2:	2f 9f       	mul	r18, r31
    28a4:	90 0d       	add	r25, r0
    28a6:	3e 9f       	mul	r19, r30
    28a8:	90 0d       	add	r25, r0
    28aa:	11 24       	eor	r1, r1
    28ac:	96 95       	lsr	r25
    28ae:	87 95       	ror	r24
    28b0:	96 95       	lsr	r25
    28b2:	87 95       	ror	r24
    28b4:	cc 01       	movw	r24, r24
    28b6:	a0 e0       	ldi	r26, 0x00	; 0
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	bc 01       	movw	r22, r24
    28bc:	cd 01       	movw	r24, r26
    28be:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	bc 01       	movw	r22, r24
    28c8:	cd 01       	movw	r24, r26
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e2       	ldi	r20, 0x20	; 32
    28d0:	52 e4       	ldi	r21, 0x42	; 66
    28d2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	80 93 a8 01 	sts	0x01A8, r24
    28de:	90 93 a9 01 	sts	0x01A9, r25
    28e2:	a0 93 aa 01 	sts	0x01AA, r26
    28e6:	b0 93 ab 01 	sts	0x01AB, r27
		time_of_first_move_of_parallel_parking=((f32)((lenght+((f32)2*lenght/5))*100)/REAL_SPEED_OF_MOTOR);//1400
    28ea:	80 91 6a 01 	lds	r24, 0x016A
    28ee:	90 91 6b 01 	lds	r25, 0x016B
    28f2:	cc 01       	movw	r24, r24
    28f4:	a0 e0       	ldi	r26, 0x00	; 0
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2900:	7b 01       	movw	r14, r22
    2902:	8c 01       	movw	r16, r24
    2904:	80 91 6a 01 	lds	r24, 0x016A
    2908:	90 91 6b 01 	lds	r25, 0x016B
    290c:	cc 01       	movw	r24, r24
    290e:	a0 e0       	ldi	r26, 0x00	; 0
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	bc 01       	movw	r22, r24
    2914:	cd 01       	movw	r24, r26
    2916:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    291a:	9b 01       	movw	r18, r22
    291c:	ac 01       	movw	r20, r24
    291e:	ca 01       	movw	r24, r20
    2920:	b9 01       	movw	r22, r18
    2922:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	bc 01       	movw	r22, r24
    292c:	cd 01       	movw	r24, r26
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 ea       	ldi	r20, 0xA0	; 160
    2934:	50 e4       	ldi	r21, 0x40	; 64
    2936:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	9c 01       	movw	r18, r24
    2940:	ad 01       	movw	r20, r26
    2942:	c8 01       	movw	r24, r16
    2944:	b7 01       	movw	r22, r14
    2946:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	bc 01       	movw	r22, r24
    2950:	cd 01       	movw	r24, r26
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	48 ec       	ldi	r20, 0xC8	; 200
    2958:	52 e4       	ldi	r21, 0x42	; 66
    295a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	bc 01       	movw	r22, r24
    2964:	cd 01       	movw	r24, r26
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e2       	ldi	r20, 0x20	; 32
    296c:	52 e4       	ldi	r21, 0x42	; 66
    296e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	80 93 90 01 	sts	0x0190, r24
    297a:	90 93 91 01 	sts	0x0191, r25
    297e:	a0 93 92 01 	sts	0x0192, r26
    2982:	b0 93 93 01 	sts	0x0193, r27
		time_of_second_move_of_parallel_parking=((f32)((lenght+(lenght/10))*100)/REAL_SPEED_OF_MOTOR);//1100
    2986:	80 91 6a 01 	lds	r24, 0x016A
    298a:	90 91 6b 01 	lds	r25, 0x016B
    298e:	2a e0       	ldi	r18, 0x0A	; 10
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	b9 01       	movw	r22, r18
    2994:	0e 94 ae 39 	call	0x735c	; 0x735c <__udivmodhi4>
    2998:	cb 01       	movw	r24, r22
    299a:	9c 01       	movw	r18, r24
    299c:	80 91 6a 01 	lds	r24, 0x016A
    29a0:	90 91 6b 01 	lds	r25, 0x016B
    29a4:	28 0f       	add	r18, r24
    29a6:	39 1f       	adc	r19, r25
    29a8:	84 e6       	ldi	r24, 0x64	; 100
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	ac 01       	movw	r20, r24
    29ae:	24 9f       	mul	r18, r20
    29b0:	c0 01       	movw	r24, r0
    29b2:	25 9f       	mul	r18, r21
    29b4:	90 0d       	add	r25, r0
    29b6:	34 9f       	mul	r19, r20
    29b8:	90 0d       	add	r25, r0
    29ba:	11 24       	eor	r1, r1
    29bc:	cc 01       	movw	r24, r24
    29be:	a0 e0       	ldi	r26, 0x00	; 0
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	bc 01       	movw	r22, r24
    29c4:	cd 01       	movw	r24, r26
    29c6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	bc 01       	movw	r22, r24
    29d0:	cd 01       	movw	r24, r26
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e2       	ldi	r20, 0x20	; 32
    29d8:	52 e4       	ldi	r21, 0x42	; 66
    29da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	80 93 b0 01 	sts	0x01B0, r24
    29e6:	90 93 b1 01 	sts	0x01B1, r25
    29ea:	a0 93 b2 01 	sts	0x01B2, r26
    29ee:	b0 93 b3 01 	sts	0x01B3, r27
		time_of_third_move_of_parallel_parking=((f32)((2*lenght+(2*lenght/10))*100)/REAL_SPEED_OF_MOTOR);//2200
    29f2:	80 91 6a 01 	lds	r24, 0x016A
    29f6:	90 91 6b 01 	lds	r25, 0x016B
    29fa:	fc 01       	movw	r30, r24
    29fc:	ee 0f       	add	r30, r30
    29fe:	ff 1f       	adc	r31, r31
    2a00:	80 91 6a 01 	lds	r24, 0x016A
    2a04:	90 91 6b 01 	lds	r25, 0x016B
    2a08:	88 0f       	add	r24, r24
    2a0a:	99 1f       	adc	r25, r25
    2a0c:	2a e0       	ldi	r18, 0x0A	; 10
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	b9 01       	movw	r22, r18
    2a12:	0e 94 ae 39 	call	0x735c	; 0x735c <__udivmodhi4>
    2a16:	cb 01       	movw	r24, r22
    2a18:	9f 01       	movw	r18, r30
    2a1a:	28 0f       	add	r18, r24
    2a1c:	39 1f       	adc	r19, r25
    2a1e:	84 e6       	ldi	r24, 0x64	; 100
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	fc 01       	movw	r30, r24
    2a24:	2e 9f       	mul	r18, r30
    2a26:	c0 01       	movw	r24, r0
    2a28:	2f 9f       	mul	r18, r31
    2a2a:	90 0d       	add	r25, r0
    2a2c:	3e 9f       	mul	r19, r30
    2a2e:	90 0d       	add	r25, r0
    2a30:	11 24       	eor	r1, r1
    2a32:	cc 01       	movw	r24, r24
    2a34:	a0 e0       	ldi	r26, 0x00	; 0
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	bc 01       	movw	r22, r24
    2a46:	cd 01       	movw	r24, r26
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	40 e2       	ldi	r20, 0x20	; 32
    2a4e:	52 e4       	ldi	r21, 0x42	; 66
    2a50:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	80 93 ac 01 	sts	0x01AC, r24
    2a5c:	90 93 ad 01 	sts	0x01AD, r25
    2a60:	a0 93 ae 01 	sts	0x01AE, r26
    2a64:	b0 93 af 01 	sts	0x01AF, r27
		time_of_fourth_move_of_parallel_parking=((f32)(lenght*50)/REAL_SPEED_OF_MOTOR);//500
    2a68:	20 91 6a 01 	lds	r18, 0x016A
    2a6c:	30 91 6b 01 	lds	r19, 0x016B
    2a70:	82 e3       	ldi	r24, 0x32	; 50
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	ac 01       	movw	r20, r24
    2a76:	24 9f       	mul	r18, r20
    2a78:	c0 01       	movw	r24, r0
    2a7a:	25 9f       	mul	r18, r21
    2a7c:	90 0d       	add	r25, r0
    2a7e:	34 9f       	mul	r19, r20
    2a80:	90 0d       	add	r25, r0
    2a82:	11 24       	eor	r1, r1
    2a84:	cc 01       	movw	r24, r24
    2a86:	a0 e0       	ldi	r26, 0x00	; 0
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	bc 01       	movw	r22, r24
    2a8c:	cd 01       	movw	r24, r26
    2a8e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	bc 01       	movw	r22, r24
    2a98:	cd 01       	movw	r24, r26
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e2       	ldi	r20, 0x20	; 32
    2aa0:	52 e4       	ldi	r21, 0x42	; 66
    2aa2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	80 93 8a 01 	sts	0x018A, r24
    2aae:	90 93 8b 01 	sts	0x018B, r25
    2ab2:	a0 93 8c 01 	sts	0x018C, r26
    2ab6:	b0 93 8d 01 	sts	0x018D, r27
		time_of_first_move_of_parallel_exit=((f32)((lenght+((f32)lenght/2))*100)/REAL_SPEED_OF_MOTOR);
    2aba:	80 91 6a 01 	lds	r24, 0x016A
    2abe:	90 91 6b 01 	lds	r25, 0x016B
    2ac2:	cc 01       	movw	r24, r24
    2ac4:	a0 e0       	ldi	r26, 0x00	; 0
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	bc 01       	movw	r22, r24
    2aca:	cd 01       	movw	r24, r26
    2acc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2ad0:	7b 01       	movw	r14, r22
    2ad2:	8c 01       	movw	r16, r24
    2ad4:	80 91 6a 01 	lds	r24, 0x016A
    2ad8:	90 91 6b 01 	lds	r25, 0x016B
    2adc:	cc 01       	movw	r24, r24
    2ade:	a0 e0       	ldi	r26, 0x00	; 0
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	bc 01       	movw	r22, r24
    2ae4:	cd 01       	movw	r24, r26
    2ae6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e0       	ldi	r20, 0x00	; 0
    2af8:	50 e4       	ldi	r21, 0x40	; 64
    2afa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9c 01       	movw	r18, r24
    2b04:	ad 01       	movw	r20, r26
    2b06:	c8 01       	movw	r24, r16
    2b08:	b7 01       	movw	r22, r14
    2b0a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	bc 01       	movw	r22, r24
    2b14:	cd 01       	movw	r24, r26
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	48 ec       	ldi	r20, 0xC8	; 200
    2b1c:	52 e4       	ldi	r21, 0x42	; 66
    2b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	bc 01       	movw	r22, r24
    2b28:	cd 01       	movw	r24, r26
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e2       	ldi	r20, 0x20	; 32
    2b30:	52 e4       	ldi	r21, 0x42	; 66
    2b32:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	80 93 bf 01 	sts	0x01BF, r24
    2b3e:	90 93 c0 01 	sts	0x01C0, r25
    2b42:	a0 93 c1 01 	sts	0x01C1, r26
    2b46:	b0 93 c2 01 	sts	0x01C2, r27
		//time_of_move_back_parallel_exit =((lenght-Ultra_Front_Dis1)*100)/REAL_SPEED_OF_MOTOR;//this equation is dynamic about the distance it written in bottom with function that calculate before exit
		time_of_move_back_perpindicular_park_count5=((f32)(lenght*100)/REAL_SPEED_OF_MOTOR);//250
    2b4a:	20 91 6a 01 	lds	r18, 0x016A
    2b4e:	30 91 6b 01 	lds	r19, 0x016B
    2b52:	84 e6       	ldi	r24, 0x64	; 100
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	fc 01       	movw	r30, r24
    2b58:	2e 9f       	mul	r18, r30
    2b5a:	c0 01       	movw	r24, r0
    2b5c:	2f 9f       	mul	r18, r31
    2b5e:	90 0d       	add	r25, r0
    2b60:	3e 9f       	mul	r19, r30
    2b62:	90 0d       	add	r25, r0
    2b64:	11 24       	eor	r1, r1
    2b66:	cc 01       	movw	r24, r24
    2b68:	a0 e0       	ldi	r26, 0x00	; 0
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	bc 01       	movw	r22, r24
    2b6e:	cd 01       	movw	r24, r26
    2b70:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	bc 01       	movw	r22, r24
    2b7a:	cd 01       	movw	r24, r26
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e2       	ldi	r20, 0x20	; 32
    2b82:	52 e4       	ldi	r21, 0x42	; 66
    2b84:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	80 93 a4 01 	sts	0x01A4, r24
    2b90:	90 93 a5 01 	sts	0x01A5, r25
    2b94:	a0 93 a6 01 	sts	0x01A6, r26
    2b98:	b0 93 a7 01 	sts	0x01A7, r27
		time_of_move_back_perpindicular_park_count6=((f32)(lenght*100+TimeToCheckParking*10)/REAL_SPEED_OF_MOTOR);//400
    2b9c:	20 91 6a 01 	lds	r18, 0x016A
    2ba0:	30 91 6b 01 	lds	r19, 0x016B
    2ba4:	84 e6       	ldi	r24, 0x64	; 100
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	28 9f       	mul	r18, r24
    2baa:	a0 01       	movw	r20, r0
    2bac:	29 9f       	mul	r18, r25
    2bae:	50 0d       	add	r21, r0
    2bb0:	38 9f       	mul	r19, r24
    2bb2:	50 0d       	add	r21, r0
    2bb4:	11 24       	eor	r1, r1
    2bb6:	80 91 a2 01 	lds	r24, 0x01A2
    2bba:	90 91 a3 01 	lds	r25, 0x01A3
    2bbe:	9c 01       	movw	r18, r24
    2bc0:	22 0f       	add	r18, r18
    2bc2:	33 1f       	adc	r19, r19
    2bc4:	c9 01       	movw	r24, r18
    2bc6:	88 0f       	add	r24, r24
    2bc8:	99 1f       	adc	r25, r25
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	82 0f       	add	r24, r18
    2bd0:	93 1f       	adc	r25, r19
    2bd2:	84 0f       	add	r24, r20
    2bd4:	95 1f       	adc	r25, r21
    2bd6:	cc 01       	movw	r24, r24
    2bd8:	a0 e0       	ldi	r26, 0x00	; 0
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	bc 01       	movw	r22, r24
    2bde:	cd 01       	movw	r24, r26
    2be0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	bc 01       	movw	r22, r24
    2bea:	cd 01       	movw	r24, r26
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e2       	ldi	r20, 0x20	; 32
    2bf2:	52 e4       	ldi	r21, 0x42	; 66
    2bf4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	80 93 c9 01 	sts	0x01C9, r24
    2c00:	90 93 ca 01 	sts	0x01CA, r25
    2c04:	a0 93 cb 01 	sts	0x01CB, r26
    2c08:	b0 93 cc 01 	sts	0x01CC, r27
	//	time_of_move_back_perpindicular_exit_count7=((lenght*100/1.8)/REAL_SPEED_OF_MOTOR);//555
	    time_of_move_perpindicular_park=((Width+Width/6)*100)/REAL_SPEED_OF_MOTOR;
    2c0c:	80 91 68 01 	lds	r24, 0x0168
    2c10:	90 91 69 01 	lds	r25, 0x0169
    2c14:	26 e0       	ldi	r18, 0x06	; 6
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	b9 01       	movw	r22, r18
    2c1a:	0e 94 ae 39 	call	0x735c	; 0x735c <__udivmodhi4>
    2c1e:	cb 01       	movw	r24, r22
    2c20:	9c 01       	movw	r18, r24
    2c22:	80 91 68 01 	lds	r24, 0x0168
    2c26:	90 91 69 01 	lds	r25, 0x0169
    2c2a:	28 0f       	add	r18, r24
    2c2c:	39 1f       	adc	r19, r25
    2c2e:	84 e6       	ldi	r24, 0x64	; 100
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	ac 01       	movw	r20, r24
    2c34:	24 9f       	mul	r18, r20
    2c36:	c0 01       	movw	r24, r0
    2c38:	25 9f       	mul	r18, r21
    2c3a:	90 0d       	add	r25, r0
    2c3c:	34 9f       	mul	r19, r20
    2c3e:	90 0d       	add	r25, r0
    2c40:	11 24       	eor	r1, r1
    2c42:	28 e2       	ldi	r18, 0x28	; 40
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	b9 01       	movw	r22, r18
    2c48:	0e 94 ae 39 	call	0x735c	; 0x735c <__udivmodhi4>
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	cc 01       	movw	r24, r24
    2c50:	a0 e0       	ldi	r26, 0x00	; 0
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	bc 01       	movw	r22, r24
    2c56:	cd 01       	movw	r24, r26
    2c58:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	80 93 c5 01 	sts	0x01C5, r24
    2c64:	90 93 c6 01 	sts	0x01C6, r25
    2c68:	a0 93 c7 01 	sts	0x01C7, r26
    2c6c:	b0 93 c8 01 	sts	0x01C8, r27




	Set_Angle_Servo_motor_3(0);
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <Set_Angle_Servo_motor_3>
    2c76:	fe 01       	movw	r30, r28
    2c78:	e7 57       	subi	r30, 0x77	; 119
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	aa ef       	ldi	r26, 0xFA	; 250
    2c82:	b3 e4       	ldi	r27, 0x43	; 67
    2c84:	80 83       	st	Z, r24
    2c86:	91 83       	std	Z+1, r25	; 0x01
    2c88:	a2 83       	std	Z+2, r26	; 0x02
    2c8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8c:	8e 01       	movw	r16, r28
    2c8e:	0b 57       	subi	r16, 0x7B	; 123
    2c90:	1f 4f       	sbci	r17, 0xFF	; 255
    2c92:	fe 01       	movw	r30, r28
    2c94:	e7 57       	subi	r30, 0x77	; 119
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	60 81       	ld	r22, Z
    2c9a:	71 81       	ldd	r23, Z+1	; 0x01
    2c9c:	82 81       	ldd	r24, Z+2	; 0x02
    2c9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	4a ef       	ldi	r20, 0xFA	; 250
    2ca6:	54 e4       	ldi	r21, 0x44	; 68
    2ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	f8 01       	movw	r30, r16
    2cb2:	80 83       	st	Z, r24
    2cb4:	91 83       	std	Z+1, r25	; 0x01
    2cb6:	a2 83       	std	Z+2, r26	; 0x02
    2cb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cba:	fe 01       	movw	r30, r28
    2cbc:	eb 57       	subi	r30, 0x7B	; 123
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	60 81       	ld	r22, Z
    2cc2:	71 81       	ldd	r23, Z+1	; 0x01
    2cc4:	82 81       	ldd	r24, Z+2	; 0x02
    2cc6:	93 81       	ldd	r25, Z+3	; 0x03
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	40 e8       	ldi	r20, 0x80	; 128
    2cce:	5f e3       	ldi	r21, 0x3F	; 63
    2cd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cd4:	88 23       	and	r24, r24
    2cd6:	44 f4       	brge	.+16     	; 0x2ce8 <main+0x640>
		__ticks = 1;
    2cd8:	fe 01       	movw	r30, r28
    2cda:	ed 57       	subi	r30, 0x7D	; 125
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	91 83       	std	Z+1, r25	; 0x01
    2ce4:	80 83       	st	Z, r24
    2ce6:	64 c0       	rjmp	.+200    	; 0x2db0 <main+0x708>
	else if (__tmp > 65535)
    2ce8:	fe 01       	movw	r30, r28
    2cea:	eb 57       	subi	r30, 0x7B	; 123
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	60 81       	ld	r22, Z
    2cf0:	71 81       	ldd	r23, Z+1	; 0x01
    2cf2:	82 81       	ldd	r24, Z+2	; 0x02
    2cf4:	93 81       	ldd	r25, Z+3	; 0x03
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	3f ef       	ldi	r19, 0xFF	; 255
    2cfa:	4f e7       	ldi	r20, 0x7F	; 127
    2cfc:	57 e4       	ldi	r21, 0x47	; 71
    2cfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d02:	18 16       	cp	r1, r24
    2d04:	0c f0       	brlt	.+2      	; 0x2d08 <main+0x660>
    2d06:	43 c0       	rjmp	.+134    	; 0x2d8e <main+0x6e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e7 57       	subi	r30, 0x77	; 119
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	60 81       	ld	r22, Z
    2d10:	71 81       	ldd	r23, Z+1	; 0x01
    2d12:	82 81       	ldd	r24, Z+2	; 0x02
    2d14:	93 81       	ldd	r25, Z+3	; 0x03
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e2       	ldi	r20, 0x20	; 32
    2d1c:	51 e4       	ldi	r21, 0x41	; 65
    2d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	8e 01       	movw	r16, r28
    2d28:	0d 57       	subi	r16, 0x7D	; 125
    2d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	f8 01       	movw	r30, r16
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	80 83       	st	Z, r24
    2d3e:	1f c0       	rjmp	.+62     	; 0x2d7e <main+0x6d6>
    2d40:	fe 01       	movw	r30, r28
    2d42:	ef 57       	subi	r30, 0x7F	; 127
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	88 ec       	ldi	r24, 0xC8	; 200
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	80 83       	st	Z, r24
    2d4e:	fe 01       	movw	r30, r28
    2d50:	ef 57       	subi	r30, 0x7F	; 127
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	80 81       	ld	r24, Z
    2d56:	91 81       	ldd	r25, Z+1	; 0x01
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <main+0x6b0>
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	ef 57       	subi	r30, 0x7F	; 127
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	91 83       	std	Z+1, r25	; 0x01
    2d64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d66:	de 01       	movw	r26, r28
    2d68:	ad 57       	subi	r26, 0x7D	; 125
    2d6a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	ed 57       	subi	r30, 0x7D	; 125
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	80 81       	ld	r24, Z
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	11 96       	adiw	r26, 0x01	; 1
    2d7a:	9c 93       	st	X, r25
    2d7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d7e:	fe 01       	movw	r30, r28
    2d80:	ed 57       	subi	r30, 0x7D	; 125
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	80 81       	ld	r24, Z
    2d86:	91 81       	ldd	r25, Z+1	; 0x01
    2d88:	00 97       	sbiw	r24, 0x00	; 0
    2d8a:	d1 f6       	brne	.-76     	; 0x2d40 <main+0x698>
    2d8c:	27 c0       	rjmp	.+78     	; 0x2ddc <main+0x734>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8e:	8e 01       	movw	r16, r28
    2d90:	0d 57       	subi	r16, 0x7D	; 125
    2d92:	1f 4f       	sbci	r17, 0xFF	; 255
    2d94:	fe 01       	movw	r30, r28
    2d96:	eb 57       	subi	r30, 0x7B	; 123
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	60 81       	ld	r22, Z
    2d9c:	71 81       	ldd	r23, Z+1	; 0x01
    2d9e:	82 81       	ldd	r24, Z+2	; 0x02
    2da0:	93 81       	ldd	r25, Z+3	; 0x03
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	f8 01       	movw	r30, r16
    2dac:	91 83       	std	Z+1, r25	; 0x01
    2dae:	80 83       	st	Z, r24
    2db0:	de 01       	movw	r26, r28
    2db2:	a1 58       	subi	r26, 0x81	; 129
    2db4:	bf 4f       	sbci	r27, 0xFF	; 255
    2db6:	fe 01       	movw	r30, r28
    2db8:	ed 57       	subi	r30, 0x7D	; 125
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	80 81       	ld	r24, Z
    2dbe:	91 81       	ldd	r25, Z+1	; 0x01
    2dc0:	8d 93       	st	X+, r24
    2dc2:	9c 93       	st	X, r25
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e1 58       	subi	r30, 0x81	; 129
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	80 81       	ld	r24, Z
    2dcc:	91 81       	ldd	r25, Z+1	; 0x01
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	f1 f7       	brne	.-4      	; 0x2dce <main+0x726>
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	e1 58       	subi	r30, 0x81	; 129
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	91 83       	std	Z+1, r25	; 0x01
    2dda:	80 83       	st	Z, r24

		//Check_Distance_Parallel(); //done parallel parking
		//   Check_Distance_exiting();//check and choose exiting function done

		_delay_ms(500);
		if(DIO_u8GetPinValue(DIO_u8PORTC,0)==0)
    2ddc:	83 e0       	ldi	r24, 0x03	; 3
    2dde:	60 e0       	ldi	r22, 0x00	; 0
    2de0:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8GetPinValue>
    2de4:	88 23       	and	r24, r24
    2de6:	09 f0       	breq	.+2      	; 0x2dea <main+0x742>
    2de8:	e4 c3       	rjmp	.+1992   	; 0x35b2 <main+0xf0a>
    2dea:	fe 01       	movw	r30, r28
    2dec:	e5 58       	subi	r30, 0x85	; 133
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	aa ef       	ldi	r26, 0xFA	; 250
    2df6:	b3 e4       	ldi	r27, 0x43	; 67
    2df8:	80 83       	st	Z, r24
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	a2 83       	std	Z+2, r26	; 0x02
    2dfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e00:	8e 01       	movw	r16, r28
    2e02:	09 58       	subi	r16, 0x89	; 137
    2e04:	1f 4f       	sbci	r17, 0xFF	; 255
    2e06:	fe 01       	movw	r30, r28
    2e08:	e5 58       	subi	r30, 0x85	; 133
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	60 81       	ld	r22, Z
    2e0e:	71 81       	ldd	r23, Z+1	; 0x01
    2e10:	82 81       	ldd	r24, Z+2	; 0x02
    2e12:	93 81       	ldd	r25, Z+3	; 0x03
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	4a ef       	ldi	r20, 0xFA	; 250
    2e1a:	54 e4       	ldi	r21, 0x44	; 68
    2e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	f8 01       	movw	r30, r16
    2e26:	80 83       	st	Z, r24
    2e28:	91 83       	std	Z+1, r25	; 0x01
    2e2a:	a2 83       	std	Z+2, r26	; 0x02
    2e2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e2e:	fe 01       	movw	r30, r28
    2e30:	e9 58       	subi	r30, 0x89	; 137
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	60 81       	ld	r22, Z
    2e36:	71 81       	ldd	r23, Z+1	; 0x01
    2e38:	82 81       	ldd	r24, Z+2	; 0x02
    2e3a:	93 81       	ldd	r25, Z+3	; 0x03
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e8       	ldi	r20, 0x80	; 128
    2e42:	5f e3       	ldi	r21, 0x3F	; 63
    2e44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e48:	88 23       	and	r24, r24
    2e4a:	44 f4       	brge	.+16     	; 0x2e5c <main+0x7b4>
		__ticks = 1;
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	eb 58       	subi	r30, 0x8B	; 139
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	80 83       	st	Z, r24
    2e5a:	64 c0       	rjmp	.+200    	; 0x2f24 <main+0x87c>
	else if (__tmp > 65535)
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e9 58       	subi	r30, 0x89	; 137
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	60 81       	ld	r22, Z
    2e64:	71 81       	ldd	r23, Z+1	; 0x01
    2e66:	82 81       	ldd	r24, Z+2	; 0x02
    2e68:	93 81       	ldd	r25, Z+3	; 0x03
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	3f ef       	ldi	r19, 0xFF	; 255
    2e6e:	4f e7       	ldi	r20, 0x7F	; 127
    2e70:	57 e4       	ldi	r21, 0x47	; 71
    2e72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e76:	18 16       	cp	r1, r24
    2e78:	0c f0       	brlt	.+2      	; 0x2e7c <main+0x7d4>
    2e7a:	43 c0       	rjmp	.+134    	; 0x2f02 <main+0x85a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	e5 58       	subi	r30, 0x85	; 133
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	60 81       	ld	r22, Z
    2e84:	71 81       	ldd	r23, Z+1	; 0x01
    2e86:	82 81       	ldd	r24, Z+2	; 0x02
    2e88:	93 81       	ldd	r25, Z+3	; 0x03
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e2       	ldi	r20, 0x20	; 32
    2e90:	51 e4       	ldi	r21, 0x41	; 65
    2e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	8e 01       	movw	r16, r28
    2e9c:	0b 58       	subi	r16, 0x8B	; 139
    2e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea0:	bc 01       	movw	r22, r24
    2ea2:	cd 01       	movw	r24, r26
    2ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	f8 01       	movw	r30, r16
    2eae:	91 83       	std	Z+1, r25	; 0x01
    2eb0:	80 83       	st	Z, r24
    2eb2:	1f c0       	rjmp	.+62     	; 0x2ef2 <main+0x84a>
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	ed 58       	subi	r30, 0x8D	; 141
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	88 ec       	ldi	r24, 0xC8	; 200
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	91 83       	std	Z+1, r25	; 0x01
    2ec0:	80 83       	st	Z, r24
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	ed 58       	subi	r30, 0x8D	; 141
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	80 81       	ld	r24, Z
    2eca:	91 81       	ldd	r25, Z+1	; 0x01
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	f1 f7       	brne	.-4      	; 0x2ecc <main+0x824>
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	ed 58       	subi	r30, 0x8D	; 141
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	91 83       	std	Z+1, r25	; 0x01
    2ed8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eda:	de 01       	movw	r26, r28
    2edc:	ab 58       	subi	r26, 0x8B	; 139
    2ede:	bf 4f       	sbci	r27, 0xFF	; 255
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	eb 58       	subi	r30, 0x8B	; 139
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	80 81       	ld	r24, Z
    2ee8:	91 81       	ldd	r25, Z+1	; 0x01
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	11 96       	adiw	r26, 0x01	; 1
    2eee:	9c 93       	st	X, r25
    2ef0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	eb 58       	subi	r30, 0x8B	; 139
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	80 81       	ld	r24, Z
    2efa:	91 81       	ldd	r25, Z+1	; 0x01
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	d1 f6       	brne	.-76     	; 0x2eb4 <main+0x80c>
    2f00:	27 c0       	rjmp	.+78     	; 0x2f50 <main+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f02:	8e 01       	movw	r16, r28
    2f04:	0b 58       	subi	r16, 0x8B	; 139
    2f06:	1f 4f       	sbci	r17, 0xFF	; 255
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e9 58       	subi	r30, 0x89	; 137
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	60 81       	ld	r22, Z
    2f10:	71 81       	ldd	r23, Z+1	; 0x01
    2f12:	82 81       	ldd	r24, Z+2	; 0x02
    2f14:	93 81       	ldd	r25, Z+3	; 0x03
    2f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	f8 01       	movw	r30, r16
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	80 83       	st	Z, r24
    2f24:	de 01       	movw	r26, r28
    2f26:	af 58       	subi	r26, 0x8F	; 143
    2f28:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	eb 58       	subi	r30, 0x8B	; 139
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	80 81       	ld	r24, Z
    2f32:	91 81       	ldd	r25, Z+1	; 0x01
    2f34:	8d 93       	st	X+, r24
    2f36:	9c 93       	st	X, r25
    2f38:	fe 01       	movw	r30, r28
    2f3a:	ef 58       	subi	r30, 0x8F	; 143
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	80 81       	ld	r24, Z
    2f40:	91 81       	ldd	r25, Z+1	; 0x01
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <main+0x89a>
    2f46:	fe 01       	movw	r30, r28
    2f48:	ef 58       	subi	r30, 0x8F	; 143
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	91 83       	std	Z+1, r25	; 0x01
    2f4e:	80 83       	st	Z, r24
		{
			_delay_ms(500);
			if(DIO_u8GetPinValue(DIO_u8PORTC,0)==0)
    2f50:	83 e0       	ldi	r24, 0x03	; 3
    2f52:	60 e0       	ldi	r22, 0x00	; 0
    2f54:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8GetPinValue>
    2f58:	88 23       	and	r24, r24
    2f5a:	09 f0       	breq	.+2      	; 0x2f5e <main+0x8b6>
    2f5c:	8c ce       	rjmp	.-744    	; 0x2c76 <main+0x5ce>
					{
				MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
    2f5e:	86 e9       	ldi	r24, 0x96	; 150
    2f60:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <MOVE_FORWARD>
    2f64:	fe 01       	movw	r30, r28
    2f66:	e3 59       	subi	r30, 0x93	; 147
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	aa e7       	ldi	r26, 0x7A	; 122
    2f70:	b4 e4       	ldi	r27, 0x44	; 68
    2f72:	80 83       	st	Z, r24
    2f74:	91 83       	std	Z+1, r25	; 0x01
    2f76:	a2 83       	std	Z+2, r26	; 0x02
    2f78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f7a:	8e 01       	movw	r16, r28
    2f7c:	07 59       	subi	r16, 0x97	; 151
    2f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f80:	fe 01       	movw	r30, r28
    2f82:	e3 59       	subi	r30, 0x93	; 147
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	60 81       	ld	r22, Z
    2f88:	71 81       	ldd	r23, Z+1	; 0x01
    2f8a:	82 81       	ldd	r24, Z+2	; 0x02
    2f8c:	93 81       	ldd	r25, Z+3	; 0x03
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	4a ef       	ldi	r20, 0xFA	; 250
    2f94:	54 e4       	ldi	r21, 0x44	; 68
    2f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	f8 01       	movw	r30, r16
    2fa0:	80 83       	st	Z, r24
    2fa2:	91 83       	std	Z+1, r25	; 0x01
    2fa4:	a2 83       	std	Z+2, r26	; 0x02
    2fa6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e7 59       	subi	r30, 0x97	; 151
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	60 81       	ld	r22, Z
    2fb0:	71 81       	ldd	r23, Z+1	; 0x01
    2fb2:	82 81       	ldd	r24, Z+2	; 0x02
    2fb4:	93 81       	ldd	r25, Z+3	; 0x03
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e8       	ldi	r20, 0x80	; 128
    2fbc:	5f e3       	ldi	r21, 0x3F	; 63
    2fbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fc2:	88 23       	and	r24, r24
    2fc4:	44 f4       	brge	.+16     	; 0x2fd6 <main+0x92e>
		__ticks = 1;
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e9 59       	subi	r30, 0x99	; 153
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	91 83       	std	Z+1, r25	; 0x01
    2fd2:	80 83       	st	Z, r24
    2fd4:	64 c0       	rjmp	.+200    	; 0x309e <main+0x9f6>
	else if (__tmp > 65535)
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	e7 59       	subi	r30, 0x97	; 151
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	60 81       	ld	r22, Z
    2fde:	71 81       	ldd	r23, Z+1	; 0x01
    2fe0:	82 81       	ldd	r24, Z+2	; 0x02
    2fe2:	93 81       	ldd	r25, Z+3	; 0x03
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	3f ef       	ldi	r19, 0xFF	; 255
    2fe8:	4f e7       	ldi	r20, 0x7F	; 127
    2fea:	57 e4       	ldi	r21, 0x47	; 71
    2fec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ff0:	18 16       	cp	r1, r24
    2ff2:	0c f0       	brlt	.+2      	; 0x2ff6 <main+0x94e>
    2ff4:	43 c0       	rjmp	.+134    	; 0x307c <main+0x9d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e3 59       	subi	r30, 0x93	; 147
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	60 81       	ld	r22, Z
    2ffe:	71 81       	ldd	r23, Z+1	; 0x01
    3000:	82 81       	ldd	r24, Z+2	; 0x02
    3002:	93 81       	ldd	r25, Z+3	; 0x03
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	40 e2       	ldi	r20, 0x20	; 32
    300a:	51 e4       	ldi	r21, 0x41	; 65
    300c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	8e 01       	movw	r16, r28
    3016:	09 59       	subi	r16, 0x99	; 153
    3018:	1f 4f       	sbci	r17, 0xFF	; 255
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	f8 01       	movw	r30, r16
    3028:	91 83       	std	Z+1, r25	; 0x01
    302a:	80 83       	st	Z, r24
    302c:	1f c0       	rjmp	.+62     	; 0x306c <main+0x9c4>
    302e:	fe 01       	movw	r30, r28
    3030:	eb 59       	subi	r30, 0x9B	; 155
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	88 ec       	ldi	r24, 0xC8	; 200
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	91 83       	std	Z+1, r25	; 0x01
    303a:	80 83       	st	Z, r24
    303c:	fe 01       	movw	r30, r28
    303e:	eb 59       	subi	r30, 0x9B	; 155
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	80 81       	ld	r24, Z
    3044:	91 81       	ldd	r25, Z+1	; 0x01
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	f1 f7       	brne	.-4      	; 0x3046 <main+0x99e>
    304a:	fe 01       	movw	r30, r28
    304c:	eb 59       	subi	r30, 0x9B	; 155
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	91 83       	std	Z+1, r25	; 0x01
    3052:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3054:	de 01       	movw	r26, r28
    3056:	a9 59       	subi	r26, 0x99	; 153
    3058:	bf 4f       	sbci	r27, 0xFF	; 255
    305a:	fe 01       	movw	r30, r28
    305c:	e9 59       	subi	r30, 0x99	; 153
    305e:	ff 4f       	sbci	r31, 0xFF	; 255
    3060:	80 81       	ld	r24, Z
    3062:	91 81       	ldd	r25, Z+1	; 0x01
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	11 96       	adiw	r26, 0x01	; 1
    3068:	9c 93       	st	X, r25
    306a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306c:	fe 01       	movw	r30, r28
    306e:	e9 59       	subi	r30, 0x99	; 153
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	80 81       	ld	r24, Z
    3074:	91 81       	ldd	r25, Z+1	; 0x01
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	d1 f6       	brne	.-76     	; 0x302e <main+0x986>
    307a:	27 c0       	rjmp	.+78     	; 0x30ca <main+0xa22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307c:	8e 01       	movw	r16, r28
    307e:	09 59       	subi	r16, 0x99	; 153
    3080:	1f 4f       	sbci	r17, 0xFF	; 255
    3082:	fe 01       	movw	r30, r28
    3084:	e7 59       	subi	r30, 0x97	; 151
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	60 81       	ld	r22, Z
    308a:	71 81       	ldd	r23, Z+1	; 0x01
    308c:	82 81       	ldd	r24, Z+2	; 0x02
    308e:	93 81       	ldd	r25, Z+3	; 0x03
    3090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	f8 01       	movw	r30, r16
    309a:	91 83       	std	Z+1, r25	; 0x01
    309c:	80 83       	st	Z, r24
    309e:	de 01       	movw	r26, r28
    30a0:	ad 59       	subi	r26, 0x9D	; 157
    30a2:	bf 4f       	sbci	r27, 0xFF	; 255
    30a4:	fe 01       	movw	r30, r28
    30a6:	e9 59       	subi	r30, 0x99	; 153
    30a8:	ff 4f       	sbci	r31, 0xFF	; 255
    30aa:	80 81       	ld	r24, Z
    30ac:	91 81       	ldd	r25, Z+1	; 0x01
    30ae:	8d 93       	st	X+, r24
    30b0:	9c 93       	st	X, r25
    30b2:	fe 01       	movw	r30, r28
    30b4:	ed 59       	subi	r30, 0x9D	; 157
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	80 81       	ld	r24, Z
    30ba:	91 81       	ldd	r25, Z+1	; 0x01
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	f1 f7       	brne	.-4      	; 0x30bc <main+0xa14>
    30c0:	fe 01       	movw	r30, r28
    30c2:	ed 59       	subi	r30, 0x9D	; 157
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	91 83       	std	Z+1, r25	; 0x01
    30c8:	80 83       	st	Z, r24
				_delay_ms(1000);
				STOP_DC_MOTOR();
    30ca:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
    30ce:	fe 01       	movw	r30, r28
    30d0:	e1 5a       	subi	r30, 0xA1	; 161
    30d2:	ff 4f       	sbci	r31, 0xFF	; 255
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	aa ef       	ldi	r26, 0xFA	; 250
    30da:	b4 e4       	ldi	r27, 0x44	; 68
    30dc:	80 83       	st	Z, r24
    30de:	91 83       	std	Z+1, r25	; 0x01
    30e0:	a2 83       	std	Z+2, r26	; 0x02
    30e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e4:	8e 01       	movw	r16, r28
    30e6:	05 5a       	subi	r16, 0xA5	; 165
    30e8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ea:	fe 01       	movw	r30, r28
    30ec:	e1 5a       	subi	r30, 0xA1	; 161
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	60 81       	ld	r22, Z
    30f2:	71 81       	ldd	r23, Z+1	; 0x01
    30f4:	82 81       	ldd	r24, Z+2	; 0x02
    30f6:	93 81       	ldd	r25, Z+3	; 0x03
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	4a ef       	ldi	r20, 0xFA	; 250
    30fe:	54 e4       	ldi	r21, 0x44	; 68
    3100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	f8 01       	movw	r30, r16
    310a:	80 83       	st	Z, r24
    310c:	91 83       	std	Z+1, r25	; 0x01
    310e:	a2 83       	std	Z+2, r26	; 0x02
    3110:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3112:	fe 01       	movw	r30, r28
    3114:	e5 5a       	subi	r30, 0xA5	; 165
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	60 81       	ld	r22, Z
    311a:	71 81       	ldd	r23, Z+1	; 0x01
    311c:	82 81       	ldd	r24, Z+2	; 0x02
    311e:	93 81       	ldd	r25, Z+3	; 0x03
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e8       	ldi	r20, 0x80	; 128
    3126:	5f e3       	ldi	r21, 0x3F	; 63
    3128:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    312c:	88 23       	and	r24, r24
    312e:	44 f4       	brge	.+16     	; 0x3140 <main+0xa98>
		__ticks = 1;
    3130:	fe 01       	movw	r30, r28
    3132:	e7 5a       	subi	r30, 0xA7	; 167
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	91 83       	std	Z+1, r25	; 0x01
    313c:	80 83       	st	Z, r24
    313e:	64 c0       	rjmp	.+200    	; 0x3208 <main+0xb60>
	else if (__tmp > 65535)
    3140:	fe 01       	movw	r30, r28
    3142:	e5 5a       	subi	r30, 0xA5	; 165
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	60 81       	ld	r22, Z
    3148:	71 81       	ldd	r23, Z+1	; 0x01
    314a:	82 81       	ldd	r24, Z+2	; 0x02
    314c:	93 81       	ldd	r25, Z+3	; 0x03
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	3f ef       	ldi	r19, 0xFF	; 255
    3152:	4f e7       	ldi	r20, 0x7F	; 127
    3154:	57 e4       	ldi	r21, 0x47	; 71
    3156:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    315a:	18 16       	cp	r1, r24
    315c:	0c f0       	brlt	.+2      	; 0x3160 <main+0xab8>
    315e:	43 c0       	rjmp	.+134    	; 0x31e6 <main+0xb3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3160:	fe 01       	movw	r30, r28
    3162:	e1 5a       	subi	r30, 0xA1	; 161
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	60 81       	ld	r22, Z
    3168:	71 81       	ldd	r23, Z+1	; 0x01
    316a:	82 81       	ldd	r24, Z+2	; 0x02
    316c:	93 81       	ldd	r25, Z+3	; 0x03
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	40 e2       	ldi	r20, 0x20	; 32
    3174:	51 e4       	ldi	r21, 0x41	; 65
    3176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	8e 01       	movw	r16, r28
    3180:	07 5a       	subi	r16, 0xA7	; 167
    3182:	1f 4f       	sbci	r17, 0xFF	; 255
    3184:	bc 01       	movw	r22, r24
    3186:	cd 01       	movw	r24, r26
    3188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	f8 01       	movw	r30, r16
    3192:	91 83       	std	Z+1, r25	; 0x01
    3194:	80 83       	st	Z, r24
    3196:	1f c0       	rjmp	.+62     	; 0x31d6 <main+0xb2e>
    3198:	fe 01       	movw	r30, r28
    319a:	e9 5a       	subi	r30, 0xA9	; 169
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	88 ec       	ldi	r24, 0xC8	; 200
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	91 83       	std	Z+1, r25	; 0x01
    31a4:	80 83       	st	Z, r24
    31a6:	fe 01       	movw	r30, r28
    31a8:	e9 5a       	subi	r30, 0xA9	; 169
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	80 81       	ld	r24, Z
    31ae:	91 81       	ldd	r25, Z+1	; 0x01
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <main+0xb08>
    31b4:	fe 01       	movw	r30, r28
    31b6:	e9 5a       	subi	r30, 0xA9	; 169
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	91 83       	std	Z+1, r25	; 0x01
    31bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31be:	de 01       	movw	r26, r28
    31c0:	a7 5a       	subi	r26, 0xA7	; 167
    31c2:	bf 4f       	sbci	r27, 0xFF	; 255
    31c4:	fe 01       	movw	r30, r28
    31c6:	e7 5a       	subi	r30, 0xA7	; 167
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	80 81       	ld	r24, Z
    31cc:	91 81       	ldd	r25, Z+1	; 0x01
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	11 96       	adiw	r26, 0x01	; 1
    31d2:	9c 93       	st	X, r25
    31d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d6:	fe 01       	movw	r30, r28
    31d8:	e7 5a       	subi	r30, 0xA7	; 167
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 81       	ld	r24, Z
    31de:	91 81       	ldd	r25, Z+1	; 0x01
    31e0:	00 97       	sbiw	r24, 0x00	; 0
    31e2:	d1 f6       	brne	.-76     	; 0x3198 <main+0xaf0>
    31e4:	27 c0       	rjmp	.+78     	; 0x3234 <main+0xb8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e6:	8e 01       	movw	r16, r28
    31e8:	07 5a       	subi	r16, 0xA7	; 167
    31ea:	1f 4f       	sbci	r17, 0xFF	; 255
    31ec:	fe 01       	movw	r30, r28
    31ee:	e5 5a       	subi	r30, 0xA5	; 165
    31f0:	ff 4f       	sbci	r31, 0xFF	; 255
    31f2:	60 81       	ld	r22, Z
    31f4:	71 81       	ldd	r23, Z+1	; 0x01
    31f6:	82 81       	ldd	r24, Z+2	; 0x02
    31f8:	93 81       	ldd	r25, Z+3	; 0x03
    31fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	f8 01       	movw	r30, r16
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	80 83       	st	Z, r24
    3208:	de 01       	movw	r26, r28
    320a:	ab 5a       	subi	r26, 0xAB	; 171
    320c:	bf 4f       	sbci	r27, 0xFF	; 255
    320e:	fe 01       	movw	r30, r28
    3210:	e7 5a       	subi	r30, 0xA7	; 167
    3212:	ff 4f       	sbci	r31, 0xFF	; 255
    3214:	80 81       	ld	r24, Z
    3216:	91 81       	ldd	r25, Z+1	; 0x01
    3218:	8d 93       	st	X+, r24
    321a:	9c 93       	st	X, r25
    321c:	fe 01       	movw	r30, r28
    321e:	eb 5a       	subi	r30, 0xAB	; 171
    3220:	ff 4f       	sbci	r31, 0xFF	; 255
    3222:	80 81       	ld	r24, Z
    3224:	91 81       	ldd	r25, Z+1	; 0x01
    3226:	01 97       	sbiw	r24, 0x01	; 1
    3228:	f1 f7       	brne	.-4      	; 0x3226 <main+0xb7e>
    322a:	fe 01       	movw	r30, r28
    322c:	eb 5a       	subi	r30, 0xAB	; 171
    322e:	ff 4f       	sbci	r31, 0xFF	; 255
    3230:	91 83       	std	Z+1, r25	; 0x01
    3232:	80 83       	st	Z, r24
				_delay_ms(2000);
				MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_CHECK);
    3234:	80 ea       	ldi	r24, 0xA0	; 160
    3236:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <MOVE_FORWARD>
    323a:	fe 01       	movw	r30, r28
    323c:	ef 5a       	subi	r30, 0xAF	; 175
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	aa e7       	ldi	r26, 0x7A	; 122
    3246:	b4 e4       	ldi	r27, 0x44	; 68
    3248:	80 83       	st	Z, r24
    324a:	91 83       	std	Z+1, r25	; 0x01
    324c:	a2 83       	std	Z+2, r26	; 0x02
    324e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3250:	8e 01       	movw	r16, r28
    3252:	03 5b       	subi	r16, 0xB3	; 179
    3254:	1f 4f       	sbci	r17, 0xFF	; 255
    3256:	fe 01       	movw	r30, r28
    3258:	ef 5a       	subi	r30, 0xAF	; 175
    325a:	ff 4f       	sbci	r31, 0xFF	; 255
    325c:	60 81       	ld	r22, Z
    325e:	71 81       	ldd	r23, Z+1	; 0x01
    3260:	82 81       	ldd	r24, Z+2	; 0x02
    3262:	93 81       	ldd	r25, Z+3	; 0x03
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	4a ef       	ldi	r20, 0xFA	; 250
    326a:	54 e4       	ldi	r21, 0x44	; 68
    326c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	f8 01       	movw	r30, r16
    3276:	80 83       	st	Z, r24
    3278:	91 83       	std	Z+1, r25	; 0x01
    327a:	a2 83       	std	Z+2, r26	; 0x02
    327c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    327e:	fe 01       	movw	r30, r28
    3280:	e3 5b       	subi	r30, 0xB3	; 179
    3282:	ff 4f       	sbci	r31, 0xFF	; 255
    3284:	60 81       	ld	r22, Z
    3286:	71 81       	ldd	r23, Z+1	; 0x01
    3288:	82 81       	ldd	r24, Z+2	; 0x02
    328a:	93 81       	ldd	r25, Z+3	; 0x03
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e8       	ldi	r20, 0x80	; 128
    3292:	5f e3       	ldi	r21, 0x3F	; 63
    3294:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3298:	88 23       	and	r24, r24
    329a:	44 f4       	brge	.+16     	; 0x32ac <main+0xc04>
		__ticks = 1;
    329c:	fe 01       	movw	r30, r28
    329e:	e5 5b       	subi	r30, 0xB5	; 181
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	91 83       	std	Z+1, r25	; 0x01
    32a8:	80 83       	st	Z, r24
    32aa:	64 c0       	rjmp	.+200    	; 0x3374 <main+0xccc>
	else if (__tmp > 65535)
    32ac:	fe 01       	movw	r30, r28
    32ae:	e3 5b       	subi	r30, 0xB3	; 179
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	60 81       	ld	r22, Z
    32b4:	71 81       	ldd	r23, Z+1	; 0x01
    32b6:	82 81       	ldd	r24, Z+2	; 0x02
    32b8:	93 81       	ldd	r25, Z+3	; 0x03
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	3f ef       	ldi	r19, 0xFF	; 255
    32be:	4f e7       	ldi	r20, 0x7F	; 127
    32c0:	57 e4       	ldi	r21, 0x47	; 71
    32c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32c6:	18 16       	cp	r1, r24
    32c8:	0c f0       	brlt	.+2      	; 0x32cc <main+0xc24>
    32ca:	43 c0       	rjmp	.+134    	; 0x3352 <main+0xcaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32cc:	fe 01       	movw	r30, r28
    32ce:	ef 5a       	subi	r30, 0xAF	; 175
    32d0:	ff 4f       	sbci	r31, 0xFF	; 255
    32d2:	60 81       	ld	r22, Z
    32d4:	71 81       	ldd	r23, Z+1	; 0x01
    32d6:	82 81       	ldd	r24, Z+2	; 0x02
    32d8:	93 81       	ldd	r25, Z+3	; 0x03
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	40 e2       	ldi	r20, 0x20	; 32
    32e0:	51 e4       	ldi	r21, 0x41	; 65
    32e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	8e 01       	movw	r16, r28
    32ec:	05 5b       	subi	r16, 0xB5	; 181
    32ee:	1f 4f       	sbci	r17, 0xFF	; 255
    32f0:	bc 01       	movw	r22, r24
    32f2:	cd 01       	movw	r24, r26
    32f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	f8 01       	movw	r30, r16
    32fe:	91 83       	std	Z+1, r25	; 0x01
    3300:	80 83       	st	Z, r24
    3302:	1f c0       	rjmp	.+62     	; 0x3342 <main+0xc9a>
    3304:	fe 01       	movw	r30, r28
    3306:	e7 5b       	subi	r30, 0xB7	; 183
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	88 ec       	ldi	r24, 0xC8	; 200
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	91 83       	std	Z+1, r25	; 0x01
    3310:	80 83       	st	Z, r24
    3312:	fe 01       	movw	r30, r28
    3314:	e7 5b       	subi	r30, 0xB7	; 183
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	80 81       	ld	r24, Z
    331a:	91 81       	ldd	r25, Z+1	; 0x01
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	f1 f7       	brne	.-4      	; 0x331c <main+0xc74>
    3320:	fe 01       	movw	r30, r28
    3322:	e7 5b       	subi	r30, 0xB7	; 183
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	91 83       	std	Z+1, r25	; 0x01
    3328:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332a:	de 01       	movw	r26, r28
    332c:	a5 5b       	subi	r26, 0xB5	; 181
    332e:	bf 4f       	sbci	r27, 0xFF	; 255
    3330:	fe 01       	movw	r30, r28
    3332:	e5 5b       	subi	r30, 0xB5	; 181
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	80 81       	ld	r24, Z
    3338:	91 81       	ldd	r25, Z+1	; 0x01
    333a:	01 97       	sbiw	r24, 0x01	; 1
    333c:	11 96       	adiw	r26, 0x01	; 1
    333e:	9c 93       	st	X, r25
    3340:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3342:	fe 01       	movw	r30, r28
    3344:	e5 5b       	subi	r30, 0xB5	; 181
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	80 81       	ld	r24, Z
    334a:	91 81       	ldd	r25, Z+1	; 0x01
    334c:	00 97       	sbiw	r24, 0x00	; 0
    334e:	d1 f6       	brne	.-76     	; 0x3304 <main+0xc5c>
    3350:	27 c0       	rjmp	.+78     	; 0x33a0 <main+0xcf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3352:	8e 01       	movw	r16, r28
    3354:	05 5b       	subi	r16, 0xB5	; 181
    3356:	1f 4f       	sbci	r17, 0xFF	; 255
    3358:	fe 01       	movw	r30, r28
    335a:	e3 5b       	subi	r30, 0xB3	; 179
    335c:	ff 4f       	sbci	r31, 0xFF	; 255
    335e:	60 81       	ld	r22, Z
    3360:	71 81       	ldd	r23, Z+1	; 0x01
    3362:	82 81       	ldd	r24, Z+2	; 0x02
    3364:	93 81       	ldd	r25, Z+3	; 0x03
    3366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	f8 01       	movw	r30, r16
    3370:	91 83       	std	Z+1, r25	; 0x01
    3372:	80 83       	st	Z, r24
    3374:	de 01       	movw	r26, r28
    3376:	a9 5b       	subi	r26, 0xB9	; 185
    3378:	bf 4f       	sbci	r27, 0xFF	; 255
    337a:	fe 01       	movw	r30, r28
    337c:	e5 5b       	subi	r30, 0xB5	; 181
    337e:	ff 4f       	sbci	r31, 0xFF	; 255
    3380:	80 81       	ld	r24, Z
    3382:	91 81       	ldd	r25, Z+1	; 0x01
    3384:	8d 93       	st	X+, r24
    3386:	9c 93       	st	X, r25
    3388:	fe 01       	movw	r30, r28
    338a:	e9 5b       	subi	r30, 0xB9	; 185
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	80 81       	ld	r24, Z
    3390:	91 81       	ldd	r25, Z+1	; 0x01
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	f1 f7       	brne	.-4      	; 0x3392 <main+0xcea>
    3396:	fe 01       	movw	r30, r28
    3398:	e9 5b       	subi	r30, 0xB9	; 185
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	91 83       	std	Z+1, r25	; 0x01
    339e:	80 83       	st	Z, r24
				_delay_ms(1000);
				STOP_DC_MOTOR();
    33a0:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
    33a4:	fe c0       	rjmp	.+508    	; 0x35a2 <main+0xefa>
			//Check_Distance_Parallel(); //done parallel parking
			while (DIO_u8GetPinValue(DIO_u8PORTC,0)==0)
			{
				while (DIO_u8GetPinValue(DIO_u8PORTC,0)==0)
    33a6:	fe 01       	movw	r30, r28
    33a8:	ed 5b       	subi	r30, 0xBD	; 189
    33aa:	ff 4f       	sbci	r31, 0xFF	; 255
    33ac:	80 e0       	ldi	r24, 0x00	; 0
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	aa e7       	ldi	r26, 0x7A	; 122
    33b2:	b3 e4       	ldi	r27, 0x43	; 67
    33b4:	80 83       	st	Z, r24
    33b6:	91 83       	std	Z+1, r25	; 0x01
    33b8:	a2 83       	std	Z+2, r26	; 0x02
    33ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33bc:	8e 01       	movw	r16, r28
    33be:	01 5c       	subi	r16, 0xC1	; 193
    33c0:	1f 4f       	sbci	r17, 0xFF	; 255
    33c2:	fe 01       	movw	r30, r28
    33c4:	ed 5b       	subi	r30, 0xBD	; 189
    33c6:	ff 4f       	sbci	r31, 0xFF	; 255
    33c8:	60 81       	ld	r22, Z
    33ca:	71 81       	ldd	r23, Z+1	; 0x01
    33cc:	82 81       	ldd	r24, Z+2	; 0x02
    33ce:	93 81       	ldd	r25, Z+3	; 0x03
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	4a ef       	ldi	r20, 0xFA	; 250
    33d6:	54 e4       	ldi	r21, 0x44	; 68
    33d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	f8 01       	movw	r30, r16
    33e2:	80 83       	st	Z, r24
    33e4:	91 83       	std	Z+1, r25	; 0x01
    33e6:	a2 83       	std	Z+2, r26	; 0x02
    33e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33ea:	fe 01       	movw	r30, r28
    33ec:	ff 96       	adiw	r30, 0x3f	; 63
    33ee:	60 81       	ld	r22, Z
    33f0:	71 81       	ldd	r23, Z+1	; 0x01
    33f2:	82 81       	ldd	r24, Z+2	; 0x02
    33f4:	93 81       	ldd	r25, Z+3	; 0x03
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	40 e8       	ldi	r20, 0x80	; 128
    33fc:	5f e3       	ldi	r21, 0x3F	; 63
    33fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3402:	88 23       	and	r24, r24
    3404:	2c f4       	brge	.+10     	; 0x3410 <main+0xd68>
		__ticks = 1;
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	9e af       	std	Y+62, r25	; 0x3e
    340c:	8d af       	std	Y+61, r24	; 0x3d
    340e:	46 c0       	rjmp	.+140    	; 0x349c <main+0xdf4>
	else if (__tmp > 65535)
    3410:	fe 01       	movw	r30, r28
    3412:	ff 96       	adiw	r30, 0x3f	; 63
    3414:	60 81       	ld	r22, Z
    3416:	71 81       	ldd	r23, Z+1	; 0x01
    3418:	82 81       	ldd	r24, Z+2	; 0x02
    341a:	93 81       	ldd	r25, Z+3	; 0x03
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	3f ef       	ldi	r19, 0xFF	; 255
    3420:	4f e7       	ldi	r20, 0x7F	; 127
    3422:	57 e4       	ldi	r21, 0x47	; 71
    3424:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3428:	18 16       	cp	r1, r24
    342a:	64 f5       	brge	.+88     	; 0x3484 <main+0xddc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342c:	fe 01       	movw	r30, r28
    342e:	ed 5b       	subi	r30, 0xBD	; 189
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	60 81       	ld	r22, Z
    3434:	71 81       	ldd	r23, Z+1	; 0x01
    3436:	82 81       	ldd	r24, Z+2	; 0x02
    3438:	93 81       	ldd	r25, Z+3	; 0x03
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	40 e2       	ldi	r20, 0x20	; 32
    3440:	51 e4       	ldi	r21, 0x41	; 65
    3442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	bc 01       	movw	r22, r24
    344c:	cd 01       	movw	r24, r26
    344e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	9e af       	std	Y+62, r25	; 0x3e
    3458:	8d af       	std	Y+61, r24	; 0x3d
    345a:	0f c0       	rjmp	.+30     	; 0x347a <main+0xdd2>
    345c:	88 ec       	ldi	r24, 0xC8	; 200
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	9c af       	std	Y+60, r25	; 0x3c
    3462:	8b af       	std	Y+59, r24	; 0x3b
    3464:	8b ad       	ldd	r24, Y+59	; 0x3b
    3466:	9c ad       	ldd	r25, Y+60	; 0x3c
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	f1 f7       	brne	.-4      	; 0x3468 <main+0xdc0>
    346c:	9c af       	std	Y+60, r25	; 0x3c
    346e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3470:	8d ad       	ldd	r24, Y+61	; 0x3d
    3472:	9e ad       	ldd	r25, Y+62	; 0x3e
    3474:	01 97       	sbiw	r24, 0x01	; 1
    3476:	9e af       	std	Y+62, r25	; 0x3e
    3478:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    347a:	8d ad       	ldd	r24, Y+61	; 0x3d
    347c:	9e ad       	ldd	r25, Y+62	; 0x3e
    347e:	00 97       	sbiw	r24, 0x00	; 0
    3480:	69 f7       	brne	.-38     	; 0x345c <main+0xdb4>
    3482:	16 c0       	rjmp	.+44     	; 0x34b0 <main+0xe08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3484:	fe 01       	movw	r30, r28
    3486:	ff 96       	adiw	r30, 0x3f	; 63
    3488:	60 81       	ld	r22, Z
    348a:	71 81       	ldd	r23, Z+1	; 0x01
    348c:	82 81       	ldd	r24, Z+2	; 0x02
    348e:	93 81       	ldd	r25, Z+3	; 0x03
    3490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	9e af       	std	Y+62, r25	; 0x3e
    349a:	8d af       	std	Y+61, r24	; 0x3d
    349c:	8d ad       	ldd	r24, Y+61	; 0x3d
    349e:	9e ad       	ldd	r25, Y+62	; 0x3e
    34a0:	9a af       	std	Y+58, r25	; 0x3a
    34a2:	89 af       	std	Y+57, r24	; 0x39
    34a4:	89 ad       	ldd	r24, Y+57	; 0x39
    34a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	f1 f7       	brne	.-4      	; 0x34a8 <main+0xe00>
    34ac:	9a af       	std	Y+58, r25	; 0x3a
    34ae:	89 af       	std	Y+57, r24	; 0x39
    34b0:	83 e0       	ldi	r24, 0x03	; 3
    34b2:	60 e0       	ldi	r22, 0x00	; 0
    34b4:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8GetPinValue>
    34b8:	88 23       	and	r24, r24
    34ba:	09 f4       	brne	.+2      	; 0x34be <main+0xe16>
    34bc:	74 cf       	rjmp	.-280    	; 0x33a6 <main+0xcfe>
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	aa e7       	ldi	r26, 0x7A	; 122
    34c4:	b4 e4       	ldi	r27, 0x44	; 68
    34c6:	8d ab       	std	Y+53, r24	; 0x35
    34c8:	9e ab       	std	Y+54, r25	; 0x36
    34ca:	af ab       	std	Y+55, r26	; 0x37
    34cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ce:	6d a9       	ldd	r22, Y+53	; 0x35
    34d0:	7e a9       	ldd	r23, Y+54	; 0x36
    34d2:	8f a9       	ldd	r24, Y+55	; 0x37
    34d4:	98 ad       	ldd	r25, Y+56	; 0x38
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	4a ef       	ldi	r20, 0xFA	; 250
    34dc:	54 e4       	ldi	r21, 0x44	; 68
    34de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	89 ab       	std	Y+49, r24	; 0x31
    34e8:	9a ab       	std	Y+50, r25	; 0x32
    34ea:	ab ab       	std	Y+51, r26	; 0x33
    34ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34ee:	69 a9       	ldd	r22, Y+49	; 0x31
    34f0:	7a a9       	ldd	r23, Y+50	; 0x32
    34f2:	8b a9       	ldd	r24, Y+51	; 0x33
    34f4:	9c a9       	ldd	r25, Y+52	; 0x34
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e8       	ldi	r20, 0x80	; 128
    34fc:	5f e3       	ldi	r21, 0x3F	; 63
    34fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3502:	88 23       	and	r24, r24
    3504:	2c f4       	brge	.+10     	; 0x3510 <main+0xe68>
		__ticks = 1;
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	98 ab       	std	Y+48, r25	; 0x30
    350c:	8f a7       	std	Y+47, r24	; 0x2f
    350e:	3f c0       	rjmp	.+126    	; 0x358e <main+0xee6>
	else if (__tmp > 65535)
    3510:	69 a9       	ldd	r22, Y+49	; 0x31
    3512:	7a a9       	ldd	r23, Y+50	; 0x32
    3514:	8b a9       	ldd	r24, Y+51	; 0x33
    3516:	9c a9       	ldd	r25, Y+52	; 0x34
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	3f ef       	ldi	r19, 0xFF	; 255
    351c:	4f e7       	ldi	r20, 0x7F	; 127
    351e:	57 e4       	ldi	r21, 0x47	; 71
    3520:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3524:	18 16       	cp	r1, r24
    3526:	4c f5       	brge	.+82     	; 0x357a <main+0xed2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3528:	6d a9       	ldd	r22, Y+53	; 0x35
    352a:	7e a9       	ldd	r23, Y+54	; 0x36
    352c:	8f a9       	ldd	r24, Y+55	; 0x37
    352e:	98 ad       	ldd	r25, Y+56	; 0x38
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 e2       	ldi	r20, 0x20	; 32
    3536:	51 e4       	ldi	r21, 0x41	; 65
    3538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	bc 01       	movw	r22, r24
    3542:	cd 01       	movw	r24, r26
    3544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	98 ab       	std	Y+48, r25	; 0x30
    354e:	8f a7       	std	Y+47, r24	; 0x2f
    3550:	0f c0       	rjmp	.+30     	; 0x3570 <main+0xec8>
    3552:	88 ec       	ldi	r24, 0xC8	; 200
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	9e a7       	std	Y+46, r25	; 0x2e
    3558:	8d a7       	std	Y+45, r24	; 0x2d
    355a:	8d a5       	ldd	r24, Y+45	; 0x2d
    355c:	9e a5       	ldd	r25, Y+46	; 0x2e
    355e:	01 97       	sbiw	r24, 0x01	; 1
    3560:	f1 f7       	brne	.-4      	; 0x355e <main+0xeb6>
    3562:	9e a7       	std	Y+46, r25	; 0x2e
    3564:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3566:	8f a5       	ldd	r24, Y+47	; 0x2f
    3568:	98 a9       	ldd	r25, Y+48	; 0x30
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	98 ab       	std	Y+48, r25	; 0x30
    356e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3570:	8f a5       	ldd	r24, Y+47	; 0x2f
    3572:	98 a9       	ldd	r25, Y+48	; 0x30
    3574:	00 97       	sbiw	r24, 0x00	; 0
    3576:	69 f7       	brne	.-38     	; 0x3552 <main+0xeaa>
    3578:	14 c0       	rjmp	.+40     	; 0x35a2 <main+0xefa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    357a:	69 a9       	ldd	r22, Y+49	; 0x31
    357c:	7a a9       	ldd	r23, Y+50	; 0x32
    357e:	8b a9       	ldd	r24, Y+51	; 0x33
    3580:	9c a9       	ldd	r25, Y+52	; 0x34
    3582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	98 ab       	std	Y+48, r25	; 0x30
    358c:	8f a7       	std	Y+47, r24	; 0x2f
    358e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3590:	98 a9       	ldd	r25, Y+48	; 0x30
    3592:	9c a7       	std	Y+44, r25	; 0x2c
    3594:	8b a7       	std	Y+43, r24	; 0x2b
    3596:	8b a5       	ldd	r24, Y+43	; 0x2b
    3598:	9c a5       	ldd	r25, Y+44	; 0x2c
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	f1 f7       	brne	.-4      	; 0x359a <main+0xef2>
    359e:	9c a7       	std	Y+44, r25	; 0x2c
    35a0:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(2000);
				MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_CHECK);
				_delay_ms(1000);
				STOP_DC_MOTOR();
			//Check_Distance_Parallel(); //done parallel parking
			while (DIO_u8GetPinValue(DIO_u8PORTC,0)==0)
    35a2:	83 e0       	ldi	r24, 0x03	; 3
    35a4:	60 e0       	ldi	r22, 0x00	; 0
    35a6:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8GetPinValue>
    35aa:	88 23       	and	r24, r24
    35ac:	09 f4       	brne	.+2      	; 0x35b0 <main+0xf08>
    35ae:	80 cf       	rjmp	.-256    	; 0x34b0 <main+0xe08>
    35b0:	62 cb       	rjmp	.-2364   	; 0x2c76 <main+0x5ce>
				}
				_delay_ms(1000);
			}
					}
		}
		else if(DIO_u8GetPinValue(DIO_u8PORTC,1)==0)
    35b2:	83 e0       	ldi	r24, 0x03	; 3
    35b4:	61 e0       	ldi	r22, 0x01	; 1
    35b6:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8GetPinValue>
    35ba:	88 23       	and	r24, r24
    35bc:	09 f0       	breq	.+2      	; 0x35c0 <main+0xf18>
    35be:	5b cb       	rjmp	.-2378   	; 0x2c76 <main+0x5ce>
    35c0:	80 e0       	ldi	r24, 0x00	; 0
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	aa ef       	ldi	r26, 0xFA	; 250
    35c6:	b3 e4       	ldi	r27, 0x43	; 67
    35c8:	8f a3       	std	Y+39, r24	; 0x27
    35ca:	98 a7       	std	Y+40, r25	; 0x28
    35cc:	a9 a7       	std	Y+41, r26	; 0x29
    35ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d0:	6f a1       	ldd	r22, Y+39	; 0x27
    35d2:	78 a5       	ldd	r23, Y+40	; 0x28
    35d4:	89 a5       	ldd	r24, Y+41	; 0x29
    35d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	4a ef       	ldi	r20, 0xFA	; 250
    35de:	54 e4       	ldi	r21, 0x44	; 68
    35e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	8b a3       	std	Y+35, r24	; 0x23
    35ea:	9c a3       	std	Y+36, r25	; 0x24
    35ec:	ad a3       	std	Y+37, r26	; 0x25
    35ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35f0:	6b a1       	ldd	r22, Y+35	; 0x23
    35f2:	7c a1       	ldd	r23, Y+36	; 0x24
    35f4:	8d a1       	ldd	r24, Y+37	; 0x25
    35f6:	9e a1       	ldd	r25, Y+38	; 0x26
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e8       	ldi	r20, 0x80	; 128
    35fe:	5f e3       	ldi	r21, 0x3F	; 63
    3600:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3604:	88 23       	and	r24, r24
    3606:	2c f4       	brge	.+10     	; 0x3612 <main+0xf6a>
		__ticks = 1;
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	9a a3       	std	Y+34, r25	; 0x22
    360e:	89 a3       	std	Y+33, r24	; 0x21
    3610:	3f c0       	rjmp	.+126    	; 0x3690 <main+0xfe8>
	else if (__tmp > 65535)
    3612:	6b a1       	ldd	r22, Y+35	; 0x23
    3614:	7c a1       	ldd	r23, Y+36	; 0x24
    3616:	8d a1       	ldd	r24, Y+37	; 0x25
    3618:	9e a1       	ldd	r25, Y+38	; 0x26
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	3f ef       	ldi	r19, 0xFF	; 255
    361e:	4f e7       	ldi	r20, 0x7F	; 127
    3620:	57 e4       	ldi	r21, 0x47	; 71
    3622:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3626:	18 16       	cp	r1, r24
    3628:	4c f5       	brge	.+82     	; 0x367c <main+0xfd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    362a:	6f a1       	ldd	r22, Y+39	; 0x27
    362c:	78 a5       	ldd	r23, Y+40	; 0x28
    362e:	89 a5       	ldd	r24, Y+41	; 0x29
    3630:	9a a5       	ldd	r25, Y+42	; 0x2a
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	40 e2       	ldi	r20, 0x20	; 32
    3638:	51 e4       	ldi	r21, 0x41	; 65
    363a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363e:	dc 01       	movw	r26, r24
    3640:	cb 01       	movw	r24, r22
    3642:	bc 01       	movw	r22, r24
    3644:	cd 01       	movw	r24, r26
    3646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	9a a3       	std	Y+34, r25	; 0x22
    3650:	89 a3       	std	Y+33, r24	; 0x21
    3652:	0f c0       	rjmp	.+30     	; 0x3672 <main+0xfca>
    3654:	88 ec       	ldi	r24, 0xC8	; 200
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	98 a3       	std	Y+32, r25	; 0x20
    365a:	8f 8f       	std	Y+31, r24	; 0x1f
    365c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    365e:	98 a1       	ldd	r25, Y+32	; 0x20
    3660:	01 97       	sbiw	r24, 0x01	; 1
    3662:	f1 f7       	brne	.-4      	; 0x3660 <main+0xfb8>
    3664:	98 a3       	std	Y+32, r25	; 0x20
    3666:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3668:	89 a1       	ldd	r24, Y+33	; 0x21
    366a:	9a a1       	ldd	r25, Y+34	; 0x22
    366c:	01 97       	sbiw	r24, 0x01	; 1
    366e:	9a a3       	std	Y+34, r25	; 0x22
    3670:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3672:	89 a1       	ldd	r24, Y+33	; 0x21
    3674:	9a a1       	ldd	r25, Y+34	; 0x22
    3676:	00 97       	sbiw	r24, 0x00	; 0
    3678:	69 f7       	brne	.-38     	; 0x3654 <main+0xfac>
    367a:	14 c0       	rjmp	.+40     	; 0x36a4 <main+0xffc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    367c:	6b a1       	ldd	r22, Y+35	; 0x23
    367e:	7c a1       	ldd	r23, Y+36	; 0x24
    3680:	8d a1       	ldd	r24, Y+37	; 0x25
    3682:	9e a1       	ldd	r25, Y+38	; 0x26
    3684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	9a a3       	std	Y+34, r25	; 0x22
    368e:	89 a3       	std	Y+33, r24	; 0x21
    3690:	89 a1       	ldd	r24, Y+33	; 0x21
    3692:	9a a1       	ldd	r25, Y+34	; 0x22
    3694:	9e 8f       	std	Y+30, r25	; 0x1e
    3696:	8d 8f       	std	Y+29, r24	; 0x1d
    3698:	8d 8d       	ldd	r24, Y+29	; 0x1d
    369a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    369c:	01 97       	sbiw	r24, 0x01	; 1
    369e:	f1 f7       	brne	.-4      	; 0x369c <main+0xff4>
    36a0:	9e 8f       	std	Y+30, r25	; 0x1e
    36a2:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(500);
			if(DIO_u8GetPinValue(DIO_u8PORTC,1)==0)
    36a4:	83 e0       	ldi	r24, 0x03	; 3
    36a6:	61 e0       	ldi	r22, 0x01	; 1
    36a8:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8GetPinValue>
    36ac:	88 23       	and	r24, r24
    36ae:	09 f0       	breq	.+2      	; 0x36b2 <main+0x100a>
    36b0:	e2 ca       	rjmp	.-2620   	; 0x2c76 <main+0x5ce>
					{
		   Check_Distance_exiting();//check and choose exiting function done
    36b2:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <Check_Distance_exiting>
    36b6:	eb c0       	rjmp	.+470    	; 0x388e <main+0x11e6>
			while (DIO_u8GetPinValue(DIO_u8PORTC,1)==0)
			{
				while (DIO_u8GetPinValue(DIO_u8PORTC,1)==0)
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	aa e7       	ldi	r26, 0x7A	; 122
    36be:	b3 e4       	ldi	r27, 0x43	; 67
    36c0:	89 8f       	std	Y+25, r24	; 0x19
    36c2:	9a 8f       	std	Y+26, r25	; 0x1a
    36c4:	ab 8f       	std	Y+27, r26	; 0x1b
    36c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c8:	69 8d       	ldd	r22, Y+25	; 0x19
    36ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36d0:	20 e0       	ldi	r18, 0x00	; 0
    36d2:	30 e0       	ldi	r19, 0x00	; 0
    36d4:	4a ef       	ldi	r20, 0xFA	; 250
    36d6:	54 e4       	ldi	r21, 0x44	; 68
    36d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36dc:	dc 01       	movw	r26, r24
    36de:	cb 01       	movw	r24, r22
    36e0:	8d 8b       	std	Y+21, r24	; 0x15
    36e2:	9e 8b       	std	Y+22, r25	; 0x16
    36e4:	af 8b       	std	Y+23, r26	; 0x17
    36e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36e8:	6d 89       	ldd	r22, Y+21	; 0x15
    36ea:	7e 89       	ldd	r23, Y+22	; 0x16
    36ec:	8f 89       	ldd	r24, Y+23	; 0x17
    36ee:	98 8d       	ldd	r25, Y+24	; 0x18
    36f0:	20 e0       	ldi	r18, 0x00	; 0
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	40 e8       	ldi	r20, 0x80	; 128
    36f6:	5f e3       	ldi	r21, 0x3F	; 63
    36f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36fc:	88 23       	and	r24, r24
    36fe:	2c f4       	brge	.+10     	; 0x370a <main+0x1062>
		__ticks = 1;
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	9c 8b       	std	Y+20, r25	; 0x14
    3706:	8b 8b       	std	Y+19, r24	; 0x13
    3708:	3f c0       	rjmp	.+126    	; 0x3788 <main+0x10e0>
	else if (__tmp > 65535)
    370a:	6d 89       	ldd	r22, Y+21	; 0x15
    370c:	7e 89       	ldd	r23, Y+22	; 0x16
    370e:	8f 89       	ldd	r24, Y+23	; 0x17
    3710:	98 8d       	ldd	r25, Y+24	; 0x18
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	3f ef       	ldi	r19, 0xFF	; 255
    3716:	4f e7       	ldi	r20, 0x7F	; 127
    3718:	57 e4       	ldi	r21, 0x47	; 71
    371a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    371e:	18 16       	cp	r1, r24
    3720:	4c f5       	brge	.+82     	; 0x3774 <main+0x10cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3722:	69 8d       	ldd	r22, Y+25	; 0x19
    3724:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3726:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3728:	9c 8d       	ldd	r25, Y+28	; 0x1c
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	40 e2       	ldi	r20, 0x20	; 32
    3730:	51 e4       	ldi	r21, 0x41	; 65
    3732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3736:	dc 01       	movw	r26, r24
    3738:	cb 01       	movw	r24, r22
    373a:	bc 01       	movw	r22, r24
    373c:	cd 01       	movw	r24, r26
    373e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	9c 8b       	std	Y+20, r25	; 0x14
    3748:	8b 8b       	std	Y+19, r24	; 0x13
    374a:	0f c0       	rjmp	.+30     	; 0x376a <main+0x10c2>
    374c:	88 ec       	ldi	r24, 0xC8	; 200
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	9a 8b       	std	Y+18, r25	; 0x12
    3752:	89 8b       	std	Y+17, r24	; 0x11
    3754:	89 89       	ldd	r24, Y+17	; 0x11
    3756:	9a 89       	ldd	r25, Y+18	; 0x12
    3758:	01 97       	sbiw	r24, 0x01	; 1
    375a:	f1 f7       	brne	.-4      	; 0x3758 <main+0x10b0>
    375c:	9a 8b       	std	Y+18, r25	; 0x12
    375e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3760:	8b 89       	ldd	r24, Y+19	; 0x13
    3762:	9c 89       	ldd	r25, Y+20	; 0x14
    3764:	01 97       	sbiw	r24, 0x01	; 1
    3766:	9c 8b       	std	Y+20, r25	; 0x14
    3768:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    376a:	8b 89       	ldd	r24, Y+19	; 0x13
    376c:	9c 89       	ldd	r25, Y+20	; 0x14
    376e:	00 97       	sbiw	r24, 0x00	; 0
    3770:	69 f7       	brne	.-38     	; 0x374c <main+0x10a4>
    3772:	14 c0       	rjmp	.+40     	; 0x379c <main+0x10f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3774:	6d 89       	ldd	r22, Y+21	; 0x15
    3776:	7e 89       	ldd	r23, Y+22	; 0x16
    3778:	8f 89       	ldd	r24, Y+23	; 0x17
    377a:	98 8d       	ldd	r25, Y+24	; 0x18
    377c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	9c 8b       	std	Y+20, r25	; 0x14
    3786:	8b 8b       	std	Y+19, r24	; 0x13
    3788:	8b 89       	ldd	r24, Y+19	; 0x13
    378a:	9c 89       	ldd	r25, Y+20	; 0x14
    378c:	98 8b       	std	Y+16, r25	; 0x10
    378e:	8f 87       	std	Y+15, r24	; 0x0f
    3790:	8f 85       	ldd	r24, Y+15	; 0x0f
    3792:	98 89       	ldd	r25, Y+16	; 0x10
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	f1 f7       	brne	.-4      	; 0x3794 <main+0x10ec>
    3798:	98 8b       	std	Y+16, r25	; 0x10
    379a:	8f 87       	std	Y+15, r24	; 0x0f
    379c:	83 e0       	ldi	r24, 0x03	; 3
    379e:	61 e0       	ldi	r22, 0x01	; 1
    37a0:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8GetPinValue>
    37a4:	88 23       	and	r24, r24
    37a6:	09 f4       	brne	.+2      	; 0x37aa <main+0x1102>
    37a8:	87 cf       	rjmp	.-242    	; 0x36b8 <main+0x1010>
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	aa e7       	ldi	r26, 0x7A	; 122
    37b0:	b4 e4       	ldi	r27, 0x44	; 68
    37b2:	8b 87       	std	Y+11, r24	; 0x0b
    37b4:	9c 87       	std	Y+12, r25	; 0x0c
    37b6:	ad 87       	std	Y+13, r26	; 0x0d
    37b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    37bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    37be:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	4a ef       	ldi	r20, 0xFA	; 250
    37c8:	54 e4       	ldi	r21, 0x44	; 68
    37ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	8f 83       	std	Y+7, r24	; 0x07
    37d4:	98 87       	std	Y+8, r25	; 0x08
    37d6:	a9 87       	std	Y+9, r26	; 0x09
    37d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37da:	6f 81       	ldd	r22, Y+7	; 0x07
    37dc:	78 85       	ldd	r23, Y+8	; 0x08
    37de:	89 85       	ldd	r24, Y+9	; 0x09
    37e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	40 e8       	ldi	r20, 0x80	; 128
    37e8:	5f e3       	ldi	r21, 0x3F	; 63
    37ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ee:	88 23       	and	r24, r24
    37f0:	2c f4       	brge	.+10     	; 0x37fc <main+0x1154>
		__ticks = 1;
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	9e 83       	std	Y+6, r25	; 0x06
    37f8:	8d 83       	std	Y+5, r24	; 0x05
    37fa:	3f c0       	rjmp	.+126    	; 0x387a <main+0x11d2>
	else if (__tmp > 65535)
    37fc:	6f 81       	ldd	r22, Y+7	; 0x07
    37fe:	78 85       	ldd	r23, Y+8	; 0x08
    3800:	89 85       	ldd	r24, Y+9	; 0x09
    3802:	9a 85       	ldd	r25, Y+10	; 0x0a
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	3f ef       	ldi	r19, 0xFF	; 255
    3808:	4f e7       	ldi	r20, 0x7F	; 127
    380a:	57 e4       	ldi	r21, 0x47	; 71
    380c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3810:	18 16       	cp	r1, r24
    3812:	4c f5       	brge	.+82     	; 0x3866 <main+0x11be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3814:	6b 85       	ldd	r22, Y+11	; 0x0b
    3816:	7c 85       	ldd	r23, Y+12	; 0x0c
    3818:	8d 85       	ldd	r24, Y+13	; 0x0d
    381a:	9e 85       	ldd	r25, Y+14	; 0x0e
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	40 e2       	ldi	r20, 0x20	; 32
    3822:	51 e4       	ldi	r21, 0x41	; 65
    3824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	bc 01       	movw	r22, r24
    382e:	cd 01       	movw	r24, r26
    3830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	9e 83       	std	Y+6, r25	; 0x06
    383a:	8d 83       	std	Y+5, r24	; 0x05
    383c:	0f c0       	rjmp	.+30     	; 0x385c <main+0x11b4>
    383e:	88 ec       	ldi	r24, 0xC8	; 200
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	9c 83       	std	Y+4, r25	; 0x04
    3844:	8b 83       	std	Y+3, r24	; 0x03
    3846:	8b 81       	ldd	r24, Y+3	; 0x03
    3848:	9c 81       	ldd	r25, Y+4	; 0x04
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	f1 f7       	brne	.-4      	; 0x384a <main+0x11a2>
    384e:	9c 83       	std	Y+4, r25	; 0x04
    3850:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3852:	8d 81       	ldd	r24, Y+5	; 0x05
    3854:	9e 81       	ldd	r25, Y+6	; 0x06
    3856:	01 97       	sbiw	r24, 0x01	; 1
    3858:	9e 83       	std	Y+6, r25	; 0x06
    385a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    385c:	8d 81       	ldd	r24, Y+5	; 0x05
    385e:	9e 81       	ldd	r25, Y+6	; 0x06
    3860:	00 97       	sbiw	r24, 0x00	; 0
    3862:	69 f7       	brne	.-38     	; 0x383e <main+0x1196>
    3864:	14 c0       	rjmp	.+40     	; 0x388e <main+0x11e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3866:	6f 81       	ldd	r22, Y+7	; 0x07
    3868:	78 85       	ldd	r23, Y+8	; 0x08
    386a:	89 85       	ldd	r24, Y+9	; 0x09
    386c:	9a 85       	ldd	r25, Y+10	; 0x0a
    386e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	9e 83       	std	Y+6, r25	; 0x06
    3878:	8d 83       	std	Y+5, r24	; 0x05
    387a:	8d 81       	ldd	r24, Y+5	; 0x05
    387c:	9e 81       	ldd	r25, Y+6	; 0x06
    387e:	9a 83       	std	Y+2, r25	; 0x02
    3880:	89 83       	std	Y+1, r24	; 0x01
    3882:	89 81       	ldd	r24, Y+1	; 0x01
    3884:	9a 81       	ldd	r25, Y+2	; 0x02
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	f1 f7       	brne	.-4      	; 0x3886 <main+0x11de>
    388a:	9a 83       	std	Y+2, r25	; 0x02
    388c:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(500);
			if(DIO_u8GetPinValue(DIO_u8PORTC,1)==0)
					{
		   Check_Distance_exiting();//check and choose exiting function done
			while (DIO_u8GetPinValue(DIO_u8PORTC,1)==0)
    388e:	83 e0       	ldi	r24, 0x03	; 3
    3890:	61 e0       	ldi	r22, 0x01	; 1
    3892:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8GetPinValue>
    3896:	88 23       	and	r24, r24
    3898:	09 f4       	brne	.+2      	; 0x389c <main+0x11f4>
    389a:	80 cf       	rjmp	.-256    	; 0x379c <main+0x10f4>
    389c:	ec c9       	rjmp	.-3112   	; 0x2c76 <main+0x5ce>

0000389e <Display_Distance>:
	return 0;

}

void Display_Distance(void)
{
    389e:	df 93       	push	r29
    38a0:	cf 93       	push	r28
    38a2:	cd b7       	in	r28, 0x3d	; 61
    38a4:	de b7       	in	r29, 0x3e	; 62
	/*this code bellow should put into a function called Display distance and call this function here*/


	Ultrasonic_init();
    38a6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <Ultrasonic_init>
	Ultra_Front_Dis1=Ultrasonic_readDistance();
    38aa:	0e 94 32 11 	call	0x2264	; 0x2264 <Ultrasonic_readDistance>
    38ae:	90 93 9d 01 	sts	0x019D, r25
    38b2:	80 93 9c 01 	sts	0x019C, r24

	/*LCD_moveCursor(0, 0);
	LCD_intgerToString(Ultra_Front_Dis1);
	LCD_displayString(" ");
	 */
	Ultrasonic2_init();
    38b6:	0e 94 67 0e 	call	0x1cce	; 0x1cce <Ultrasonic2_init>
	Ultra_Back_Dis2=Ultrasonic2_readDistance();
    38ba:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <Ultrasonic2_readDistance>
    38be:	90 93 c4 01 	sts	0x01C4, r25
    38c2:	80 93 c3 01 	sts	0x01C3, r24
	LCD_moveCursor(1, 0);
	LCD_intgerToString(Ultra_Back_Dis2);
	LCD_displayString(" ");
	 */

	Ultrasonic3_init();
    38c6:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <Ultrasonic3_init>
	Ultra_Right_Dis3=Ultrasonic3_readDistance();
    38ca:	0e 94 9e 12 	call	0x253c	; 0x253c <Ultrasonic3_readDistance>
    38ce:	90 93 be 01 	sts	0x01BE, r25
    38d2:	80 93 bd 01 	sts	0x01BD, r24
	LCD_displayString(" ");
	 */


	//the end of function above
}
    38d6:	cf 91       	pop	r28
    38d8:	df 91       	pop	r29
    38da:	08 95       	ret

000038dc <Display_Distance_exit>:
void Display_Distance_exit(void)
{
    38dc:	df 93       	push	r29
    38de:	cf 93       	push	r28
    38e0:	cd b7       	in	r28, 0x3d	; 61
    38e2:	de b7       	in	r29, 0x3e	; 62
	Ultrasonic_init();
    38e4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <Ultrasonic_init>
	Ultra_Front_Dis1=Ultrasonic_readDistance();
    38e8:	0e 94 32 11 	call	0x2264	; 0x2264 <Ultrasonic_readDistance>
    38ec:	90 93 9d 01 	sts	0x019D, r25
    38f0:	80 93 9c 01 	sts	0x019C, r24

	//Ultrasonic2_init();
	//Ultra_Back_Dis2=Ultrasonic2_readDistance();

	Ultrasonic3_init();
    38f4:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <Ultrasonic3_init>
	Ultra_Right_Dis3=Ultrasonic3_readDistance();
    38f8:	0e 94 9e 12 	call	0x253c	; 0x253c <Ultrasonic3_readDistance>
    38fc:	90 93 be 01 	sts	0x01BE, r25
    3900:	80 93 bd 01 	sts	0x01BD, r24
}
    3904:	cf 91       	pop	r28
    3906:	df 91       	pop	r29
    3908:	08 95       	ret

0000390a <Check_Distance_Parallel>:




void Check_Distance_Parallel(void)
{
    390a:	0f 93       	push	r16
    390c:	1f 93       	push	r17
    390e:	df 93       	push	r29
    3910:	cf 93       	push	r28
    3912:	cd b7       	in	r28, 0x3d	; 61
    3914:	de b7       	in	r29, 0x3e	; 62
    3916:	c4 5c       	subi	r28, 0xC4	; 196
    3918:	d0 40       	sbci	r29, 0x00	; 0
    391a:	0f b6       	in	r0, 0x3f	; 63
    391c:	f8 94       	cli
    391e:	de bf       	out	0x3e, r29	; 62
    3920:	0f be       	out	0x3f, r0	; 63
    3922:	cd bf       	out	0x3d, r28	; 61

	//this code below is check fuction
	//moving my car with detecting
	count=0;
    3924:	10 92 b4 01 	sts	0x01B4, r1
	result_of_distance=0;
    3928:	10 92 89 01 	sts	0x0189, r1
    392c:	10 92 88 01 	sts	0x0188, r1
	MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
    3930:	86 e9       	ldi	r24, 0x96	; 150
    3932:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <MOVE_FORWARD>
    3936:	9e c1       	rjmp	.+828    	; 0x3c74 <Check_Distance_Parallel+0x36a>
	while(count<7)
	{
		//MOVE_FORWARD(SPEED_OF_MOTOR);
		Display_Distance();
    3938:	0e 94 4f 1c 	call	0x389e	; 0x389e <Display_Distance>
		MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
    393c:	86 e9       	ldi	r24, 0x96	; 150
    393e:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <MOVE_FORWARD>
		//check if sensors detected an empty space

		if (Ultra_Right_Dis3>Distance_Away)
    3942:	20 91 bd 01 	lds	r18, 0x01BD
    3946:	30 91 be 01 	lds	r19, 0x01BE
    394a:	80 91 94 01 	lds	r24, 0x0194
    394e:	90 91 95 01 	lds	r25, 0x0195
    3952:	82 17       	cp	r24, r18
    3954:	93 07       	cpc	r25, r19
    3956:	08 f0       	brcs	.+2      	; 0x395a <Check_Distance_Parallel+0x50>
    3958:	87 c1       	rjmp	.+782    	; 0x3c68 <Check_Distance_Parallel+0x35e>
		{
			//if(count==3)
			//{
			STOP_DC_MOTOR();
    395a:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
    395e:	fe 01       	movw	r30, r28
    3960:	ef 53       	subi	r30, 0x3F	; 63
    3962:	ff 4f       	sbci	r31, 0xFF	; 255
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	aa e7       	ldi	r26, 0x7A	; 122
    396a:	b4 e4       	ldi	r27, 0x44	; 68
    396c:	80 83       	st	Z, r24
    396e:	91 83       	std	Z+1, r25	; 0x01
    3970:	a2 83       	std	Z+2, r26	; 0x02
    3972:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3974:	8e 01       	movw	r16, r28
    3976:	03 54       	subi	r16, 0x43	; 67
    3978:	1f 4f       	sbci	r17, 0xFF	; 255
    397a:	fe 01       	movw	r30, r28
    397c:	ef 53       	subi	r30, 0x3F	; 63
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	60 81       	ld	r22, Z
    3982:	71 81       	ldd	r23, Z+1	; 0x01
    3984:	82 81       	ldd	r24, Z+2	; 0x02
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	4a ef       	ldi	r20, 0xFA	; 250
    398e:	54 e4       	ldi	r21, 0x44	; 68
    3990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	f8 01       	movw	r30, r16
    399a:	80 83       	st	Z, r24
    399c:	91 83       	std	Z+1, r25	; 0x01
    399e:	a2 83       	std	Z+2, r26	; 0x02
    39a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39a2:	fe 01       	movw	r30, r28
    39a4:	e3 54       	subi	r30, 0x43	; 67
    39a6:	ff 4f       	sbci	r31, 0xFF	; 255
    39a8:	60 81       	ld	r22, Z
    39aa:	71 81       	ldd	r23, Z+1	; 0x01
    39ac:	82 81       	ldd	r24, Z+2	; 0x02
    39ae:	93 81       	ldd	r25, Z+3	; 0x03
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	40 e8       	ldi	r20, 0x80	; 128
    39b6:	5f e3       	ldi	r21, 0x3F	; 63
    39b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39bc:	88 23       	and	r24, r24
    39be:	44 f4       	brge	.+16     	; 0x39d0 <Check_Distance_Parallel+0xc6>
		__ticks = 1;
    39c0:	fe 01       	movw	r30, r28
    39c2:	e5 54       	subi	r30, 0x45	; 69
    39c4:	ff 4f       	sbci	r31, 0xFF	; 255
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	91 83       	std	Z+1, r25	; 0x01
    39cc:	80 83       	st	Z, r24
    39ce:	64 c0       	rjmp	.+200    	; 0x3a98 <Check_Distance_Parallel+0x18e>
	else if (__tmp > 65535)
    39d0:	fe 01       	movw	r30, r28
    39d2:	e3 54       	subi	r30, 0x43	; 67
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	60 81       	ld	r22, Z
    39d8:	71 81       	ldd	r23, Z+1	; 0x01
    39da:	82 81       	ldd	r24, Z+2	; 0x02
    39dc:	93 81       	ldd	r25, Z+3	; 0x03
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	3f ef       	ldi	r19, 0xFF	; 255
    39e2:	4f e7       	ldi	r20, 0x7F	; 127
    39e4:	57 e4       	ldi	r21, 0x47	; 71
    39e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39ea:	18 16       	cp	r1, r24
    39ec:	0c f0       	brlt	.+2      	; 0x39f0 <Check_Distance_Parallel+0xe6>
    39ee:	43 c0       	rjmp	.+134    	; 0x3a76 <Check_Distance_Parallel+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f0:	fe 01       	movw	r30, r28
    39f2:	ef 53       	subi	r30, 0x3F	; 63
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	60 81       	ld	r22, Z
    39f8:	71 81       	ldd	r23, Z+1	; 0x01
    39fa:	82 81       	ldd	r24, Z+2	; 0x02
    39fc:	93 81       	ldd	r25, Z+3	; 0x03
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	40 e2       	ldi	r20, 0x20	; 32
    3a04:	51 e4       	ldi	r21, 0x41	; 65
    3a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	8e 01       	movw	r16, r28
    3a10:	05 54       	subi	r16, 0x45	; 69
    3a12:	1f 4f       	sbci	r17, 0xFF	; 255
    3a14:	bc 01       	movw	r22, r24
    3a16:	cd 01       	movw	r24, r26
    3a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	f8 01       	movw	r30, r16
    3a22:	91 83       	std	Z+1, r25	; 0x01
    3a24:	80 83       	st	Z, r24
    3a26:	1f c0       	rjmp	.+62     	; 0x3a66 <Check_Distance_Parallel+0x15c>
    3a28:	fe 01       	movw	r30, r28
    3a2a:	e7 54       	subi	r30, 0x47	; 71
    3a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2e:	88 ec       	ldi	r24, 0xC8	; 200
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	91 83       	std	Z+1, r25	; 0x01
    3a34:	80 83       	st	Z, r24
    3a36:	fe 01       	movw	r30, r28
    3a38:	e7 54       	subi	r30, 0x47	; 71
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	80 81       	ld	r24, Z
    3a3e:	91 81       	ldd	r25, Z+1	; 0x01
    3a40:	01 97       	sbiw	r24, 0x01	; 1
    3a42:	f1 f7       	brne	.-4      	; 0x3a40 <Check_Distance_Parallel+0x136>
    3a44:	fe 01       	movw	r30, r28
    3a46:	e7 54       	subi	r30, 0x47	; 71
    3a48:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4a:	91 83       	std	Z+1, r25	; 0x01
    3a4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a4e:	de 01       	movw	r26, r28
    3a50:	a5 54       	subi	r26, 0x45	; 69
    3a52:	bf 4f       	sbci	r27, 0xFF	; 255
    3a54:	fe 01       	movw	r30, r28
    3a56:	e5 54       	subi	r30, 0x45	; 69
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	80 81       	ld	r24, Z
    3a5c:	91 81       	ldd	r25, Z+1	; 0x01
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	11 96       	adiw	r26, 0x01	; 1
    3a62:	9c 93       	st	X, r25
    3a64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a66:	fe 01       	movw	r30, r28
    3a68:	e5 54       	subi	r30, 0x45	; 69
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	80 81       	ld	r24, Z
    3a6e:	91 81       	ldd	r25, Z+1	; 0x01
    3a70:	00 97       	sbiw	r24, 0x00	; 0
    3a72:	d1 f6       	brne	.-76     	; 0x3a28 <Check_Distance_Parallel+0x11e>
    3a74:	27 c0       	rjmp	.+78     	; 0x3ac4 <Check_Distance_Parallel+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a76:	8e 01       	movw	r16, r28
    3a78:	05 54       	subi	r16, 0x45	; 69
    3a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	e3 54       	subi	r30, 0x43	; 67
    3a80:	ff 4f       	sbci	r31, 0xFF	; 255
    3a82:	60 81       	ld	r22, Z
    3a84:	71 81       	ldd	r23, Z+1	; 0x01
    3a86:	82 81       	ldd	r24, Z+2	; 0x02
    3a88:	93 81       	ldd	r25, Z+3	; 0x03
    3a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8e:	dc 01       	movw	r26, r24
    3a90:	cb 01       	movw	r24, r22
    3a92:	f8 01       	movw	r30, r16
    3a94:	91 83       	std	Z+1, r25	; 0x01
    3a96:	80 83       	st	Z, r24
    3a98:	de 01       	movw	r26, r28
    3a9a:	a9 54       	subi	r26, 0x49	; 73
    3a9c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	e5 54       	subi	r30, 0x45	; 69
    3aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa4:	80 81       	ld	r24, Z
    3aa6:	91 81       	ldd	r25, Z+1	; 0x01
    3aa8:	8d 93       	st	X+, r24
    3aaa:	9c 93       	st	X, r25
    3aac:	fe 01       	movw	r30, r28
    3aae:	e9 54       	subi	r30, 0x49	; 73
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	80 81       	ld	r24, Z
    3ab4:	91 81       	ldd	r25, Z+1	; 0x01
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <Check_Distance_Parallel+0x1ac>
    3aba:	fe 01       	movw	r30, r28
    3abc:	e9 54       	subi	r30, 0x49	; 73
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	80 83       	st	Z, r24
			_delay_ms(1000);

			//here we go ...lets check the space if it,s more than my car size

			//STOP_DC_MOTOR();
			Display_Distance();
    3ac4:	0e 94 4f 1c 	call	0x389e	; 0x389e <Display_Distance>
			count++;
    3ac8:	80 91 b4 01 	lds	r24, 0x01B4
    3acc:	8f 5f       	subi	r24, 0xFF	; 255
    3ace:	80 93 b4 01 	sts	0x01B4, r24
			MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_CHECK);
    3ad2:	80 ea       	ldi	r24, 0xA0	; 160
    3ad4:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <MOVE_FORWARD>
			_delay_ms(TimeToCheckParking*10);
    3ad8:	80 91 a2 01 	lds	r24, 0x01A2
    3adc:	90 91 a3 01 	lds	r25, 0x01A3
    3ae0:	9c 01       	movw	r18, r24
    3ae2:	22 0f       	add	r18, r18
    3ae4:	33 1f       	adc	r19, r19
    3ae6:	c9 01       	movw	r24, r18
    3ae8:	88 0f       	add	r24, r24
    3aea:	99 1f       	adc	r25, r25
    3aec:	88 0f       	add	r24, r24
    3aee:	99 1f       	adc	r25, r25
    3af0:	82 0f       	add	r24, r18
    3af2:	93 1f       	adc	r25, r19
    3af4:	cc 01       	movw	r24, r24
    3af6:	a0 e0       	ldi	r26, 0x00	; 0
    3af8:	b0 e0       	ldi	r27, 0x00	; 0
    3afa:	bc 01       	movw	r22, r24
    3afc:	cd 01       	movw	r24, r26
    3afe:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	fe 01       	movw	r30, r28
    3b08:	ed 54       	subi	r30, 0x4D	; 77
    3b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0c:	80 83       	st	Z, r24
    3b0e:	91 83       	std	Z+1, r25	; 0x01
    3b10:	a2 83       	std	Z+2, r26	; 0x02
    3b12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b14:	8e 01       	movw	r16, r28
    3b16:	01 55       	subi	r16, 0x51	; 81
    3b18:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	ed 54       	subi	r30, 0x4D	; 77
    3b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b20:	60 81       	ld	r22, Z
    3b22:	71 81       	ldd	r23, Z+1	; 0x01
    3b24:	82 81       	ldd	r24, Z+2	; 0x02
    3b26:	93 81       	ldd	r25, Z+3	; 0x03
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	4a ef       	ldi	r20, 0xFA	; 250
    3b2e:	54 e4       	ldi	r21, 0x44	; 68
    3b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	f8 01       	movw	r30, r16
    3b3a:	80 83       	st	Z, r24
    3b3c:	91 83       	std	Z+1, r25	; 0x01
    3b3e:	a2 83       	std	Z+2, r26	; 0x02
    3b40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b42:	fe 01       	movw	r30, r28
    3b44:	e1 55       	subi	r30, 0x51	; 81
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	60 81       	ld	r22, Z
    3b4a:	71 81       	ldd	r23, Z+1	; 0x01
    3b4c:	82 81       	ldd	r24, Z+2	; 0x02
    3b4e:	93 81       	ldd	r25, Z+3	; 0x03
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	40 e8       	ldi	r20, 0x80	; 128
    3b56:	5f e3       	ldi	r21, 0x3F	; 63
    3b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b5c:	88 23       	and	r24, r24
    3b5e:	44 f4       	brge	.+16     	; 0x3b70 <Check_Distance_Parallel+0x266>
		__ticks = 1;
    3b60:	fe 01       	movw	r30, r28
    3b62:	e3 55       	subi	r30, 0x53	; 83
    3b64:	ff 4f       	sbci	r31, 0xFF	; 255
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	80 83       	st	Z, r24
    3b6e:	64 c0       	rjmp	.+200    	; 0x3c38 <Check_Distance_Parallel+0x32e>
	else if (__tmp > 65535)
    3b70:	fe 01       	movw	r30, r28
    3b72:	e1 55       	subi	r30, 0x51	; 81
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	60 81       	ld	r22, Z
    3b78:	71 81       	ldd	r23, Z+1	; 0x01
    3b7a:	82 81       	ldd	r24, Z+2	; 0x02
    3b7c:	93 81       	ldd	r25, Z+3	; 0x03
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	3f ef       	ldi	r19, 0xFF	; 255
    3b82:	4f e7       	ldi	r20, 0x7F	; 127
    3b84:	57 e4       	ldi	r21, 0x47	; 71
    3b86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b8a:	18 16       	cp	r1, r24
    3b8c:	0c f0       	brlt	.+2      	; 0x3b90 <Check_Distance_Parallel+0x286>
    3b8e:	43 c0       	rjmp	.+134    	; 0x3c16 <Check_Distance_Parallel+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b90:	fe 01       	movw	r30, r28
    3b92:	ed 54       	subi	r30, 0x4D	; 77
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	60 81       	ld	r22, Z
    3b98:	71 81       	ldd	r23, Z+1	; 0x01
    3b9a:	82 81       	ldd	r24, Z+2	; 0x02
    3b9c:	93 81       	ldd	r25, Z+3	; 0x03
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e2       	ldi	r20, 0x20	; 32
    3ba4:	51 e4       	ldi	r21, 0x41	; 65
    3ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	8e 01       	movw	r16, r28
    3bb0:	03 55       	subi	r16, 0x53	; 83
    3bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb4:	bc 01       	movw	r22, r24
    3bb6:	cd 01       	movw	r24, r26
    3bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	cb 01       	movw	r24, r22
    3bc0:	f8 01       	movw	r30, r16
    3bc2:	91 83       	std	Z+1, r25	; 0x01
    3bc4:	80 83       	st	Z, r24
    3bc6:	1f c0       	rjmp	.+62     	; 0x3c06 <Check_Distance_Parallel+0x2fc>
    3bc8:	fe 01       	movw	r30, r28
    3bca:	e5 55       	subi	r30, 0x55	; 85
    3bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bce:	88 ec       	ldi	r24, 0xC8	; 200
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	91 83       	std	Z+1, r25	; 0x01
    3bd4:	80 83       	st	Z, r24
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	e5 55       	subi	r30, 0x55	; 85
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	80 81       	ld	r24, Z
    3bde:	91 81       	ldd	r25, Z+1	; 0x01
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	f1 f7       	brne	.-4      	; 0x3be0 <Check_Distance_Parallel+0x2d6>
    3be4:	fe 01       	movw	r30, r28
    3be6:	e5 55       	subi	r30, 0x55	; 85
    3be8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bea:	91 83       	std	Z+1, r25	; 0x01
    3bec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bee:	de 01       	movw	r26, r28
    3bf0:	a3 55       	subi	r26, 0x53	; 83
    3bf2:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	e3 55       	subi	r30, 0x53	; 83
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	80 81       	ld	r24, Z
    3bfc:	91 81       	ldd	r25, Z+1	; 0x01
    3bfe:	01 97       	sbiw	r24, 0x01	; 1
    3c00:	11 96       	adiw	r26, 0x01	; 1
    3c02:	9c 93       	st	X, r25
    3c04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c06:	fe 01       	movw	r30, r28
    3c08:	e3 55       	subi	r30, 0x53	; 83
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	80 81       	ld	r24, Z
    3c0e:	91 81       	ldd	r25, Z+1	; 0x01
    3c10:	00 97       	sbiw	r24, 0x00	; 0
    3c12:	d1 f6       	brne	.-76     	; 0x3bc8 <Check_Distance_Parallel+0x2be>
    3c14:	2f c0       	rjmp	.+94     	; 0x3c74 <Check_Distance_Parallel+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c16:	8e 01       	movw	r16, r28
    3c18:	03 55       	subi	r16, 0x53	; 83
    3c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	e1 55       	subi	r30, 0x51	; 81
    3c20:	ff 4f       	sbci	r31, 0xFF	; 255
    3c22:	60 81       	ld	r22, Z
    3c24:	71 81       	ldd	r23, Z+1	; 0x01
    3c26:	82 81       	ldd	r24, Z+2	; 0x02
    3c28:	93 81       	ldd	r25, Z+3	; 0x03
    3c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	f8 01       	movw	r30, r16
    3c34:	91 83       	std	Z+1, r25	; 0x01
    3c36:	80 83       	st	Z, r24
    3c38:	de 01       	movw	r26, r28
    3c3a:	a7 55       	subi	r26, 0x57	; 87
    3c3c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c3e:	fe 01       	movw	r30, r28
    3c40:	e3 55       	subi	r30, 0x53	; 83
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	80 81       	ld	r24, Z
    3c46:	91 81       	ldd	r25, Z+1	; 0x01
    3c48:	11 96       	adiw	r26, 0x01	; 1
    3c4a:	9c 93       	st	X, r25
    3c4c:	8e 93       	st	-X, r24
    3c4e:	fe 01       	movw	r30, r28
    3c50:	e7 55       	subi	r30, 0x57	; 87
    3c52:	ff 4f       	sbci	r31, 0xFF	; 255
    3c54:	80 81       	ld	r24, Z
    3c56:	91 81       	ldd	r25, Z+1	; 0x01
    3c58:	01 97       	sbiw	r24, 0x01	; 1
    3c5a:	f1 f7       	brne	.-4      	; 0x3c58 <Check_Distance_Parallel+0x34e>
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	e7 55       	subi	r30, 0x57	; 87
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	91 83       	std	Z+1, r25	; 0x01
    3c64:	80 83       	st	Z, r24
    3c66:	06 c0       	rjmp	.+12     	; 0x3c74 <Check_Distance_Parallel+0x36a>
		}
		//if the second check wasn,t enough go to loop again
		else if (count>= 5)
    3c68:	80 91 b4 01 	lds	r24, 0x01B4
    3c6c:	85 30       	cpi	r24, 0x05	; 5
    3c6e:	38 f4       	brcc	.+14     	; 0x3c7e <Check_Distance_Parallel+0x374>
			break;
		}
		else
		{

			count=0;
    3c70:	10 92 b4 01 	sts	0x01B4, r1
	//this code below is check fuction
	//moving my car with detecting
	count=0;
	result_of_distance=0;
	MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
	while(count<7)
    3c74:	80 91 b4 01 	lds	r24, 0x01B4
    3c78:	87 30       	cpi	r24, 0x07	; 7
    3c7a:	08 f4       	brcc	.+2      	; 0x3c7e <Check_Distance_Parallel+0x374>
    3c7c:	5d ce       	rjmp	.-838    	; 0x3938 <Check_Distance_Parallel+0x2e>
			count=0;

		}

	}
	if (count==7)
    3c7e:	80 91 b4 01 	lds	r24, 0x01B4
    3c82:	87 30       	cpi	r24, 0x07	; 7
    3c84:	21 f4       	brne	.+8      	; 0x3c8e <Check_Distance_Parallel+0x384>
	{
		Parallel_Parking();
    3c86:	0e 94 0e 29 	call	0x521c	; 0x521c <Parallel_Parking>
    3c8a:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <Check_Distance_Parallel+0x12dc>
	}
	else if(count==5)
    3c8e:	80 91 b4 01 	lds	r24, 0x01B4
    3c92:	85 30       	cpi	r24, 0x05	; 5
    3c94:	09 f0       	breq	.+2      	; 0x3c98 <Check_Distance_Parallel+0x38e>
    3c96:	6b c4       	rjmp	.+2262   	; 0x456e <Check_Distance_Parallel+0xc64>
	{
		STOP_DC_MOTOR();
    3c98:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
		MOVE_BACKWORD(PWM_SPEED_OF_MOTOR_TO_PARK);
    3c9c:	86 e9       	ldi	r24, 0x96	; 150
    3c9e:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <MOVE_BACKWORD>
		_delay_ms(time_of_move_back_perpindicular_park_count5*10);
    3ca2:	80 91 a4 01 	lds	r24, 0x01A4
    3ca6:	90 91 a5 01 	lds	r25, 0x01A5
    3caa:	a0 91 a6 01 	lds	r26, 0x01A6
    3cae:	b0 91 a7 01 	lds	r27, 0x01A7
    3cb2:	bc 01       	movw	r22, r24
    3cb4:	cd 01       	movw	r24, r26
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	40 e2       	ldi	r20, 0x20	; 32
    3cbc:	51 e4       	ldi	r21, 0x41	; 65
    3cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	fe 01       	movw	r30, r28
    3cc8:	eb 55       	subi	r30, 0x5B	; 91
    3cca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ccc:	80 83       	st	Z, r24
    3cce:	91 83       	std	Z+1, r25	; 0x01
    3cd0:	a2 83       	std	Z+2, r26	; 0x02
    3cd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cd4:	8e 01       	movw	r16, r28
    3cd6:	0f 55       	subi	r16, 0x5F	; 95
    3cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cda:	fe 01       	movw	r30, r28
    3cdc:	eb 55       	subi	r30, 0x5B	; 91
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	60 81       	ld	r22, Z
    3ce2:	71 81       	ldd	r23, Z+1	; 0x01
    3ce4:	82 81       	ldd	r24, Z+2	; 0x02
    3ce6:	93 81       	ldd	r25, Z+3	; 0x03
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	4a ef       	ldi	r20, 0xFA	; 250
    3cee:	54 e4       	ldi	r21, 0x44	; 68
    3cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	f8 01       	movw	r30, r16
    3cfa:	80 83       	st	Z, r24
    3cfc:	91 83       	std	Z+1, r25	; 0x01
    3cfe:	a2 83       	std	Z+2, r26	; 0x02
    3d00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d02:	fe 01       	movw	r30, r28
    3d04:	ef 55       	subi	r30, 0x5F	; 95
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	60 81       	ld	r22, Z
    3d0a:	71 81       	ldd	r23, Z+1	; 0x01
    3d0c:	82 81       	ldd	r24, Z+2	; 0x02
    3d0e:	93 81       	ldd	r25, Z+3	; 0x03
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	40 e8       	ldi	r20, 0x80	; 128
    3d16:	5f e3       	ldi	r21, 0x3F	; 63
    3d18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d1c:	88 23       	and	r24, r24
    3d1e:	44 f4       	brge	.+16     	; 0x3d30 <Check_Distance_Parallel+0x426>
		__ticks = 1;
    3d20:	fe 01       	movw	r30, r28
    3d22:	e1 56       	subi	r30, 0x61	; 97
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	91 83       	std	Z+1, r25	; 0x01
    3d2c:	80 83       	st	Z, r24
    3d2e:	64 c0       	rjmp	.+200    	; 0x3df8 <Check_Distance_Parallel+0x4ee>
	else if (__tmp > 65535)
    3d30:	fe 01       	movw	r30, r28
    3d32:	ef 55       	subi	r30, 0x5F	; 95
    3d34:	ff 4f       	sbci	r31, 0xFF	; 255
    3d36:	60 81       	ld	r22, Z
    3d38:	71 81       	ldd	r23, Z+1	; 0x01
    3d3a:	82 81       	ldd	r24, Z+2	; 0x02
    3d3c:	93 81       	ldd	r25, Z+3	; 0x03
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	3f ef       	ldi	r19, 0xFF	; 255
    3d42:	4f e7       	ldi	r20, 0x7F	; 127
    3d44:	57 e4       	ldi	r21, 0x47	; 71
    3d46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d4a:	18 16       	cp	r1, r24
    3d4c:	0c f0       	brlt	.+2      	; 0x3d50 <Check_Distance_Parallel+0x446>
    3d4e:	43 c0       	rjmp	.+134    	; 0x3dd6 <Check_Distance_Parallel+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d50:	fe 01       	movw	r30, r28
    3d52:	eb 55       	subi	r30, 0x5B	; 91
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	60 81       	ld	r22, Z
    3d58:	71 81       	ldd	r23, Z+1	; 0x01
    3d5a:	82 81       	ldd	r24, Z+2	; 0x02
    3d5c:	93 81       	ldd	r25, Z+3	; 0x03
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e2       	ldi	r20, 0x20	; 32
    3d64:	51 e4       	ldi	r21, 0x41	; 65
    3d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	8e 01       	movw	r16, r28
    3d70:	01 56       	subi	r16, 0x61	; 97
    3d72:	1f 4f       	sbci	r17, 0xFF	; 255
    3d74:	bc 01       	movw	r22, r24
    3d76:	cd 01       	movw	r24, r26
    3d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	cb 01       	movw	r24, r22
    3d80:	f8 01       	movw	r30, r16
    3d82:	91 83       	std	Z+1, r25	; 0x01
    3d84:	80 83       	st	Z, r24
    3d86:	1f c0       	rjmp	.+62     	; 0x3dc6 <Check_Distance_Parallel+0x4bc>
    3d88:	fe 01       	movw	r30, r28
    3d8a:	e3 56       	subi	r30, 0x63	; 99
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	88 ec       	ldi	r24, 0xC8	; 200
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	91 83       	std	Z+1, r25	; 0x01
    3d94:	80 83       	st	Z, r24
    3d96:	fe 01       	movw	r30, r28
    3d98:	e3 56       	subi	r30, 0x63	; 99
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	80 81       	ld	r24, Z
    3d9e:	91 81       	ldd	r25, Z+1	; 0x01
    3da0:	01 97       	sbiw	r24, 0x01	; 1
    3da2:	f1 f7       	brne	.-4      	; 0x3da0 <Check_Distance_Parallel+0x496>
    3da4:	fe 01       	movw	r30, r28
    3da6:	e3 56       	subi	r30, 0x63	; 99
    3da8:	ff 4f       	sbci	r31, 0xFF	; 255
    3daa:	91 83       	std	Z+1, r25	; 0x01
    3dac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dae:	de 01       	movw	r26, r28
    3db0:	a1 56       	subi	r26, 0x61	; 97
    3db2:	bf 4f       	sbci	r27, 0xFF	; 255
    3db4:	fe 01       	movw	r30, r28
    3db6:	e1 56       	subi	r30, 0x61	; 97
    3db8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dba:	80 81       	ld	r24, Z
    3dbc:	91 81       	ldd	r25, Z+1	; 0x01
    3dbe:	01 97       	sbiw	r24, 0x01	; 1
    3dc0:	11 96       	adiw	r26, 0x01	; 1
    3dc2:	9c 93       	st	X, r25
    3dc4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dc6:	fe 01       	movw	r30, r28
    3dc8:	e1 56       	subi	r30, 0x61	; 97
    3dca:	ff 4f       	sbci	r31, 0xFF	; 255
    3dcc:	80 81       	ld	r24, Z
    3dce:	91 81       	ldd	r25, Z+1	; 0x01
    3dd0:	00 97       	sbiw	r24, 0x00	; 0
    3dd2:	d1 f6       	brne	.-76     	; 0x3d88 <Check_Distance_Parallel+0x47e>
    3dd4:	27 c0       	rjmp	.+78     	; 0x3e24 <Check_Distance_Parallel+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd6:	8e 01       	movw	r16, r28
    3dd8:	01 56       	subi	r16, 0x61	; 97
    3dda:	1f 4f       	sbci	r17, 0xFF	; 255
    3ddc:	fe 01       	movw	r30, r28
    3dde:	ef 55       	subi	r30, 0x5F	; 95
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	60 81       	ld	r22, Z
    3de4:	71 81       	ldd	r23, Z+1	; 0x01
    3de6:	82 81       	ldd	r24, Z+2	; 0x02
    3de8:	93 81       	ldd	r25, Z+3	; 0x03
    3dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	f8 01       	movw	r30, r16
    3df4:	91 83       	std	Z+1, r25	; 0x01
    3df6:	80 83       	st	Z, r24
    3df8:	de 01       	movw	r26, r28
    3dfa:	a5 56       	subi	r26, 0x65	; 101
    3dfc:	bf 4f       	sbci	r27, 0xFF	; 255
    3dfe:	fe 01       	movw	r30, r28
    3e00:	e1 56       	subi	r30, 0x61	; 97
    3e02:	ff 4f       	sbci	r31, 0xFF	; 255
    3e04:	80 81       	ld	r24, Z
    3e06:	91 81       	ldd	r25, Z+1	; 0x01
    3e08:	8d 93       	st	X+, r24
    3e0a:	9c 93       	st	X, r25
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	e5 56       	subi	r30, 0x65	; 101
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	80 81       	ld	r24, Z
    3e14:	91 81       	ldd	r25, Z+1	; 0x01
    3e16:	01 97       	sbiw	r24, 0x01	; 1
    3e18:	f1 f7       	brne	.-4      	; 0x3e16 <Check_Distance_Parallel+0x50c>
    3e1a:	fe 01       	movw	r30, r28
    3e1c:	e5 56       	subi	r30, 0x65	; 101
    3e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e20:	91 83       	std	Z+1, r25	; 0x01
    3e22:	80 83       	st	Z, r24
		STOP_DC_MOTOR();
    3e24:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
		Set_Angle_Servo_motor_3(90);
    3e28:	8a e5       	ldi	r24, 0x5A	; 90
    3e2a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <Set_Angle_Servo_motor_3>
    3e2e:	fe 01       	movw	r30, r28
    3e30:	e9 56       	subi	r30, 0x69	; 105
    3e32:	ff 4f       	sbci	r31, 0xFF	; 255
    3e34:	80 e0       	ldi	r24, 0x00	; 0
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	aa e7       	ldi	r26, 0x7A	; 122
    3e3a:	b4 e4       	ldi	r27, 0x44	; 68
    3e3c:	80 83       	st	Z, r24
    3e3e:	91 83       	std	Z+1, r25	; 0x01
    3e40:	a2 83       	std	Z+2, r26	; 0x02
    3e42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e44:	8e 01       	movw	r16, r28
    3e46:	0d 56       	subi	r16, 0x6D	; 109
    3e48:	1f 4f       	sbci	r17, 0xFF	; 255
    3e4a:	fe 01       	movw	r30, r28
    3e4c:	e9 56       	subi	r30, 0x69	; 105
    3e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e50:	60 81       	ld	r22, Z
    3e52:	71 81       	ldd	r23, Z+1	; 0x01
    3e54:	82 81       	ldd	r24, Z+2	; 0x02
    3e56:	93 81       	ldd	r25, Z+3	; 0x03
    3e58:	20 e0       	ldi	r18, 0x00	; 0
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	4a ef       	ldi	r20, 0xFA	; 250
    3e5e:	54 e4       	ldi	r21, 0x44	; 68
    3e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	f8 01       	movw	r30, r16
    3e6a:	80 83       	st	Z, r24
    3e6c:	91 83       	std	Z+1, r25	; 0x01
    3e6e:	a2 83       	std	Z+2, r26	; 0x02
    3e70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e72:	fe 01       	movw	r30, r28
    3e74:	ed 56       	subi	r30, 0x6D	; 109
    3e76:	ff 4f       	sbci	r31, 0xFF	; 255
    3e78:	60 81       	ld	r22, Z
    3e7a:	71 81       	ldd	r23, Z+1	; 0x01
    3e7c:	82 81       	ldd	r24, Z+2	; 0x02
    3e7e:	93 81       	ldd	r25, Z+3	; 0x03
    3e80:	20 e0       	ldi	r18, 0x00	; 0
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	40 e8       	ldi	r20, 0x80	; 128
    3e86:	5f e3       	ldi	r21, 0x3F	; 63
    3e88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e8c:	88 23       	and	r24, r24
    3e8e:	44 f4       	brge	.+16     	; 0x3ea0 <Check_Distance_Parallel+0x596>
		__ticks = 1;
    3e90:	fe 01       	movw	r30, r28
    3e92:	ef 56       	subi	r30, 0x6F	; 111
    3e94:	ff 4f       	sbci	r31, 0xFF	; 255
    3e96:	81 e0       	ldi	r24, 0x01	; 1
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	91 83       	std	Z+1, r25	; 0x01
    3e9c:	80 83       	st	Z, r24
    3e9e:	64 c0       	rjmp	.+200    	; 0x3f68 <Check_Distance_Parallel+0x65e>
	else if (__tmp > 65535)
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	ed 56       	subi	r30, 0x6D	; 109
    3ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea6:	60 81       	ld	r22, Z
    3ea8:	71 81       	ldd	r23, Z+1	; 0x01
    3eaa:	82 81       	ldd	r24, Z+2	; 0x02
    3eac:	93 81       	ldd	r25, Z+3	; 0x03
    3eae:	20 e0       	ldi	r18, 0x00	; 0
    3eb0:	3f ef       	ldi	r19, 0xFF	; 255
    3eb2:	4f e7       	ldi	r20, 0x7F	; 127
    3eb4:	57 e4       	ldi	r21, 0x47	; 71
    3eb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eba:	18 16       	cp	r1, r24
    3ebc:	0c f0       	brlt	.+2      	; 0x3ec0 <Check_Distance_Parallel+0x5b6>
    3ebe:	43 c0       	rjmp	.+134    	; 0x3f46 <Check_Distance_Parallel+0x63c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ec0:	fe 01       	movw	r30, r28
    3ec2:	e9 56       	subi	r30, 0x69	; 105
    3ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec6:	60 81       	ld	r22, Z
    3ec8:	71 81       	ldd	r23, Z+1	; 0x01
    3eca:	82 81       	ldd	r24, Z+2	; 0x02
    3ecc:	93 81       	ldd	r25, Z+3	; 0x03
    3ece:	20 e0       	ldi	r18, 0x00	; 0
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	40 e2       	ldi	r20, 0x20	; 32
    3ed4:	51 e4       	ldi	r21, 0x41	; 65
    3ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eda:	dc 01       	movw	r26, r24
    3edc:	cb 01       	movw	r24, r22
    3ede:	8e 01       	movw	r16, r28
    3ee0:	0f 56       	subi	r16, 0x6F	; 111
    3ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee4:	bc 01       	movw	r22, r24
    3ee6:	cd 01       	movw	r24, r26
    3ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eec:	dc 01       	movw	r26, r24
    3eee:	cb 01       	movw	r24, r22
    3ef0:	f8 01       	movw	r30, r16
    3ef2:	91 83       	std	Z+1, r25	; 0x01
    3ef4:	80 83       	st	Z, r24
    3ef6:	1f c0       	rjmp	.+62     	; 0x3f36 <Check_Distance_Parallel+0x62c>
    3ef8:	fe 01       	movw	r30, r28
    3efa:	e1 57       	subi	r30, 0x71	; 113
    3efc:	ff 4f       	sbci	r31, 0xFF	; 255
    3efe:	88 ec       	ldi	r24, 0xC8	; 200
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	91 83       	std	Z+1, r25	; 0x01
    3f04:	80 83       	st	Z, r24
    3f06:	fe 01       	movw	r30, r28
    3f08:	e1 57       	subi	r30, 0x71	; 113
    3f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0c:	80 81       	ld	r24, Z
    3f0e:	91 81       	ldd	r25, Z+1	; 0x01
    3f10:	01 97       	sbiw	r24, 0x01	; 1
    3f12:	f1 f7       	brne	.-4      	; 0x3f10 <Check_Distance_Parallel+0x606>
    3f14:	fe 01       	movw	r30, r28
    3f16:	e1 57       	subi	r30, 0x71	; 113
    3f18:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1a:	91 83       	std	Z+1, r25	; 0x01
    3f1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f1e:	de 01       	movw	r26, r28
    3f20:	af 56       	subi	r26, 0x6F	; 111
    3f22:	bf 4f       	sbci	r27, 0xFF	; 255
    3f24:	fe 01       	movw	r30, r28
    3f26:	ef 56       	subi	r30, 0x6F	; 111
    3f28:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2a:	80 81       	ld	r24, Z
    3f2c:	91 81       	ldd	r25, Z+1	; 0x01
    3f2e:	01 97       	sbiw	r24, 0x01	; 1
    3f30:	11 96       	adiw	r26, 0x01	; 1
    3f32:	9c 93       	st	X, r25
    3f34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f36:	fe 01       	movw	r30, r28
    3f38:	ef 56       	subi	r30, 0x6F	; 111
    3f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3c:	80 81       	ld	r24, Z
    3f3e:	91 81       	ldd	r25, Z+1	; 0x01
    3f40:	00 97       	sbiw	r24, 0x00	; 0
    3f42:	d1 f6       	brne	.-76     	; 0x3ef8 <Check_Distance_Parallel+0x5ee>
    3f44:	27 c0       	rjmp	.+78     	; 0x3f94 <Check_Distance_Parallel+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f46:	8e 01       	movw	r16, r28
    3f48:	0f 56       	subi	r16, 0x6F	; 111
    3f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f4c:	fe 01       	movw	r30, r28
    3f4e:	ed 56       	subi	r30, 0x6D	; 109
    3f50:	ff 4f       	sbci	r31, 0xFF	; 255
    3f52:	60 81       	ld	r22, Z
    3f54:	71 81       	ldd	r23, Z+1	; 0x01
    3f56:	82 81       	ldd	r24, Z+2	; 0x02
    3f58:	93 81       	ldd	r25, Z+3	; 0x03
    3f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f5e:	dc 01       	movw	r26, r24
    3f60:	cb 01       	movw	r24, r22
    3f62:	f8 01       	movw	r30, r16
    3f64:	91 83       	std	Z+1, r25	; 0x01
    3f66:	80 83       	st	Z, r24
    3f68:	de 01       	movw	r26, r28
    3f6a:	a3 57       	subi	r26, 0x73	; 115
    3f6c:	bf 4f       	sbci	r27, 0xFF	; 255
    3f6e:	fe 01       	movw	r30, r28
    3f70:	ef 56       	subi	r30, 0x6F	; 111
    3f72:	ff 4f       	sbci	r31, 0xFF	; 255
    3f74:	80 81       	ld	r24, Z
    3f76:	91 81       	ldd	r25, Z+1	; 0x01
    3f78:	8d 93       	st	X+, r24
    3f7a:	9c 93       	st	X, r25
    3f7c:	fe 01       	movw	r30, r28
    3f7e:	e3 57       	subi	r30, 0x73	; 115
    3f80:	ff 4f       	sbci	r31, 0xFF	; 255
    3f82:	80 81       	ld	r24, Z
    3f84:	91 81       	ldd	r25, Z+1	; 0x01
    3f86:	01 97       	sbiw	r24, 0x01	; 1
    3f88:	f1 f7       	brne	.-4      	; 0x3f86 <Check_Distance_Parallel+0x67c>
    3f8a:	fe 01       	movw	r30, r28
    3f8c:	e3 57       	subi	r30, 0x73	; 115
    3f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f90:	91 83       	std	Z+1, r25	; 0x01
    3f92:	80 83       	st	Z, r24
		_delay_ms(1000);
		UART_voidSendData(90);
    3f94:	8a e5       	ldi	r24, 0x5A	; 90
    3f96:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    3f9a:	fe 01       	movw	r30, r28
    3f9c:	e7 57       	subi	r30, 0x77	; 119
    3f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa0:	80 e0       	ldi	r24, 0x00	; 0
    3fa2:	90 e4       	ldi	r25, 0x40	; 64
    3fa4:	ac e9       	ldi	r26, 0x9C	; 156
    3fa6:	b5 e4       	ldi	r27, 0x45	; 69
    3fa8:	80 83       	st	Z, r24
    3faa:	91 83       	std	Z+1, r25	; 0x01
    3fac:	a2 83       	std	Z+2, r26	; 0x02
    3fae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fb0:	8e 01       	movw	r16, r28
    3fb2:	0b 57       	subi	r16, 0x7B	; 123
    3fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb6:	fe 01       	movw	r30, r28
    3fb8:	e7 57       	subi	r30, 0x77	; 119
    3fba:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbc:	60 81       	ld	r22, Z
    3fbe:	71 81       	ldd	r23, Z+1	; 0x01
    3fc0:	82 81       	ldd	r24, Z+2	; 0x02
    3fc2:	93 81       	ldd	r25, Z+3	; 0x03
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	4a ef       	ldi	r20, 0xFA	; 250
    3fca:	54 e4       	ldi	r21, 0x44	; 68
    3fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd0:	dc 01       	movw	r26, r24
    3fd2:	cb 01       	movw	r24, r22
    3fd4:	f8 01       	movw	r30, r16
    3fd6:	80 83       	st	Z, r24
    3fd8:	91 83       	std	Z+1, r25	; 0x01
    3fda:	a2 83       	std	Z+2, r26	; 0x02
    3fdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fde:	fe 01       	movw	r30, r28
    3fe0:	eb 57       	subi	r30, 0x7B	; 123
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	60 81       	ld	r22, Z
    3fe6:	71 81       	ldd	r23, Z+1	; 0x01
    3fe8:	82 81       	ldd	r24, Z+2	; 0x02
    3fea:	93 81       	ldd	r25, Z+3	; 0x03
    3fec:	20 e0       	ldi	r18, 0x00	; 0
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	40 e8       	ldi	r20, 0x80	; 128
    3ff2:	5f e3       	ldi	r21, 0x3F	; 63
    3ff4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ff8:	88 23       	and	r24, r24
    3ffa:	44 f4       	brge	.+16     	; 0x400c <Check_Distance_Parallel+0x702>
		__ticks = 1;
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	ed 57       	subi	r30, 0x7D	; 125
    4000:	ff 4f       	sbci	r31, 0xFF	; 255
    4002:	81 e0       	ldi	r24, 0x01	; 1
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	91 83       	std	Z+1, r25	; 0x01
    4008:	80 83       	st	Z, r24
    400a:	64 c0       	rjmp	.+200    	; 0x40d4 <Check_Distance_Parallel+0x7ca>
	else if (__tmp > 65535)
    400c:	fe 01       	movw	r30, r28
    400e:	eb 57       	subi	r30, 0x7B	; 123
    4010:	ff 4f       	sbci	r31, 0xFF	; 255
    4012:	60 81       	ld	r22, Z
    4014:	71 81       	ldd	r23, Z+1	; 0x01
    4016:	82 81       	ldd	r24, Z+2	; 0x02
    4018:	93 81       	ldd	r25, Z+3	; 0x03
    401a:	20 e0       	ldi	r18, 0x00	; 0
    401c:	3f ef       	ldi	r19, 0xFF	; 255
    401e:	4f e7       	ldi	r20, 0x7F	; 127
    4020:	57 e4       	ldi	r21, 0x47	; 71
    4022:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4026:	18 16       	cp	r1, r24
    4028:	0c f0       	brlt	.+2      	; 0x402c <Check_Distance_Parallel+0x722>
    402a:	43 c0       	rjmp	.+134    	; 0x40b2 <Check_Distance_Parallel+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    402c:	fe 01       	movw	r30, r28
    402e:	e7 57       	subi	r30, 0x77	; 119
    4030:	ff 4f       	sbci	r31, 0xFF	; 255
    4032:	60 81       	ld	r22, Z
    4034:	71 81       	ldd	r23, Z+1	; 0x01
    4036:	82 81       	ldd	r24, Z+2	; 0x02
    4038:	93 81       	ldd	r25, Z+3	; 0x03
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	40 e2       	ldi	r20, 0x20	; 32
    4040:	51 e4       	ldi	r21, 0x41	; 65
    4042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4046:	dc 01       	movw	r26, r24
    4048:	cb 01       	movw	r24, r22
    404a:	8e 01       	movw	r16, r28
    404c:	0d 57       	subi	r16, 0x7D	; 125
    404e:	1f 4f       	sbci	r17, 0xFF	; 255
    4050:	bc 01       	movw	r22, r24
    4052:	cd 01       	movw	r24, r26
    4054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4058:	dc 01       	movw	r26, r24
    405a:	cb 01       	movw	r24, r22
    405c:	f8 01       	movw	r30, r16
    405e:	91 83       	std	Z+1, r25	; 0x01
    4060:	80 83       	st	Z, r24
    4062:	1f c0       	rjmp	.+62     	; 0x40a2 <Check_Distance_Parallel+0x798>
    4064:	fe 01       	movw	r30, r28
    4066:	ef 57       	subi	r30, 0x7F	; 127
    4068:	ff 4f       	sbci	r31, 0xFF	; 255
    406a:	88 ec       	ldi	r24, 0xC8	; 200
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	91 83       	std	Z+1, r25	; 0x01
    4070:	80 83       	st	Z, r24
    4072:	fe 01       	movw	r30, r28
    4074:	ef 57       	subi	r30, 0x7F	; 127
    4076:	ff 4f       	sbci	r31, 0xFF	; 255
    4078:	80 81       	ld	r24, Z
    407a:	91 81       	ldd	r25, Z+1	; 0x01
    407c:	01 97       	sbiw	r24, 0x01	; 1
    407e:	f1 f7       	brne	.-4      	; 0x407c <Check_Distance_Parallel+0x772>
    4080:	fe 01       	movw	r30, r28
    4082:	ef 57       	subi	r30, 0x7F	; 127
    4084:	ff 4f       	sbci	r31, 0xFF	; 255
    4086:	91 83       	std	Z+1, r25	; 0x01
    4088:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    408a:	de 01       	movw	r26, r28
    408c:	ad 57       	subi	r26, 0x7D	; 125
    408e:	bf 4f       	sbci	r27, 0xFF	; 255
    4090:	fe 01       	movw	r30, r28
    4092:	ed 57       	subi	r30, 0x7D	; 125
    4094:	ff 4f       	sbci	r31, 0xFF	; 255
    4096:	80 81       	ld	r24, Z
    4098:	91 81       	ldd	r25, Z+1	; 0x01
    409a:	01 97       	sbiw	r24, 0x01	; 1
    409c:	11 96       	adiw	r26, 0x01	; 1
    409e:	9c 93       	st	X, r25
    40a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40a2:	fe 01       	movw	r30, r28
    40a4:	ed 57       	subi	r30, 0x7D	; 125
    40a6:	ff 4f       	sbci	r31, 0xFF	; 255
    40a8:	80 81       	ld	r24, Z
    40aa:	91 81       	ldd	r25, Z+1	; 0x01
    40ac:	00 97       	sbiw	r24, 0x00	; 0
    40ae:	d1 f6       	brne	.-76     	; 0x4064 <Check_Distance_Parallel+0x75a>
    40b0:	27 c0       	rjmp	.+78     	; 0x4100 <Check_Distance_Parallel+0x7f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40b2:	8e 01       	movw	r16, r28
    40b4:	0d 57       	subi	r16, 0x7D	; 125
    40b6:	1f 4f       	sbci	r17, 0xFF	; 255
    40b8:	fe 01       	movw	r30, r28
    40ba:	eb 57       	subi	r30, 0x7B	; 123
    40bc:	ff 4f       	sbci	r31, 0xFF	; 255
    40be:	60 81       	ld	r22, Z
    40c0:	71 81       	ldd	r23, Z+1	; 0x01
    40c2:	82 81       	ldd	r24, Z+2	; 0x02
    40c4:	93 81       	ldd	r25, Z+3	; 0x03
    40c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ca:	dc 01       	movw	r26, r24
    40cc:	cb 01       	movw	r24, r22
    40ce:	f8 01       	movw	r30, r16
    40d0:	91 83       	std	Z+1, r25	; 0x01
    40d2:	80 83       	st	Z, r24
    40d4:	de 01       	movw	r26, r28
    40d6:	a1 58       	subi	r26, 0x81	; 129
    40d8:	bf 4f       	sbci	r27, 0xFF	; 255
    40da:	fe 01       	movw	r30, r28
    40dc:	ed 57       	subi	r30, 0x7D	; 125
    40de:	ff 4f       	sbci	r31, 0xFF	; 255
    40e0:	80 81       	ld	r24, Z
    40e2:	91 81       	ldd	r25, Z+1	; 0x01
    40e4:	8d 93       	st	X+, r24
    40e6:	9c 93       	st	X, r25
    40e8:	fe 01       	movw	r30, r28
    40ea:	e1 58       	subi	r30, 0x81	; 129
    40ec:	ff 4f       	sbci	r31, 0xFF	; 255
    40ee:	80 81       	ld	r24, Z
    40f0:	91 81       	ldd	r25, Z+1	; 0x01
    40f2:	01 97       	sbiw	r24, 0x01	; 1
    40f4:	f1 f7       	brne	.-4      	; 0x40f2 <Check_Distance_Parallel+0x7e8>
    40f6:	fe 01       	movw	r30, r28
    40f8:	e1 58       	subi	r30, 0x81	; 129
    40fa:	ff 4f       	sbci	r31, 0xFF	; 255
    40fc:	91 83       	std	Z+1, r25	; 0x01
    40fe:	80 83       	st	Z, r24
		_delay_ms(5000);
		MOVE_BACKWORD_1_perpindicular(PWM_SPEED_OF_MOTOR_TO_PARK);
    4100:	86 e9       	ldi	r24, 0x96	; 150
    4102:	0e 94 5e 35 	call	0x6abc	; 0x6abc <MOVE_BACKWORD_1_perpindicular>
		MOVE_FORWARD_2_perpindicular(PWM_SPEED_OF_MOTOR_TO_PARK);
    4106:	86 e9       	ldi	r24, 0x96	; 150
    4108:	0e 94 34 35 	call	0x6a68	; 0x6a68 <MOVE_FORWARD_2_perpindicular>
		_delay_ms(time_of_move_perpindicular_park*10);
    410c:	80 91 c5 01 	lds	r24, 0x01C5
    4110:	90 91 c6 01 	lds	r25, 0x01C6
    4114:	a0 91 c7 01 	lds	r26, 0x01C7
    4118:	b0 91 c8 01 	lds	r27, 0x01C8
    411c:	bc 01       	movw	r22, r24
    411e:	cd 01       	movw	r24, r26
    4120:	20 e0       	ldi	r18, 0x00	; 0
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	40 e2       	ldi	r20, 0x20	; 32
    4126:	51 e4       	ldi	r21, 0x41	; 65
    4128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    412c:	dc 01       	movw	r26, r24
    412e:	cb 01       	movw	r24, r22
    4130:	fe 01       	movw	r30, r28
    4132:	e5 58       	subi	r30, 0x85	; 133
    4134:	ff 4f       	sbci	r31, 0xFF	; 255
    4136:	80 83       	st	Z, r24
    4138:	91 83       	std	Z+1, r25	; 0x01
    413a:	a2 83       	std	Z+2, r26	; 0x02
    413c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    413e:	8e 01       	movw	r16, r28
    4140:	09 58       	subi	r16, 0x89	; 137
    4142:	1f 4f       	sbci	r17, 0xFF	; 255
    4144:	fe 01       	movw	r30, r28
    4146:	e5 58       	subi	r30, 0x85	; 133
    4148:	ff 4f       	sbci	r31, 0xFF	; 255
    414a:	60 81       	ld	r22, Z
    414c:	71 81       	ldd	r23, Z+1	; 0x01
    414e:	82 81       	ldd	r24, Z+2	; 0x02
    4150:	93 81       	ldd	r25, Z+3	; 0x03
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	30 e0       	ldi	r19, 0x00	; 0
    4156:	4a ef       	ldi	r20, 0xFA	; 250
    4158:	54 e4       	ldi	r21, 0x44	; 68
    415a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    415e:	dc 01       	movw	r26, r24
    4160:	cb 01       	movw	r24, r22
    4162:	f8 01       	movw	r30, r16
    4164:	80 83       	st	Z, r24
    4166:	91 83       	std	Z+1, r25	; 0x01
    4168:	a2 83       	std	Z+2, r26	; 0x02
    416a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    416c:	fe 01       	movw	r30, r28
    416e:	e9 58       	subi	r30, 0x89	; 137
    4170:	ff 4f       	sbci	r31, 0xFF	; 255
    4172:	60 81       	ld	r22, Z
    4174:	71 81       	ldd	r23, Z+1	; 0x01
    4176:	82 81       	ldd	r24, Z+2	; 0x02
    4178:	93 81       	ldd	r25, Z+3	; 0x03
    417a:	20 e0       	ldi	r18, 0x00	; 0
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	40 e8       	ldi	r20, 0x80	; 128
    4180:	5f e3       	ldi	r21, 0x3F	; 63
    4182:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4186:	88 23       	and	r24, r24
    4188:	44 f4       	brge	.+16     	; 0x419a <Check_Distance_Parallel+0x890>
		__ticks = 1;
    418a:	fe 01       	movw	r30, r28
    418c:	eb 58       	subi	r30, 0x8B	; 139
    418e:	ff 4f       	sbci	r31, 0xFF	; 255
    4190:	81 e0       	ldi	r24, 0x01	; 1
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	91 83       	std	Z+1, r25	; 0x01
    4196:	80 83       	st	Z, r24
    4198:	64 c0       	rjmp	.+200    	; 0x4262 <Check_Distance_Parallel+0x958>
	else if (__tmp > 65535)
    419a:	fe 01       	movw	r30, r28
    419c:	e9 58       	subi	r30, 0x89	; 137
    419e:	ff 4f       	sbci	r31, 0xFF	; 255
    41a0:	60 81       	ld	r22, Z
    41a2:	71 81       	ldd	r23, Z+1	; 0x01
    41a4:	82 81       	ldd	r24, Z+2	; 0x02
    41a6:	93 81       	ldd	r25, Z+3	; 0x03
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	3f ef       	ldi	r19, 0xFF	; 255
    41ac:	4f e7       	ldi	r20, 0x7F	; 127
    41ae:	57 e4       	ldi	r21, 0x47	; 71
    41b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41b4:	18 16       	cp	r1, r24
    41b6:	0c f0       	brlt	.+2      	; 0x41ba <Check_Distance_Parallel+0x8b0>
    41b8:	43 c0       	rjmp	.+134    	; 0x4240 <Check_Distance_Parallel+0x936>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ba:	fe 01       	movw	r30, r28
    41bc:	e5 58       	subi	r30, 0x85	; 133
    41be:	ff 4f       	sbci	r31, 0xFF	; 255
    41c0:	60 81       	ld	r22, Z
    41c2:	71 81       	ldd	r23, Z+1	; 0x01
    41c4:	82 81       	ldd	r24, Z+2	; 0x02
    41c6:	93 81       	ldd	r25, Z+3	; 0x03
    41c8:	20 e0       	ldi	r18, 0x00	; 0
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	40 e2       	ldi	r20, 0x20	; 32
    41ce:	51 e4       	ldi	r21, 0x41	; 65
    41d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d4:	dc 01       	movw	r26, r24
    41d6:	cb 01       	movw	r24, r22
    41d8:	8e 01       	movw	r16, r28
    41da:	0b 58       	subi	r16, 0x8B	; 139
    41dc:	1f 4f       	sbci	r17, 0xFF	; 255
    41de:	bc 01       	movw	r22, r24
    41e0:	cd 01       	movw	r24, r26
    41e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e6:	dc 01       	movw	r26, r24
    41e8:	cb 01       	movw	r24, r22
    41ea:	f8 01       	movw	r30, r16
    41ec:	91 83       	std	Z+1, r25	; 0x01
    41ee:	80 83       	st	Z, r24
    41f0:	1f c0       	rjmp	.+62     	; 0x4230 <Check_Distance_Parallel+0x926>
    41f2:	fe 01       	movw	r30, r28
    41f4:	ed 58       	subi	r30, 0x8D	; 141
    41f6:	ff 4f       	sbci	r31, 0xFF	; 255
    41f8:	88 ec       	ldi	r24, 0xC8	; 200
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	91 83       	std	Z+1, r25	; 0x01
    41fe:	80 83       	st	Z, r24
    4200:	fe 01       	movw	r30, r28
    4202:	ed 58       	subi	r30, 0x8D	; 141
    4204:	ff 4f       	sbci	r31, 0xFF	; 255
    4206:	80 81       	ld	r24, Z
    4208:	91 81       	ldd	r25, Z+1	; 0x01
    420a:	01 97       	sbiw	r24, 0x01	; 1
    420c:	f1 f7       	brne	.-4      	; 0x420a <Check_Distance_Parallel+0x900>
    420e:	fe 01       	movw	r30, r28
    4210:	ed 58       	subi	r30, 0x8D	; 141
    4212:	ff 4f       	sbci	r31, 0xFF	; 255
    4214:	91 83       	std	Z+1, r25	; 0x01
    4216:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4218:	de 01       	movw	r26, r28
    421a:	ab 58       	subi	r26, 0x8B	; 139
    421c:	bf 4f       	sbci	r27, 0xFF	; 255
    421e:	fe 01       	movw	r30, r28
    4220:	eb 58       	subi	r30, 0x8B	; 139
    4222:	ff 4f       	sbci	r31, 0xFF	; 255
    4224:	80 81       	ld	r24, Z
    4226:	91 81       	ldd	r25, Z+1	; 0x01
    4228:	01 97       	sbiw	r24, 0x01	; 1
    422a:	11 96       	adiw	r26, 0x01	; 1
    422c:	9c 93       	st	X, r25
    422e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4230:	fe 01       	movw	r30, r28
    4232:	eb 58       	subi	r30, 0x8B	; 139
    4234:	ff 4f       	sbci	r31, 0xFF	; 255
    4236:	80 81       	ld	r24, Z
    4238:	91 81       	ldd	r25, Z+1	; 0x01
    423a:	00 97       	sbiw	r24, 0x00	; 0
    423c:	d1 f6       	brne	.-76     	; 0x41f2 <Check_Distance_Parallel+0x8e8>
    423e:	27 c0       	rjmp	.+78     	; 0x428e <Check_Distance_Parallel+0x984>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4240:	8e 01       	movw	r16, r28
    4242:	0b 58       	subi	r16, 0x8B	; 139
    4244:	1f 4f       	sbci	r17, 0xFF	; 255
    4246:	fe 01       	movw	r30, r28
    4248:	e9 58       	subi	r30, 0x89	; 137
    424a:	ff 4f       	sbci	r31, 0xFF	; 255
    424c:	60 81       	ld	r22, Z
    424e:	71 81       	ldd	r23, Z+1	; 0x01
    4250:	82 81       	ldd	r24, Z+2	; 0x02
    4252:	93 81       	ldd	r25, Z+3	; 0x03
    4254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4258:	dc 01       	movw	r26, r24
    425a:	cb 01       	movw	r24, r22
    425c:	f8 01       	movw	r30, r16
    425e:	91 83       	std	Z+1, r25	; 0x01
    4260:	80 83       	st	Z, r24
    4262:	de 01       	movw	r26, r28
    4264:	af 58       	subi	r26, 0x8F	; 143
    4266:	bf 4f       	sbci	r27, 0xFF	; 255
    4268:	fe 01       	movw	r30, r28
    426a:	eb 58       	subi	r30, 0x8B	; 139
    426c:	ff 4f       	sbci	r31, 0xFF	; 255
    426e:	80 81       	ld	r24, Z
    4270:	91 81       	ldd	r25, Z+1	; 0x01
    4272:	8d 93       	st	X+, r24
    4274:	9c 93       	st	X, r25
    4276:	fe 01       	movw	r30, r28
    4278:	ef 58       	subi	r30, 0x8F	; 143
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	80 81       	ld	r24, Z
    427e:	91 81       	ldd	r25, Z+1	; 0x01
    4280:	01 97       	sbiw	r24, 0x01	; 1
    4282:	f1 f7       	brne	.-4      	; 0x4280 <Check_Distance_Parallel+0x976>
    4284:	fe 01       	movw	r30, r28
    4286:	ef 58       	subi	r30, 0x8F	; 143
    4288:	ff 4f       	sbci	r31, 0xFF	; 255
    428a:	91 83       	std	Z+1, r25	; 0x01
    428c:	80 83       	st	Z, r24
		STOP_DC_MOTOR();
    428e:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
		Set_Angle_Servo_motor_3(0);
    4292:	80 e0       	ldi	r24, 0x00	; 0
    4294:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <Set_Angle_Servo_motor_3>
    4298:	fe 01       	movw	r30, r28
    429a:	e3 59       	subi	r30, 0x93	; 147
    429c:	ff 4f       	sbci	r31, 0xFF	; 255
    429e:	80 e0       	ldi	r24, 0x00	; 0
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	aa e7       	ldi	r26, 0x7A	; 122
    42a4:	b4 e4       	ldi	r27, 0x44	; 68
    42a6:	80 83       	st	Z, r24
    42a8:	91 83       	std	Z+1, r25	; 0x01
    42aa:	a2 83       	std	Z+2, r26	; 0x02
    42ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42ae:	8e 01       	movw	r16, r28
    42b0:	07 59       	subi	r16, 0x97	; 151
    42b2:	1f 4f       	sbci	r17, 0xFF	; 255
    42b4:	fe 01       	movw	r30, r28
    42b6:	e3 59       	subi	r30, 0x93	; 147
    42b8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ba:	60 81       	ld	r22, Z
    42bc:	71 81       	ldd	r23, Z+1	; 0x01
    42be:	82 81       	ldd	r24, Z+2	; 0x02
    42c0:	93 81       	ldd	r25, Z+3	; 0x03
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	4a ef       	ldi	r20, 0xFA	; 250
    42c8:	54 e4       	ldi	r21, 0x44	; 68
    42ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ce:	dc 01       	movw	r26, r24
    42d0:	cb 01       	movw	r24, r22
    42d2:	f8 01       	movw	r30, r16
    42d4:	80 83       	st	Z, r24
    42d6:	91 83       	std	Z+1, r25	; 0x01
    42d8:	a2 83       	std	Z+2, r26	; 0x02
    42da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42dc:	fe 01       	movw	r30, r28
    42de:	e7 59       	subi	r30, 0x97	; 151
    42e0:	ff 4f       	sbci	r31, 0xFF	; 255
    42e2:	60 81       	ld	r22, Z
    42e4:	71 81       	ldd	r23, Z+1	; 0x01
    42e6:	82 81       	ldd	r24, Z+2	; 0x02
    42e8:	93 81       	ldd	r25, Z+3	; 0x03
    42ea:	20 e0       	ldi	r18, 0x00	; 0
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	40 e8       	ldi	r20, 0x80	; 128
    42f0:	5f e3       	ldi	r21, 0x3F	; 63
    42f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42f6:	88 23       	and	r24, r24
    42f8:	44 f4       	brge	.+16     	; 0x430a <Check_Distance_Parallel+0xa00>
		__ticks = 1;
    42fa:	fe 01       	movw	r30, r28
    42fc:	e9 59       	subi	r30, 0x99	; 153
    42fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4300:	81 e0       	ldi	r24, 0x01	; 1
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	91 83       	std	Z+1, r25	; 0x01
    4306:	80 83       	st	Z, r24
    4308:	64 c0       	rjmp	.+200    	; 0x43d2 <Check_Distance_Parallel+0xac8>
	else if (__tmp > 65535)
    430a:	fe 01       	movw	r30, r28
    430c:	e7 59       	subi	r30, 0x97	; 151
    430e:	ff 4f       	sbci	r31, 0xFF	; 255
    4310:	60 81       	ld	r22, Z
    4312:	71 81       	ldd	r23, Z+1	; 0x01
    4314:	82 81       	ldd	r24, Z+2	; 0x02
    4316:	93 81       	ldd	r25, Z+3	; 0x03
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	3f ef       	ldi	r19, 0xFF	; 255
    431c:	4f e7       	ldi	r20, 0x7F	; 127
    431e:	57 e4       	ldi	r21, 0x47	; 71
    4320:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4324:	18 16       	cp	r1, r24
    4326:	0c f0       	brlt	.+2      	; 0x432a <Check_Distance_Parallel+0xa20>
    4328:	43 c0       	rjmp	.+134    	; 0x43b0 <Check_Distance_Parallel+0xaa6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    432a:	fe 01       	movw	r30, r28
    432c:	e3 59       	subi	r30, 0x93	; 147
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	60 81       	ld	r22, Z
    4332:	71 81       	ldd	r23, Z+1	; 0x01
    4334:	82 81       	ldd	r24, Z+2	; 0x02
    4336:	93 81       	ldd	r25, Z+3	; 0x03
    4338:	20 e0       	ldi	r18, 0x00	; 0
    433a:	30 e0       	ldi	r19, 0x00	; 0
    433c:	40 e2       	ldi	r20, 0x20	; 32
    433e:	51 e4       	ldi	r21, 0x41	; 65
    4340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4344:	dc 01       	movw	r26, r24
    4346:	cb 01       	movw	r24, r22
    4348:	8e 01       	movw	r16, r28
    434a:	09 59       	subi	r16, 0x99	; 153
    434c:	1f 4f       	sbci	r17, 0xFF	; 255
    434e:	bc 01       	movw	r22, r24
    4350:	cd 01       	movw	r24, r26
    4352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4356:	dc 01       	movw	r26, r24
    4358:	cb 01       	movw	r24, r22
    435a:	f8 01       	movw	r30, r16
    435c:	91 83       	std	Z+1, r25	; 0x01
    435e:	80 83       	st	Z, r24
    4360:	1f c0       	rjmp	.+62     	; 0x43a0 <Check_Distance_Parallel+0xa96>
    4362:	fe 01       	movw	r30, r28
    4364:	eb 59       	subi	r30, 0x9B	; 155
    4366:	ff 4f       	sbci	r31, 0xFF	; 255
    4368:	88 ec       	ldi	r24, 0xC8	; 200
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	91 83       	std	Z+1, r25	; 0x01
    436e:	80 83       	st	Z, r24
    4370:	fe 01       	movw	r30, r28
    4372:	eb 59       	subi	r30, 0x9B	; 155
    4374:	ff 4f       	sbci	r31, 0xFF	; 255
    4376:	80 81       	ld	r24, Z
    4378:	91 81       	ldd	r25, Z+1	; 0x01
    437a:	01 97       	sbiw	r24, 0x01	; 1
    437c:	f1 f7       	brne	.-4      	; 0x437a <Check_Distance_Parallel+0xa70>
    437e:	fe 01       	movw	r30, r28
    4380:	eb 59       	subi	r30, 0x9B	; 155
    4382:	ff 4f       	sbci	r31, 0xFF	; 255
    4384:	91 83       	std	Z+1, r25	; 0x01
    4386:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4388:	de 01       	movw	r26, r28
    438a:	a9 59       	subi	r26, 0x99	; 153
    438c:	bf 4f       	sbci	r27, 0xFF	; 255
    438e:	fe 01       	movw	r30, r28
    4390:	e9 59       	subi	r30, 0x99	; 153
    4392:	ff 4f       	sbci	r31, 0xFF	; 255
    4394:	80 81       	ld	r24, Z
    4396:	91 81       	ldd	r25, Z+1	; 0x01
    4398:	01 97       	sbiw	r24, 0x01	; 1
    439a:	11 96       	adiw	r26, 0x01	; 1
    439c:	9c 93       	st	X, r25
    439e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a0:	fe 01       	movw	r30, r28
    43a2:	e9 59       	subi	r30, 0x99	; 153
    43a4:	ff 4f       	sbci	r31, 0xFF	; 255
    43a6:	80 81       	ld	r24, Z
    43a8:	91 81       	ldd	r25, Z+1	; 0x01
    43aa:	00 97       	sbiw	r24, 0x00	; 0
    43ac:	d1 f6       	brne	.-76     	; 0x4362 <Check_Distance_Parallel+0xa58>
    43ae:	27 c0       	rjmp	.+78     	; 0x43fe <Check_Distance_Parallel+0xaf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43b0:	8e 01       	movw	r16, r28
    43b2:	09 59       	subi	r16, 0x99	; 153
    43b4:	1f 4f       	sbci	r17, 0xFF	; 255
    43b6:	fe 01       	movw	r30, r28
    43b8:	e7 59       	subi	r30, 0x97	; 151
    43ba:	ff 4f       	sbci	r31, 0xFF	; 255
    43bc:	60 81       	ld	r22, Z
    43be:	71 81       	ldd	r23, Z+1	; 0x01
    43c0:	82 81       	ldd	r24, Z+2	; 0x02
    43c2:	93 81       	ldd	r25, Z+3	; 0x03
    43c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43c8:	dc 01       	movw	r26, r24
    43ca:	cb 01       	movw	r24, r22
    43cc:	f8 01       	movw	r30, r16
    43ce:	91 83       	std	Z+1, r25	; 0x01
    43d0:	80 83       	st	Z, r24
    43d2:	de 01       	movw	r26, r28
    43d4:	ad 59       	subi	r26, 0x9D	; 157
    43d6:	bf 4f       	sbci	r27, 0xFF	; 255
    43d8:	fe 01       	movw	r30, r28
    43da:	e9 59       	subi	r30, 0x99	; 153
    43dc:	ff 4f       	sbci	r31, 0xFF	; 255
    43de:	80 81       	ld	r24, Z
    43e0:	91 81       	ldd	r25, Z+1	; 0x01
    43e2:	8d 93       	st	X+, r24
    43e4:	9c 93       	st	X, r25
    43e6:	fe 01       	movw	r30, r28
    43e8:	ed 59       	subi	r30, 0x9D	; 157
    43ea:	ff 4f       	sbci	r31, 0xFF	; 255
    43ec:	80 81       	ld	r24, Z
    43ee:	91 81       	ldd	r25, Z+1	; 0x01
    43f0:	01 97       	sbiw	r24, 0x01	; 1
    43f2:	f1 f7       	brne	.-4      	; 0x43f0 <Check_Distance_Parallel+0xae6>
    43f4:	fe 01       	movw	r30, r28
    43f6:	ed 59       	subi	r30, 0x9D	; 157
    43f8:	ff 4f       	sbci	r31, 0xFF	; 255
    43fa:	91 83       	std	Z+1, r25	; 0x01
    43fc:	80 83       	st	Z, r24
		_delay_ms(1000);
		UART_voidSendData(0);
    43fe:	80 e0       	ldi	r24, 0x00	; 0
    4400:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    4404:	fe 01       	movw	r30, r28
    4406:	e1 5a       	subi	r30, 0xA1	; 161
    4408:	ff 4f       	sbci	r31, 0xFF	; 255
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	aa e7       	ldi	r26, 0x7A	; 122
    4410:	b4 e4       	ldi	r27, 0x44	; 68
    4412:	80 83       	st	Z, r24
    4414:	91 83       	std	Z+1, r25	; 0x01
    4416:	a2 83       	std	Z+2, r26	; 0x02
    4418:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    441a:	8e 01       	movw	r16, r28
    441c:	05 5a       	subi	r16, 0xA5	; 165
    441e:	1f 4f       	sbci	r17, 0xFF	; 255
    4420:	fe 01       	movw	r30, r28
    4422:	e1 5a       	subi	r30, 0xA1	; 161
    4424:	ff 4f       	sbci	r31, 0xFF	; 255
    4426:	60 81       	ld	r22, Z
    4428:	71 81       	ldd	r23, Z+1	; 0x01
    442a:	82 81       	ldd	r24, Z+2	; 0x02
    442c:	93 81       	ldd	r25, Z+3	; 0x03
    442e:	20 e0       	ldi	r18, 0x00	; 0
    4430:	30 e0       	ldi	r19, 0x00	; 0
    4432:	4a ef       	ldi	r20, 0xFA	; 250
    4434:	54 e4       	ldi	r21, 0x44	; 68
    4436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    443a:	dc 01       	movw	r26, r24
    443c:	cb 01       	movw	r24, r22
    443e:	f8 01       	movw	r30, r16
    4440:	80 83       	st	Z, r24
    4442:	91 83       	std	Z+1, r25	; 0x01
    4444:	a2 83       	std	Z+2, r26	; 0x02
    4446:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4448:	fe 01       	movw	r30, r28
    444a:	e5 5a       	subi	r30, 0xA5	; 165
    444c:	ff 4f       	sbci	r31, 0xFF	; 255
    444e:	60 81       	ld	r22, Z
    4450:	71 81       	ldd	r23, Z+1	; 0x01
    4452:	82 81       	ldd	r24, Z+2	; 0x02
    4454:	93 81       	ldd	r25, Z+3	; 0x03
    4456:	20 e0       	ldi	r18, 0x00	; 0
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	40 e8       	ldi	r20, 0x80	; 128
    445c:	5f e3       	ldi	r21, 0x3F	; 63
    445e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4462:	88 23       	and	r24, r24
    4464:	44 f4       	brge	.+16     	; 0x4476 <Check_Distance_Parallel+0xb6c>
		__ticks = 1;
    4466:	fe 01       	movw	r30, r28
    4468:	e7 5a       	subi	r30, 0xA7	; 167
    446a:	ff 4f       	sbci	r31, 0xFF	; 255
    446c:	81 e0       	ldi	r24, 0x01	; 1
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	91 83       	std	Z+1, r25	; 0x01
    4472:	80 83       	st	Z, r24
    4474:	64 c0       	rjmp	.+200    	; 0x453e <Check_Distance_Parallel+0xc34>
	else if (__tmp > 65535)
    4476:	fe 01       	movw	r30, r28
    4478:	e5 5a       	subi	r30, 0xA5	; 165
    447a:	ff 4f       	sbci	r31, 0xFF	; 255
    447c:	60 81       	ld	r22, Z
    447e:	71 81       	ldd	r23, Z+1	; 0x01
    4480:	82 81       	ldd	r24, Z+2	; 0x02
    4482:	93 81       	ldd	r25, Z+3	; 0x03
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	3f ef       	ldi	r19, 0xFF	; 255
    4488:	4f e7       	ldi	r20, 0x7F	; 127
    448a:	57 e4       	ldi	r21, 0x47	; 71
    448c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4490:	18 16       	cp	r1, r24
    4492:	0c f0       	brlt	.+2      	; 0x4496 <Check_Distance_Parallel+0xb8c>
    4494:	43 c0       	rjmp	.+134    	; 0x451c <Check_Distance_Parallel+0xc12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4496:	fe 01       	movw	r30, r28
    4498:	e1 5a       	subi	r30, 0xA1	; 161
    449a:	ff 4f       	sbci	r31, 0xFF	; 255
    449c:	60 81       	ld	r22, Z
    449e:	71 81       	ldd	r23, Z+1	; 0x01
    44a0:	82 81       	ldd	r24, Z+2	; 0x02
    44a2:	93 81       	ldd	r25, Z+3	; 0x03
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	40 e2       	ldi	r20, 0x20	; 32
    44aa:	51 e4       	ldi	r21, 0x41	; 65
    44ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b0:	dc 01       	movw	r26, r24
    44b2:	cb 01       	movw	r24, r22
    44b4:	8e 01       	movw	r16, r28
    44b6:	07 5a       	subi	r16, 0xA7	; 167
    44b8:	1f 4f       	sbci	r17, 0xFF	; 255
    44ba:	bc 01       	movw	r22, r24
    44bc:	cd 01       	movw	r24, r26
    44be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c2:	dc 01       	movw	r26, r24
    44c4:	cb 01       	movw	r24, r22
    44c6:	f8 01       	movw	r30, r16
    44c8:	91 83       	std	Z+1, r25	; 0x01
    44ca:	80 83       	st	Z, r24
    44cc:	1f c0       	rjmp	.+62     	; 0x450c <Check_Distance_Parallel+0xc02>
    44ce:	fe 01       	movw	r30, r28
    44d0:	e9 5a       	subi	r30, 0xA9	; 169
    44d2:	ff 4f       	sbci	r31, 0xFF	; 255
    44d4:	88 ec       	ldi	r24, 0xC8	; 200
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	91 83       	std	Z+1, r25	; 0x01
    44da:	80 83       	st	Z, r24
    44dc:	fe 01       	movw	r30, r28
    44de:	e9 5a       	subi	r30, 0xA9	; 169
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	80 81       	ld	r24, Z
    44e4:	91 81       	ldd	r25, Z+1	; 0x01
    44e6:	01 97       	sbiw	r24, 0x01	; 1
    44e8:	f1 f7       	brne	.-4      	; 0x44e6 <Check_Distance_Parallel+0xbdc>
    44ea:	fe 01       	movw	r30, r28
    44ec:	e9 5a       	subi	r30, 0xA9	; 169
    44ee:	ff 4f       	sbci	r31, 0xFF	; 255
    44f0:	91 83       	std	Z+1, r25	; 0x01
    44f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44f4:	de 01       	movw	r26, r28
    44f6:	a7 5a       	subi	r26, 0xA7	; 167
    44f8:	bf 4f       	sbci	r27, 0xFF	; 255
    44fa:	fe 01       	movw	r30, r28
    44fc:	e7 5a       	subi	r30, 0xA7	; 167
    44fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4500:	80 81       	ld	r24, Z
    4502:	91 81       	ldd	r25, Z+1	; 0x01
    4504:	01 97       	sbiw	r24, 0x01	; 1
    4506:	11 96       	adiw	r26, 0x01	; 1
    4508:	9c 93       	st	X, r25
    450a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    450c:	fe 01       	movw	r30, r28
    450e:	e7 5a       	subi	r30, 0xA7	; 167
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	80 81       	ld	r24, Z
    4514:	91 81       	ldd	r25, Z+1	; 0x01
    4516:	00 97       	sbiw	r24, 0x00	; 0
    4518:	d1 f6       	brne	.-76     	; 0x44ce <Check_Distance_Parallel+0xbc4>
    451a:	65 c3       	rjmp	.+1738   	; 0x4be6 <Check_Distance_Parallel+0x12dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    451c:	8e 01       	movw	r16, r28
    451e:	07 5a       	subi	r16, 0xA7	; 167
    4520:	1f 4f       	sbci	r17, 0xFF	; 255
    4522:	fe 01       	movw	r30, r28
    4524:	e5 5a       	subi	r30, 0xA5	; 165
    4526:	ff 4f       	sbci	r31, 0xFF	; 255
    4528:	60 81       	ld	r22, Z
    452a:	71 81       	ldd	r23, Z+1	; 0x01
    452c:	82 81       	ldd	r24, Z+2	; 0x02
    452e:	93 81       	ldd	r25, Z+3	; 0x03
    4530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4534:	dc 01       	movw	r26, r24
    4536:	cb 01       	movw	r24, r22
    4538:	f8 01       	movw	r30, r16
    453a:	91 83       	std	Z+1, r25	; 0x01
    453c:	80 83       	st	Z, r24
    453e:	de 01       	movw	r26, r28
    4540:	ab 5a       	subi	r26, 0xAB	; 171
    4542:	bf 4f       	sbci	r27, 0xFF	; 255
    4544:	fe 01       	movw	r30, r28
    4546:	e7 5a       	subi	r30, 0xA7	; 167
    4548:	ff 4f       	sbci	r31, 0xFF	; 255
    454a:	80 81       	ld	r24, Z
    454c:	91 81       	ldd	r25, Z+1	; 0x01
    454e:	11 96       	adiw	r26, 0x01	; 1
    4550:	9c 93       	st	X, r25
    4552:	8e 93       	st	-X, r24
    4554:	fe 01       	movw	r30, r28
    4556:	eb 5a       	subi	r30, 0xAB	; 171
    4558:	ff 4f       	sbci	r31, 0xFF	; 255
    455a:	80 81       	ld	r24, Z
    455c:	91 81       	ldd	r25, Z+1	; 0x01
    455e:	01 97       	sbiw	r24, 0x01	; 1
    4560:	f1 f7       	brne	.-4      	; 0x455e <Check_Distance_Parallel+0xc54>
    4562:	fe 01       	movw	r30, r28
    4564:	eb 5a       	subi	r30, 0xAB	; 171
    4566:	ff 4f       	sbci	r31, 0xFF	; 255
    4568:	91 83       	std	Z+1, r25	; 0x01
    456a:	80 83       	st	Z, r24
    456c:	3c c3       	rjmp	.+1656   	; 0x4be6 <Check_Distance_Parallel+0x12dc>
		_delay_ms(1000);

	}
	else if(count==6)
    456e:	80 91 b4 01 	lds	r24, 0x01B4
    4572:	86 30       	cpi	r24, 0x06	; 6
    4574:	09 f0       	breq	.+2      	; 0x4578 <Check_Distance_Parallel+0xc6e>
    4576:	37 c3       	rjmp	.+1646   	; 0x4be6 <Check_Distance_Parallel+0x12dc>
	{
		STOP_DC_MOTOR();
    4578:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
		MOVE_BACKWORD(PWM_SPEED_OF_MOTOR_TO_PARK);
    457c:	86 e9       	ldi	r24, 0x96	; 150
    457e:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <MOVE_BACKWORD>
		_delay_ms(time_of_move_back_perpindicular_park_count6*10);
    4582:	80 91 c9 01 	lds	r24, 0x01C9
    4586:	90 91 ca 01 	lds	r25, 0x01CA
    458a:	a0 91 cb 01 	lds	r26, 0x01CB
    458e:	b0 91 cc 01 	lds	r27, 0x01CC
    4592:	bc 01       	movw	r22, r24
    4594:	cd 01       	movw	r24, r26
    4596:	20 e0       	ldi	r18, 0x00	; 0
    4598:	30 e0       	ldi	r19, 0x00	; 0
    459a:	40 e2       	ldi	r20, 0x20	; 32
    459c:	51 e4       	ldi	r21, 0x41	; 65
    459e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a2:	dc 01       	movw	r26, r24
    45a4:	cb 01       	movw	r24, r22
    45a6:	fe 01       	movw	r30, r28
    45a8:	ef 5a       	subi	r30, 0xAF	; 175
    45aa:	ff 4f       	sbci	r31, 0xFF	; 255
    45ac:	80 83       	st	Z, r24
    45ae:	91 83       	std	Z+1, r25	; 0x01
    45b0:	a2 83       	std	Z+2, r26	; 0x02
    45b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45b4:	8e 01       	movw	r16, r28
    45b6:	03 5b       	subi	r16, 0xB3	; 179
    45b8:	1f 4f       	sbci	r17, 0xFF	; 255
    45ba:	fe 01       	movw	r30, r28
    45bc:	ef 5a       	subi	r30, 0xAF	; 175
    45be:	ff 4f       	sbci	r31, 0xFF	; 255
    45c0:	60 81       	ld	r22, Z
    45c2:	71 81       	ldd	r23, Z+1	; 0x01
    45c4:	82 81       	ldd	r24, Z+2	; 0x02
    45c6:	93 81       	ldd	r25, Z+3	; 0x03
    45c8:	20 e0       	ldi	r18, 0x00	; 0
    45ca:	30 e0       	ldi	r19, 0x00	; 0
    45cc:	4a ef       	ldi	r20, 0xFA	; 250
    45ce:	54 e4       	ldi	r21, 0x44	; 68
    45d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d4:	dc 01       	movw	r26, r24
    45d6:	cb 01       	movw	r24, r22
    45d8:	f8 01       	movw	r30, r16
    45da:	80 83       	st	Z, r24
    45dc:	91 83       	std	Z+1, r25	; 0x01
    45de:	a2 83       	std	Z+2, r26	; 0x02
    45e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45e2:	fe 01       	movw	r30, r28
    45e4:	e3 5b       	subi	r30, 0xB3	; 179
    45e6:	ff 4f       	sbci	r31, 0xFF	; 255
    45e8:	60 81       	ld	r22, Z
    45ea:	71 81       	ldd	r23, Z+1	; 0x01
    45ec:	82 81       	ldd	r24, Z+2	; 0x02
    45ee:	93 81       	ldd	r25, Z+3	; 0x03
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	40 e8       	ldi	r20, 0x80	; 128
    45f6:	5f e3       	ldi	r21, 0x3F	; 63
    45f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45fc:	88 23       	and	r24, r24
    45fe:	44 f4       	brge	.+16     	; 0x4610 <Check_Distance_Parallel+0xd06>
		__ticks = 1;
    4600:	fe 01       	movw	r30, r28
    4602:	e5 5b       	subi	r30, 0xB5	; 181
    4604:	ff 4f       	sbci	r31, 0xFF	; 255
    4606:	81 e0       	ldi	r24, 0x01	; 1
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	91 83       	std	Z+1, r25	; 0x01
    460c:	80 83       	st	Z, r24
    460e:	64 c0       	rjmp	.+200    	; 0x46d8 <Check_Distance_Parallel+0xdce>
	else if (__tmp > 65535)
    4610:	fe 01       	movw	r30, r28
    4612:	e3 5b       	subi	r30, 0xB3	; 179
    4614:	ff 4f       	sbci	r31, 0xFF	; 255
    4616:	60 81       	ld	r22, Z
    4618:	71 81       	ldd	r23, Z+1	; 0x01
    461a:	82 81       	ldd	r24, Z+2	; 0x02
    461c:	93 81       	ldd	r25, Z+3	; 0x03
    461e:	20 e0       	ldi	r18, 0x00	; 0
    4620:	3f ef       	ldi	r19, 0xFF	; 255
    4622:	4f e7       	ldi	r20, 0x7F	; 127
    4624:	57 e4       	ldi	r21, 0x47	; 71
    4626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    462a:	18 16       	cp	r1, r24
    462c:	0c f0       	brlt	.+2      	; 0x4630 <Check_Distance_Parallel+0xd26>
    462e:	43 c0       	rjmp	.+134    	; 0x46b6 <Check_Distance_Parallel+0xdac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4630:	fe 01       	movw	r30, r28
    4632:	ef 5a       	subi	r30, 0xAF	; 175
    4634:	ff 4f       	sbci	r31, 0xFF	; 255
    4636:	60 81       	ld	r22, Z
    4638:	71 81       	ldd	r23, Z+1	; 0x01
    463a:	82 81       	ldd	r24, Z+2	; 0x02
    463c:	93 81       	ldd	r25, Z+3	; 0x03
    463e:	20 e0       	ldi	r18, 0x00	; 0
    4640:	30 e0       	ldi	r19, 0x00	; 0
    4642:	40 e2       	ldi	r20, 0x20	; 32
    4644:	51 e4       	ldi	r21, 0x41	; 65
    4646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    464a:	dc 01       	movw	r26, r24
    464c:	cb 01       	movw	r24, r22
    464e:	8e 01       	movw	r16, r28
    4650:	05 5b       	subi	r16, 0xB5	; 181
    4652:	1f 4f       	sbci	r17, 0xFF	; 255
    4654:	bc 01       	movw	r22, r24
    4656:	cd 01       	movw	r24, r26
    4658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    465c:	dc 01       	movw	r26, r24
    465e:	cb 01       	movw	r24, r22
    4660:	f8 01       	movw	r30, r16
    4662:	91 83       	std	Z+1, r25	; 0x01
    4664:	80 83       	st	Z, r24
    4666:	1f c0       	rjmp	.+62     	; 0x46a6 <Check_Distance_Parallel+0xd9c>
    4668:	fe 01       	movw	r30, r28
    466a:	e7 5b       	subi	r30, 0xB7	; 183
    466c:	ff 4f       	sbci	r31, 0xFF	; 255
    466e:	88 ec       	ldi	r24, 0xC8	; 200
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	91 83       	std	Z+1, r25	; 0x01
    4674:	80 83       	st	Z, r24
    4676:	fe 01       	movw	r30, r28
    4678:	e7 5b       	subi	r30, 0xB7	; 183
    467a:	ff 4f       	sbci	r31, 0xFF	; 255
    467c:	80 81       	ld	r24, Z
    467e:	91 81       	ldd	r25, Z+1	; 0x01
    4680:	01 97       	sbiw	r24, 0x01	; 1
    4682:	f1 f7       	brne	.-4      	; 0x4680 <Check_Distance_Parallel+0xd76>
    4684:	fe 01       	movw	r30, r28
    4686:	e7 5b       	subi	r30, 0xB7	; 183
    4688:	ff 4f       	sbci	r31, 0xFF	; 255
    468a:	91 83       	std	Z+1, r25	; 0x01
    468c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    468e:	de 01       	movw	r26, r28
    4690:	a5 5b       	subi	r26, 0xB5	; 181
    4692:	bf 4f       	sbci	r27, 0xFF	; 255
    4694:	fe 01       	movw	r30, r28
    4696:	e5 5b       	subi	r30, 0xB5	; 181
    4698:	ff 4f       	sbci	r31, 0xFF	; 255
    469a:	80 81       	ld	r24, Z
    469c:	91 81       	ldd	r25, Z+1	; 0x01
    469e:	01 97       	sbiw	r24, 0x01	; 1
    46a0:	11 96       	adiw	r26, 0x01	; 1
    46a2:	9c 93       	st	X, r25
    46a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46a6:	fe 01       	movw	r30, r28
    46a8:	e5 5b       	subi	r30, 0xB5	; 181
    46aa:	ff 4f       	sbci	r31, 0xFF	; 255
    46ac:	80 81       	ld	r24, Z
    46ae:	91 81       	ldd	r25, Z+1	; 0x01
    46b0:	00 97       	sbiw	r24, 0x00	; 0
    46b2:	d1 f6       	brne	.-76     	; 0x4668 <Check_Distance_Parallel+0xd5e>
    46b4:	27 c0       	rjmp	.+78     	; 0x4704 <Check_Distance_Parallel+0xdfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46b6:	8e 01       	movw	r16, r28
    46b8:	05 5b       	subi	r16, 0xB5	; 181
    46ba:	1f 4f       	sbci	r17, 0xFF	; 255
    46bc:	fe 01       	movw	r30, r28
    46be:	e3 5b       	subi	r30, 0xB3	; 179
    46c0:	ff 4f       	sbci	r31, 0xFF	; 255
    46c2:	60 81       	ld	r22, Z
    46c4:	71 81       	ldd	r23, Z+1	; 0x01
    46c6:	82 81       	ldd	r24, Z+2	; 0x02
    46c8:	93 81       	ldd	r25, Z+3	; 0x03
    46ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ce:	dc 01       	movw	r26, r24
    46d0:	cb 01       	movw	r24, r22
    46d2:	f8 01       	movw	r30, r16
    46d4:	91 83       	std	Z+1, r25	; 0x01
    46d6:	80 83       	st	Z, r24
    46d8:	de 01       	movw	r26, r28
    46da:	a9 5b       	subi	r26, 0xB9	; 185
    46dc:	bf 4f       	sbci	r27, 0xFF	; 255
    46de:	fe 01       	movw	r30, r28
    46e0:	e5 5b       	subi	r30, 0xB5	; 181
    46e2:	ff 4f       	sbci	r31, 0xFF	; 255
    46e4:	80 81       	ld	r24, Z
    46e6:	91 81       	ldd	r25, Z+1	; 0x01
    46e8:	8d 93       	st	X+, r24
    46ea:	9c 93       	st	X, r25
    46ec:	fe 01       	movw	r30, r28
    46ee:	e9 5b       	subi	r30, 0xB9	; 185
    46f0:	ff 4f       	sbci	r31, 0xFF	; 255
    46f2:	80 81       	ld	r24, Z
    46f4:	91 81       	ldd	r25, Z+1	; 0x01
    46f6:	01 97       	sbiw	r24, 0x01	; 1
    46f8:	f1 f7       	brne	.-4      	; 0x46f6 <Check_Distance_Parallel+0xdec>
    46fa:	fe 01       	movw	r30, r28
    46fc:	e9 5b       	subi	r30, 0xB9	; 185
    46fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4700:	91 83       	std	Z+1, r25	; 0x01
    4702:	80 83       	st	Z, r24
		STOP_DC_MOTOR();
    4704:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
		Set_Angle_Servo_motor_3(90);
    4708:	8a e5       	ldi	r24, 0x5A	; 90
    470a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <Set_Angle_Servo_motor_3>
    470e:	fe 01       	movw	r30, r28
    4710:	ed 5b       	subi	r30, 0xBD	; 189
    4712:	ff 4f       	sbci	r31, 0xFF	; 255
    4714:	80 e0       	ldi	r24, 0x00	; 0
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	aa e7       	ldi	r26, 0x7A	; 122
    471a:	b4 e4       	ldi	r27, 0x44	; 68
    471c:	80 83       	st	Z, r24
    471e:	91 83       	std	Z+1, r25	; 0x01
    4720:	a2 83       	std	Z+2, r26	; 0x02
    4722:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4724:	8e 01       	movw	r16, r28
    4726:	01 5c       	subi	r16, 0xC1	; 193
    4728:	1f 4f       	sbci	r17, 0xFF	; 255
    472a:	fe 01       	movw	r30, r28
    472c:	ed 5b       	subi	r30, 0xBD	; 189
    472e:	ff 4f       	sbci	r31, 0xFF	; 255
    4730:	60 81       	ld	r22, Z
    4732:	71 81       	ldd	r23, Z+1	; 0x01
    4734:	82 81       	ldd	r24, Z+2	; 0x02
    4736:	93 81       	ldd	r25, Z+3	; 0x03
    4738:	20 e0       	ldi	r18, 0x00	; 0
    473a:	30 e0       	ldi	r19, 0x00	; 0
    473c:	4a ef       	ldi	r20, 0xFA	; 250
    473e:	54 e4       	ldi	r21, 0x44	; 68
    4740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4744:	dc 01       	movw	r26, r24
    4746:	cb 01       	movw	r24, r22
    4748:	f8 01       	movw	r30, r16
    474a:	80 83       	st	Z, r24
    474c:	91 83       	std	Z+1, r25	; 0x01
    474e:	a2 83       	std	Z+2, r26	; 0x02
    4750:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4752:	fe 01       	movw	r30, r28
    4754:	ff 96       	adiw	r30, 0x3f	; 63
    4756:	60 81       	ld	r22, Z
    4758:	71 81       	ldd	r23, Z+1	; 0x01
    475a:	82 81       	ldd	r24, Z+2	; 0x02
    475c:	93 81       	ldd	r25, Z+3	; 0x03
    475e:	20 e0       	ldi	r18, 0x00	; 0
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	40 e8       	ldi	r20, 0x80	; 128
    4764:	5f e3       	ldi	r21, 0x3F	; 63
    4766:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    476a:	88 23       	and	r24, r24
    476c:	2c f4       	brge	.+10     	; 0x4778 <Check_Distance_Parallel+0xe6e>
		__ticks = 1;
    476e:	81 e0       	ldi	r24, 0x01	; 1
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	9e af       	std	Y+62, r25	; 0x3e
    4774:	8d af       	std	Y+61, r24	; 0x3d
    4776:	46 c0       	rjmp	.+140    	; 0x4804 <Check_Distance_Parallel+0xefa>
	else if (__tmp > 65535)
    4778:	fe 01       	movw	r30, r28
    477a:	ff 96       	adiw	r30, 0x3f	; 63
    477c:	60 81       	ld	r22, Z
    477e:	71 81       	ldd	r23, Z+1	; 0x01
    4780:	82 81       	ldd	r24, Z+2	; 0x02
    4782:	93 81       	ldd	r25, Z+3	; 0x03
    4784:	20 e0       	ldi	r18, 0x00	; 0
    4786:	3f ef       	ldi	r19, 0xFF	; 255
    4788:	4f e7       	ldi	r20, 0x7F	; 127
    478a:	57 e4       	ldi	r21, 0x47	; 71
    478c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4790:	18 16       	cp	r1, r24
    4792:	64 f5       	brge	.+88     	; 0x47ec <Check_Distance_Parallel+0xee2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4794:	fe 01       	movw	r30, r28
    4796:	ed 5b       	subi	r30, 0xBD	; 189
    4798:	ff 4f       	sbci	r31, 0xFF	; 255
    479a:	60 81       	ld	r22, Z
    479c:	71 81       	ldd	r23, Z+1	; 0x01
    479e:	82 81       	ldd	r24, Z+2	; 0x02
    47a0:	93 81       	ldd	r25, Z+3	; 0x03
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	40 e2       	ldi	r20, 0x20	; 32
    47a8:	51 e4       	ldi	r21, 0x41	; 65
    47aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ae:	dc 01       	movw	r26, r24
    47b0:	cb 01       	movw	r24, r22
    47b2:	bc 01       	movw	r22, r24
    47b4:	cd 01       	movw	r24, r26
    47b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47ba:	dc 01       	movw	r26, r24
    47bc:	cb 01       	movw	r24, r22
    47be:	9e af       	std	Y+62, r25	; 0x3e
    47c0:	8d af       	std	Y+61, r24	; 0x3d
    47c2:	0f c0       	rjmp	.+30     	; 0x47e2 <Check_Distance_Parallel+0xed8>
    47c4:	88 ec       	ldi	r24, 0xC8	; 200
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	9c af       	std	Y+60, r25	; 0x3c
    47ca:	8b af       	std	Y+59, r24	; 0x3b
    47cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    47ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    47d0:	01 97       	sbiw	r24, 0x01	; 1
    47d2:	f1 f7       	brne	.-4      	; 0x47d0 <Check_Distance_Parallel+0xec6>
    47d4:	9c af       	std	Y+60, r25	; 0x3c
    47d6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    47da:	9e ad       	ldd	r25, Y+62	; 0x3e
    47dc:	01 97       	sbiw	r24, 0x01	; 1
    47de:	9e af       	std	Y+62, r25	; 0x3e
    47e0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    47e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    47e6:	00 97       	sbiw	r24, 0x00	; 0
    47e8:	69 f7       	brne	.-38     	; 0x47c4 <Check_Distance_Parallel+0xeba>
    47ea:	16 c0       	rjmp	.+44     	; 0x4818 <Check_Distance_Parallel+0xf0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ec:	fe 01       	movw	r30, r28
    47ee:	ff 96       	adiw	r30, 0x3f	; 63
    47f0:	60 81       	ld	r22, Z
    47f2:	71 81       	ldd	r23, Z+1	; 0x01
    47f4:	82 81       	ldd	r24, Z+2	; 0x02
    47f6:	93 81       	ldd	r25, Z+3	; 0x03
    47f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47fc:	dc 01       	movw	r26, r24
    47fe:	cb 01       	movw	r24, r22
    4800:	9e af       	std	Y+62, r25	; 0x3e
    4802:	8d af       	std	Y+61, r24	; 0x3d
    4804:	8d ad       	ldd	r24, Y+61	; 0x3d
    4806:	9e ad       	ldd	r25, Y+62	; 0x3e
    4808:	9a af       	std	Y+58, r25	; 0x3a
    480a:	89 af       	std	Y+57, r24	; 0x39
    480c:	89 ad       	ldd	r24, Y+57	; 0x39
    480e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4810:	01 97       	sbiw	r24, 0x01	; 1
    4812:	f1 f7       	brne	.-4      	; 0x4810 <Check_Distance_Parallel+0xf06>
    4814:	9a af       	std	Y+58, r25	; 0x3a
    4816:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1000);
		UART_voidSendData(90);
    4818:	8a e5       	ldi	r24, 0x5A	; 90
    481a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    481e:	80 e0       	ldi	r24, 0x00	; 0
    4820:	90 e4       	ldi	r25, 0x40	; 64
    4822:	ac e9       	ldi	r26, 0x9C	; 156
    4824:	b5 e4       	ldi	r27, 0x45	; 69
    4826:	8d ab       	std	Y+53, r24	; 0x35
    4828:	9e ab       	std	Y+54, r25	; 0x36
    482a:	af ab       	std	Y+55, r26	; 0x37
    482c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    482e:	6d a9       	ldd	r22, Y+53	; 0x35
    4830:	7e a9       	ldd	r23, Y+54	; 0x36
    4832:	8f a9       	ldd	r24, Y+55	; 0x37
    4834:	98 ad       	ldd	r25, Y+56	; 0x38
    4836:	20 e0       	ldi	r18, 0x00	; 0
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	4a ef       	ldi	r20, 0xFA	; 250
    483c:	54 e4       	ldi	r21, 0x44	; 68
    483e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4842:	dc 01       	movw	r26, r24
    4844:	cb 01       	movw	r24, r22
    4846:	89 ab       	std	Y+49, r24	; 0x31
    4848:	9a ab       	std	Y+50, r25	; 0x32
    484a:	ab ab       	std	Y+51, r26	; 0x33
    484c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    484e:	69 a9       	ldd	r22, Y+49	; 0x31
    4850:	7a a9       	ldd	r23, Y+50	; 0x32
    4852:	8b a9       	ldd	r24, Y+51	; 0x33
    4854:	9c a9       	ldd	r25, Y+52	; 0x34
    4856:	20 e0       	ldi	r18, 0x00	; 0
    4858:	30 e0       	ldi	r19, 0x00	; 0
    485a:	40 e8       	ldi	r20, 0x80	; 128
    485c:	5f e3       	ldi	r21, 0x3F	; 63
    485e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4862:	88 23       	and	r24, r24
    4864:	2c f4       	brge	.+10     	; 0x4870 <Check_Distance_Parallel+0xf66>
		__ticks = 1;
    4866:	81 e0       	ldi	r24, 0x01	; 1
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	98 ab       	std	Y+48, r25	; 0x30
    486c:	8f a7       	std	Y+47, r24	; 0x2f
    486e:	3f c0       	rjmp	.+126    	; 0x48ee <Check_Distance_Parallel+0xfe4>
	else if (__tmp > 65535)
    4870:	69 a9       	ldd	r22, Y+49	; 0x31
    4872:	7a a9       	ldd	r23, Y+50	; 0x32
    4874:	8b a9       	ldd	r24, Y+51	; 0x33
    4876:	9c a9       	ldd	r25, Y+52	; 0x34
    4878:	20 e0       	ldi	r18, 0x00	; 0
    487a:	3f ef       	ldi	r19, 0xFF	; 255
    487c:	4f e7       	ldi	r20, 0x7F	; 127
    487e:	57 e4       	ldi	r21, 0x47	; 71
    4880:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4884:	18 16       	cp	r1, r24
    4886:	4c f5       	brge	.+82     	; 0x48da <Check_Distance_Parallel+0xfd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4888:	6d a9       	ldd	r22, Y+53	; 0x35
    488a:	7e a9       	ldd	r23, Y+54	; 0x36
    488c:	8f a9       	ldd	r24, Y+55	; 0x37
    488e:	98 ad       	ldd	r25, Y+56	; 0x38
    4890:	20 e0       	ldi	r18, 0x00	; 0
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	40 e2       	ldi	r20, 0x20	; 32
    4896:	51 e4       	ldi	r21, 0x41	; 65
    4898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    489c:	dc 01       	movw	r26, r24
    489e:	cb 01       	movw	r24, r22
    48a0:	bc 01       	movw	r22, r24
    48a2:	cd 01       	movw	r24, r26
    48a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48a8:	dc 01       	movw	r26, r24
    48aa:	cb 01       	movw	r24, r22
    48ac:	98 ab       	std	Y+48, r25	; 0x30
    48ae:	8f a7       	std	Y+47, r24	; 0x2f
    48b0:	0f c0       	rjmp	.+30     	; 0x48d0 <Check_Distance_Parallel+0xfc6>
    48b2:	88 ec       	ldi	r24, 0xC8	; 200
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	9e a7       	std	Y+46, r25	; 0x2e
    48b8:	8d a7       	std	Y+45, r24	; 0x2d
    48ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    48bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    48be:	01 97       	sbiw	r24, 0x01	; 1
    48c0:	f1 f7       	brne	.-4      	; 0x48be <Check_Distance_Parallel+0xfb4>
    48c2:	9e a7       	std	Y+46, r25	; 0x2e
    48c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    48c8:	98 a9       	ldd	r25, Y+48	; 0x30
    48ca:	01 97       	sbiw	r24, 0x01	; 1
    48cc:	98 ab       	std	Y+48, r25	; 0x30
    48ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    48d2:	98 a9       	ldd	r25, Y+48	; 0x30
    48d4:	00 97       	sbiw	r24, 0x00	; 0
    48d6:	69 f7       	brne	.-38     	; 0x48b2 <Check_Distance_Parallel+0xfa8>
    48d8:	14 c0       	rjmp	.+40     	; 0x4902 <Check_Distance_Parallel+0xff8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48da:	69 a9       	ldd	r22, Y+49	; 0x31
    48dc:	7a a9       	ldd	r23, Y+50	; 0x32
    48de:	8b a9       	ldd	r24, Y+51	; 0x33
    48e0:	9c a9       	ldd	r25, Y+52	; 0x34
    48e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e6:	dc 01       	movw	r26, r24
    48e8:	cb 01       	movw	r24, r22
    48ea:	98 ab       	std	Y+48, r25	; 0x30
    48ec:	8f a7       	std	Y+47, r24	; 0x2f
    48ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    48f0:	98 a9       	ldd	r25, Y+48	; 0x30
    48f2:	9c a7       	std	Y+44, r25	; 0x2c
    48f4:	8b a7       	std	Y+43, r24	; 0x2b
    48f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    48f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    48fa:	01 97       	sbiw	r24, 0x01	; 1
    48fc:	f1 f7       	brne	.-4      	; 0x48fa <Check_Distance_Parallel+0xff0>
    48fe:	9c a7       	std	Y+44, r25	; 0x2c
    4900:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5000);
		MOVE_BACKWORD_1_perpindicular(PWM_SPEED_OF_MOTOR_TO_PARK);
    4902:	86 e9       	ldi	r24, 0x96	; 150
    4904:	0e 94 5e 35 	call	0x6abc	; 0x6abc <MOVE_BACKWORD_1_perpindicular>
		MOVE_FORWARD_2_perpindicular(PWM_SPEED_OF_MOTOR_TO_PARK);
    4908:	86 e9       	ldi	r24, 0x96	; 150
    490a:	0e 94 34 35 	call	0x6a68	; 0x6a68 <MOVE_FORWARD_2_perpindicular>
		_delay_ms(time_of_move_perpindicular_park*10);
    490e:	80 91 c5 01 	lds	r24, 0x01C5
    4912:	90 91 c6 01 	lds	r25, 0x01C6
    4916:	a0 91 c7 01 	lds	r26, 0x01C7
    491a:	b0 91 c8 01 	lds	r27, 0x01C8
    491e:	bc 01       	movw	r22, r24
    4920:	cd 01       	movw	r24, r26
    4922:	20 e0       	ldi	r18, 0x00	; 0
    4924:	30 e0       	ldi	r19, 0x00	; 0
    4926:	40 e2       	ldi	r20, 0x20	; 32
    4928:	51 e4       	ldi	r21, 0x41	; 65
    492a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    492e:	dc 01       	movw	r26, r24
    4930:	cb 01       	movw	r24, r22
    4932:	8f a3       	std	Y+39, r24	; 0x27
    4934:	98 a7       	std	Y+40, r25	; 0x28
    4936:	a9 a7       	std	Y+41, r26	; 0x29
    4938:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    493a:	6f a1       	ldd	r22, Y+39	; 0x27
    493c:	78 a5       	ldd	r23, Y+40	; 0x28
    493e:	89 a5       	ldd	r24, Y+41	; 0x29
    4940:	9a a5       	ldd	r25, Y+42	; 0x2a
    4942:	20 e0       	ldi	r18, 0x00	; 0
    4944:	30 e0       	ldi	r19, 0x00	; 0
    4946:	4a ef       	ldi	r20, 0xFA	; 250
    4948:	54 e4       	ldi	r21, 0x44	; 68
    494a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    494e:	dc 01       	movw	r26, r24
    4950:	cb 01       	movw	r24, r22
    4952:	8b a3       	std	Y+35, r24	; 0x23
    4954:	9c a3       	std	Y+36, r25	; 0x24
    4956:	ad a3       	std	Y+37, r26	; 0x25
    4958:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    495a:	6b a1       	ldd	r22, Y+35	; 0x23
    495c:	7c a1       	ldd	r23, Y+36	; 0x24
    495e:	8d a1       	ldd	r24, Y+37	; 0x25
    4960:	9e a1       	ldd	r25, Y+38	; 0x26
    4962:	20 e0       	ldi	r18, 0x00	; 0
    4964:	30 e0       	ldi	r19, 0x00	; 0
    4966:	40 e8       	ldi	r20, 0x80	; 128
    4968:	5f e3       	ldi	r21, 0x3F	; 63
    496a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    496e:	88 23       	and	r24, r24
    4970:	2c f4       	brge	.+10     	; 0x497c <Check_Distance_Parallel+0x1072>
		__ticks = 1;
    4972:	81 e0       	ldi	r24, 0x01	; 1
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	9a a3       	std	Y+34, r25	; 0x22
    4978:	89 a3       	std	Y+33, r24	; 0x21
    497a:	3f c0       	rjmp	.+126    	; 0x49fa <Check_Distance_Parallel+0x10f0>
	else if (__tmp > 65535)
    497c:	6b a1       	ldd	r22, Y+35	; 0x23
    497e:	7c a1       	ldd	r23, Y+36	; 0x24
    4980:	8d a1       	ldd	r24, Y+37	; 0x25
    4982:	9e a1       	ldd	r25, Y+38	; 0x26
    4984:	20 e0       	ldi	r18, 0x00	; 0
    4986:	3f ef       	ldi	r19, 0xFF	; 255
    4988:	4f e7       	ldi	r20, 0x7F	; 127
    498a:	57 e4       	ldi	r21, 0x47	; 71
    498c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4990:	18 16       	cp	r1, r24
    4992:	4c f5       	brge	.+82     	; 0x49e6 <Check_Distance_Parallel+0x10dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4994:	6f a1       	ldd	r22, Y+39	; 0x27
    4996:	78 a5       	ldd	r23, Y+40	; 0x28
    4998:	89 a5       	ldd	r24, Y+41	; 0x29
    499a:	9a a5       	ldd	r25, Y+42	; 0x2a
    499c:	20 e0       	ldi	r18, 0x00	; 0
    499e:	30 e0       	ldi	r19, 0x00	; 0
    49a0:	40 e2       	ldi	r20, 0x20	; 32
    49a2:	51 e4       	ldi	r21, 0x41	; 65
    49a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49a8:	dc 01       	movw	r26, r24
    49aa:	cb 01       	movw	r24, r22
    49ac:	bc 01       	movw	r22, r24
    49ae:	cd 01       	movw	r24, r26
    49b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49b4:	dc 01       	movw	r26, r24
    49b6:	cb 01       	movw	r24, r22
    49b8:	9a a3       	std	Y+34, r25	; 0x22
    49ba:	89 a3       	std	Y+33, r24	; 0x21
    49bc:	0f c0       	rjmp	.+30     	; 0x49dc <Check_Distance_Parallel+0x10d2>
    49be:	88 ec       	ldi	r24, 0xC8	; 200
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	98 a3       	std	Y+32, r25	; 0x20
    49c4:	8f 8f       	std	Y+31, r24	; 0x1f
    49c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    49c8:	98 a1       	ldd	r25, Y+32	; 0x20
    49ca:	01 97       	sbiw	r24, 0x01	; 1
    49cc:	f1 f7       	brne	.-4      	; 0x49ca <Check_Distance_Parallel+0x10c0>
    49ce:	98 a3       	std	Y+32, r25	; 0x20
    49d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49d2:	89 a1       	ldd	r24, Y+33	; 0x21
    49d4:	9a a1       	ldd	r25, Y+34	; 0x22
    49d6:	01 97       	sbiw	r24, 0x01	; 1
    49d8:	9a a3       	std	Y+34, r25	; 0x22
    49da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49dc:	89 a1       	ldd	r24, Y+33	; 0x21
    49de:	9a a1       	ldd	r25, Y+34	; 0x22
    49e0:	00 97       	sbiw	r24, 0x00	; 0
    49e2:	69 f7       	brne	.-38     	; 0x49be <Check_Distance_Parallel+0x10b4>
    49e4:	14 c0       	rjmp	.+40     	; 0x4a0e <Check_Distance_Parallel+0x1104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49e6:	6b a1       	ldd	r22, Y+35	; 0x23
    49e8:	7c a1       	ldd	r23, Y+36	; 0x24
    49ea:	8d a1       	ldd	r24, Y+37	; 0x25
    49ec:	9e a1       	ldd	r25, Y+38	; 0x26
    49ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49f2:	dc 01       	movw	r26, r24
    49f4:	cb 01       	movw	r24, r22
    49f6:	9a a3       	std	Y+34, r25	; 0x22
    49f8:	89 a3       	std	Y+33, r24	; 0x21
    49fa:	89 a1       	ldd	r24, Y+33	; 0x21
    49fc:	9a a1       	ldd	r25, Y+34	; 0x22
    49fe:	9e 8f       	std	Y+30, r25	; 0x1e
    4a00:	8d 8f       	std	Y+29, r24	; 0x1d
    4a02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4a06:	01 97       	sbiw	r24, 0x01	; 1
    4a08:	f1 f7       	brne	.-4      	; 0x4a06 <Check_Distance_Parallel+0x10fc>
    4a0a:	9e 8f       	std	Y+30, r25	; 0x1e
    4a0c:	8d 8f       	std	Y+29, r24	; 0x1d
		STOP_DC_MOTOR();
    4a0e:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
		Set_Angle_Servo_motor_3(0);
    4a12:	80 e0       	ldi	r24, 0x00	; 0
    4a14:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <Set_Angle_Servo_motor_3>
    4a18:	80 e0       	ldi	r24, 0x00	; 0
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
    4a1c:	aa e7       	ldi	r26, 0x7A	; 122
    4a1e:	b4 e4       	ldi	r27, 0x44	; 68
    4a20:	89 8f       	std	Y+25, r24	; 0x19
    4a22:	9a 8f       	std	Y+26, r25	; 0x1a
    4a24:	ab 8f       	std	Y+27, r26	; 0x1b
    4a26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a28:	69 8d       	ldd	r22, Y+25	; 0x19
    4a2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a30:	20 e0       	ldi	r18, 0x00	; 0
    4a32:	30 e0       	ldi	r19, 0x00	; 0
    4a34:	4a ef       	ldi	r20, 0xFA	; 250
    4a36:	54 e4       	ldi	r21, 0x44	; 68
    4a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a3c:	dc 01       	movw	r26, r24
    4a3e:	cb 01       	movw	r24, r22
    4a40:	8d 8b       	std	Y+21, r24	; 0x15
    4a42:	9e 8b       	std	Y+22, r25	; 0x16
    4a44:	af 8b       	std	Y+23, r26	; 0x17
    4a46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a48:	6d 89       	ldd	r22, Y+21	; 0x15
    4a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    4a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	40 e8       	ldi	r20, 0x80	; 128
    4a56:	5f e3       	ldi	r21, 0x3F	; 63
    4a58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a5c:	88 23       	and	r24, r24
    4a5e:	2c f4       	brge	.+10     	; 0x4a6a <Check_Distance_Parallel+0x1160>
		__ticks = 1;
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	9c 8b       	std	Y+20, r25	; 0x14
    4a66:	8b 8b       	std	Y+19, r24	; 0x13
    4a68:	3f c0       	rjmp	.+126    	; 0x4ae8 <Check_Distance_Parallel+0x11de>
	else if (__tmp > 65535)
    4a6a:	6d 89       	ldd	r22, Y+21	; 0x15
    4a6c:	7e 89       	ldd	r23, Y+22	; 0x16
    4a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    4a70:	98 8d       	ldd	r25, Y+24	; 0x18
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	3f ef       	ldi	r19, 0xFF	; 255
    4a76:	4f e7       	ldi	r20, 0x7F	; 127
    4a78:	57 e4       	ldi	r21, 0x47	; 71
    4a7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a7e:	18 16       	cp	r1, r24
    4a80:	4c f5       	brge	.+82     	; 0x4ad4 <Check_Distance_Parallel+0x11ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a82:	69 8d       	ldd	r22, Y+25	; 0x19
    4a84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a8a:	20 e0       	ldi	r18, 0x00	; 0
    4a8c:	30 e0       	ldi	r19, 0x00	; 0
    4a8e:	40 e2       	ldi	r20, 0x20	; 32
    4a90:	51 e4       	ldi	r21, 0x41	; 65
    4a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a96:	dc 01       	movw	r26, r24
    4a98:	cb 01       	movw	r24, r22
    4a9a:	bc 01       	movw	r22, r24
    4a9c:	cd 01       	movw	r24, r26
    4a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aa2:	dc 01       	movw	r26, r24
    4aa4:	cb 01       	movw	r24, r22
    4aa6:	9c 8b       	std	Y+20, r25	; 0x14
    4aa8:	8b 8b       	std	Y+19, r24	; 0x13
    4aaa:	0f c0       	rjmp	.+30     	; 0x4aca <Check_Distance_Parallel+0x11c0>
    4aac:	88 ec       	ldi	r24, 0xC8	; 200
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	9a 8b       	std	Y+18, r25	; 0x12
    4ab2:	89 8b       	std	Y+17, r24	; 0x11
    4ab4:	89 89       	ldd	r24, Y+17	; 0x11
    4ab6:	9a 89       	ldd	r25, Y+18	; 0x12
    4ab8:	01 97       	sbiw	r24, 0x01	; 1
    4aba:	f1 f7       	brne	.-4      	; 0x4ab8 <Check_Distance_Parallel+0x11ae>
    4abc:	9a 8b       	std	Y+18, r25	; 0x12
    4abe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ac4:	01 97       	sbiw	r24, 0x01	; 1
    4ac6:	9c 8b       	std	Y+20, r25	; 0x14
    4ac8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aca:	8b 89       	ldd	r24, Y+19	; 0x13
    4acc:	9c 89       	ldd	r25, Y+20	; 0x14
    4ace:	00 97       	sbiw	r24, 0x00	; 0
    4ad0:	69 f7       	brne	.-38     	; 0x4aac <Check_Distance_Parallel+0x11a2>
    4ad2:	14 c0       	rjmp	.+40     	; 0x4afc <Check_Distance_Parallel+0x11f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ad4:	6d 89       	ldd	r22, Y+21	; 0x15
    4ad6:	7e 89       	ldd	r23, Y+22	; 0x16
    4ad8:	8f 89       	ldd	r24, Y+23	; 0x17
    4ada:	98 8d       	ldd	r25, Y+24	; 0x18
    4adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ae0:	dc 01       	movw	r26, r24
    4ae2:	cb 01       	movw	r24, r22
    4ae4:	9c 8b       	std	Y+20, r25	; 0x14
    4ae6:	8b 8b       	std	Y+19, r24	; 0x13
    4ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    4aea:	9c 89       	ldd	r25, Y+20	; 0x14
    4aec:	98 8b       	std	Y+16, r25	; 0x10
    4aee:	8f 87       	std	Y+15, r24	; 0x0f
    4af0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4af2:	98 89       	ldd	r25, Y+16	; 0x10
    4af4:	01 97       	sbiw	r24, 0x01	; 1
    4af6:	f1 f7       	brne	.-4      	; 0x4af4 <Check_Distance_Parallel+0x11ea>
    4af8:	98 8b       	std	Y+16, r25	; 0x10
    4afa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		UART_voidSendData(0);
    4afc:	80 e0       	ldi	r24, 0x00	; 0
    4afe:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    4b02:	80 e0       	ldi	r24, 0x00	; 0
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	aa e7       	ldi	r26, 0x7A	; 122
    4b08:	b4 e4       	ldi	r27, 0x44	; 68
    4b0a:	8b 87       	std	Y+11, r24	; 0x0b
    4b0c:	9c 87       	std	Y+12, r25	; 0x0c
    4b0e:	ad 87       	std	Y+13, r26	; 0x0d
    4b10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b1a:	20 e0       	ldi	r18, 0x00	; 0
    4b1c:	30 e0       	ldi	r19, 0x00	; 0
    4b1e:	4a ef       	ldi	r20, 0xFA	; 250
    4b20:	54 e4       	ldi	r21, 0x44	; 68
    4b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b26:	dc 01       	movw	r26, r24
    4b28:	cb 01       	movw	r24, r22
    4b2a:	8f 83       	std	Y+7, r24	; 0x07
    4b2c:	98 87       	std	Y+8, r25	; 0x08
    4b2e:	a9 87       	std	Y+9, r26	; 0x09
    4b30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b32:	6f 81       	ldd	r22, Y+7	; 0x07
    4b34:	78 85       	ldd	r23, Y+8	; 0x08
    4b36:	89 85       	ldd	r24, Y+9	; 0x09
    4b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b3a:	20 e0       	ldi	r18, 0x00	; 0
    4b3c:	30 e0       	ldi	r19, 0x00	; 0
    4b3e:	40 e8       	ldi	r20, 0x80	; 128
    4b40:	5f e3       	ldi	r21, 0x3F	; 63
    4b42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b46:	88 23       	and	r24, r24
    4b48:	2c f4       	brge	.+10     	; 0x4b54 <Check_Distance_Parallel+0x124a>
		__ticks = 1;
    4b4a:	81 e0       	ldi	r24, 0x01	; 1
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	9e 83       	std	Y+6, r25	; 0x06
    4b50:	8d 83       	std	Y+5, r24	; 0x05
    4b52:	3f c0       	rjmp	.+126    	; 0x4bd2 <Check_Distance_Parallel+0x12c8>
	else if (__tmp > 65535)
    4b54:	6f 81       	ldd	r22, Y+7	; 0x07
    4b56:	78 85       	ldd	r23, Y+8	; 0x08
    4b58:	89 85       	ldd	r24, Y+9	; 0x09
    4b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b5c:	20 e0       	ldi	r18, 0x00	; 0
    4b5e:	3f ef       	ldi	r19, 0xFF	; 255
    4b60:	4f e7       	ldi	r20, 0x7F	; 127
    4b62:	57 e4       	ldi	r21, 0x47	; 71
    4b64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b68:	18 16       	cp	r1, r24
    4b6a:	4c f5       	brge	.+82     	; 0x4bbe <Check_Distance_Parallel+0x12b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b74:	20 e0       	ldi	r18, 0x00	; 0
    4b76:	30 e0       	ldi	r19, 0x00	; 0
    4b78:	40 e2       	ldi	r20, 0x20	; 32
    4b7a:	51 e4       	ldi	r21, 0x41	; 65
    4b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b80:	dc 01       	movw	r26, r24
    4b82:	cb 01       	movw	r24, r22
    4b84:	bc 01       	movw	r22, r24
    4b86:	cd 01       	movw	r24, r26
    4b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b8c:	dc 01       	movw	r26, r24
    4b8e:	cb 01       	movw	r24, r22
    4b90:	9e 83       	std	Y+6, r25	; 0x06
    4b92:	8d 83       	std	Y+5, r24	; 0x05
    4b94:	0f c0       	rjmp	.+30     	; 0x4bb4 <Check_Distance_Parallel+0x12aa>
    4b96:	88 ec       	ldi	r24, 0xC8	; 200
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	9c 83       	std	Y+4, r25	; 0x04
    4b9c:	8b 83       	std	Y+3, r24	; 0x03
    4b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ba2:	01 97       	sbiw	r24, 0x01	; 1
    4ba4:	f1 f7       	brne	.-4      	; 0x4ba2 <Check_Distance_Parallel+0x1298>
    4ba6:	9c 83       	std	Y+4, r25	; 0x04
    4ba8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4baa:	8d 81       	ldd	r24, Y+5	; 0x05
    4bac:	9e 81       	ldd	r25, Y+6	; 0x06
    4bae:	01 97       	sbiw	r24, 0x01	; 1
    4bb0:	9e 83       	std	Y+6, r25	; 0x06
    4bb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    4bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    4bb8:	00 97       	sbiw	r24, 0x00	; 0
    4bba:	69 f7       	brne	.-38     	; 0x4b96 <Check_Distance_Parallel+0x128c>
    4bbc:	14 c0       	rjmp	.+40     	; 0x4be6 <Check_Distance_Parallel+0x12dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    4bc0:	78 85       	ldd	r23, Y+8	; 0x08
    4bc2:	89 85       	ldd	r24, Y+9	; 0x09
    4bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bca:	dc 01       	movw	r26, r24
    4bcc:	cb 01       	movw	r24, r22
    4bce:	9e 83       	std	Y+6, r25	; 0x06
    4bd0:	8d 83       	std	Y+5, r24	; 0x05
    4bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    4bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    4bd6:	9a 83       	std	Y+2, r25	; 0x02
    4bd8:	89 83       	std	Y+1, r24	; 0x01
    4bda:	89 81       	ldd	r24, Y+1	; 0x01
    4bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bde:	01 97       	sbiw	r24, 0x01	; 1
    4be0:	f1 f7       	brne	.-4      	; 0x4bde <Check_Distance_Parallel+0x12d4>
    4be2:	9a 83       	std	Y+2, r25	; 0x02
    4be4:	89 83       	std	Y+1, r24	; 0x01


	}
*/

}
    4be6:	cc 53       	subi	r28, 0x3C	; 60
    4be8:	df 4f       	sbci	r29, 0xFF	; 255
    4bea:	0f b6       	in	r0, 0x3f	; 63
    4bec:	f8 94       	cli
    4bee:	de bf       	out	0x3e, r29	; 62
    4bf0:	0f be       	out	0x3f, r0	; 63
    4bf2:	cd bf       	out	0x3d, r28	; 61
    4bf4:	cf 91       	pop	r28
    4bf6:	df 91       	pop	r29
    4bf8:	1f 91       	pop	r17
    4bfa:	0f 91       	pop	r16
    4bfc:	08 95       	ret

00004bfe <Check_Distance_exiting>:
void Check_Distance_exiting(void)//check and choose exiting function
{
    4bfe:	0f 93       	push	r16
    4c00:	1f 93       	push	r17
    4c02:	df 93       	push	r29
    4c04:	cf 93       	push	r28
    4c06:	cd b7       	in	r28, 0x3d	; 61
    4c08:	de b7       	in	r29, 0x3e	; 62
    4c0a:	c6 54       	subi	r28, 0x46	; 70
    4c0c:	d0 40       	sbci	r29, 0x00	; 0
    4c0e:	0f b6       	in	r0, 0x3f	; 63
    4c10:	f8 94       	cli
    4c12:	de bf       	out	0x3e, r29	; 62
    4c14:	0f be       	out	0x3f, r0	; 63
    4c16:	cd bf       	out	0x3d, r28	; 61
	count=0;
    4c18:	10 92 b4 01 	sts	0x01B4, r1
	result_of_distance=0;
    4c1c:	10 92 89 01 	sts	0x0189, r1
    4c20:	10 92 88 01 	sts	0x0188, r1
    4c24:	f8 c0       	rjmp	.+496    	; 0x4e16 <Check_Distance_exiting+0x218>
	while(count<4)
	{
		Display_Distance_exit();
    4c26:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <Display_Distance_exit>
		UART_voidSendData(BACK_ULTRASONIC_DISTANCE);
    4c2a:	81 e0       	ldi	r24, 0x01	; 1
    4c2c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
		Ultra_Back_Dis2=UART_u8ReceiveData();
    4c30:	0e 94 75 0b 	call	0x16ea	; 0x16ea <UART_u8ReceiveData>
    4c34:	88 2f       	mov	r24, r24
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	90 93 c4 01 	sts	0x01C4, r25
    4c3c:	80 93 c3 01 	sts	0x01C3, r24

		count++;
    4c40:	80 91 b4 01 	lds	r24, 0x01B4
    4c44:	8f 5f       	subi	r24, 0xFF	; 255
    4c46:	80 93 b4 01 	sts	0x01B4, r24

		//_delay_ms(3000);
		if((Ultra_Front_Dis1+Ultra_Back_Dis2)>40)
    4c4a:	20 91 9c 01 	lds	r18, 0x019C
    4c4e:	30 91 9d 01 	lds	r19, 0x019D
    4c52:	80 91 c3 01 	lds	r24, 0x01C3
    4c56:	90 91 c4 01 	lds	r25, 0x01C4
    4c5a:	82 0f       	add	r24, r18
    4c5c:	93 1f       	adc	r25, r19
    4c5e:	89 32       	cpi	r24, 0x29	; 41
    4c60:	91 05       	cpc	r25, r1
    4c62:	08 f4       	brcc	.+2      	; 0x4c66 <Check_Distance_exiting+0x68>
    4c64:	d8 c0       	rjmp	.+432    	; 0x4e16 <Check_Distance_exiting+0x218>
		{

			if (Ultra_Front_Dis1>40)
    4c66:	80 91 9c 01 	lds	r24, 0x019C
    4c6a:	90 91 9d 01 	lds	r25, 0x019D
    4c6e:	89 32       	cpi	r24, 0x29	; 41
    4c70:	91 05       	cpc	r25, r1
    4c72:	18 f0       	brcs	.+6      	; 0x4c7a <Check_Distance_exiting+0x7c>
			{

				ExitParallel();
    4c74:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <ExitParallel>
    4c78:	d3 c0       	rjmp	.+422    	; 0x4e20 <Check_Distance_exiting+0x222>
				break;
			}
			//if the second check wasn,t enough go to loop again
			else if (Ultra_Front_Dis1<40)
    4c7a:	80 91 9c 01 	lds	r24, 0x019C
    4c7e:	90 91 9d 01 	lds	r25, 0x019D
    4c82:	88 32       	cpi	r24, 0x28	; 40
    4c84:	91 05       	cpc	r25, r1
    4c86:	08 f0       	brcs	.+2      	; 0x4c8a <Check_Distance_exiting+0x8c>
    4c88:	c6 c0       	rjmp	.+396    	; 0x4e16 <Check_Distance_exiting+0x218>
			{
				time_of_move_back_parallel_exit =((lenght-Ultra_Front_Dis1)*100)/REAL_SPEED_OF_MOTOR;
    4c8a:	20 91 6a 01 	lds	r18, 0x016A
    4c8e:	30 91 6b 01 	lds	r19, 0x016B
    4c92:	80 91 9c 01 	lds	r24, 0x019C
    4c96:	90 91 9d 01 	lds	r25, 0x019D
    4c9a:	28 1b       	sub	r18, r24
    4c9c:	39 0b       	sbc	r19, r25
    4c9e:	84 e6       	ldi	r24, 0x64	; 100
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	ac 01       	movw	r20, r24
    4ca4:	24 9f       	mul	r18, r20
    4ca6:	c0 01       	movw	r24, r0
    4ca8:	25 9f       	mul	r18, r21
    4caa:	90 0d       	add	r25, r0
    4cac:	34 9f       	mul	r19, r20
    4cae:	90 0d       	add	r25, r0
    4cb0:	11 24       	eor	r1, r1
    4cb2:	28 e2       	ldi	r18, 0x28	; 40
    4cb4:	30 e0       	ldi	r19, 0x00	; 0
    4cb6:	b9 01       	movw	r22, r18
    4cb8:	0e 94 ae 39 	call	0x735c	; 0x735c <__udivmodhi4>
    4cbc:	cb 01       	movw	r24, r22
    4cbe:	cc 01       	movw	r24, r24
    4cc0:	a0 e0       	ldi	r26, 0x00	; 0
    4cc2:	b0 e0       	ldi	r27, 0x00	; 0
    4cc4:	bc 01       	movw	r22, r24
    4cc6:	cd 01       	movw	r24, r26
    4cc8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4ccc:	dc 01       	movw	r26, r24
    4cce:	cb 01       	movw	r24, r22
    4cd0:	80 93 b7 01 	sts	0x01B7, r24
    4cd4:	90 93 b8 01 	sts	0x01B8, r25
    4cd8:	a0 93 b9 01 	sts	0x01B9, r26
    4cdc:	b0 93 ba 01 	sts	0x01BA, r27
				MOVE_BACKWORD(PWM_SPEED_OF_MOTOR_TO_PARK);
    4ce0:	86 e9       	ldi	r24, 0x96	; 150
    4ce2:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <MOVE_BACKWORD>
				_delay_ms(time_of_move_back_parallel_exit*10);
    4ce6:	80 91 b7 01 	lds	r24, 0x01B7
    4cea:	90 91 b8 01 	lds	r25, 0x01B8
    4cee:	a0 91 b9 01 	lds	r26, 0x01B9
    4cf2:	b0 91 ba 01 	lds	r27, 0x01BA
    4cf6:	bc 01       	movw	r22, r24
    4cf8:	cd 01       	movw	r24, r26
    4cfa:	20 e0       	ldi	r18, 0x00	; 0
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	40 e2       	ldi	r20, 0x20	; 32
    4d00:	51 e4       	ldi	r21, 0x41	; 65
    4d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d06:	dc 01       	movw	r26, r24
    4d08:	cb 01       	movw	r24, r22
    4d0a:	fe 01       	movw	r30, r28
    4d0c:	ed 5b       	subi	r30, 0xBD	; 189
    4d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d10:	80 83       	st	Z, r24
    4d12:	91 83       	std	Z+1, r25	; 0x01
    4d14:	a2 83       	std	Z+2, r26	; 0x02
    4d16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d18:	8e 01       	movw	r16, r28
    4d1a:	01 5c       	subi	r16, 0xC1	; 193
    4d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d1e:	fe 01       	movw	r30, r28
    4d20:	ed 5b       	subi	r30, 0xBD	; 189
    4d22:	ff 4f       	sbci	r31, 0xFF	; 255
    4d24:	60 81       	ld	r22, Z
    4d26:	71 81       	ldd	r23, Z+1	; 0x01
    4d28:	82 81       	ldd	r24, Z+2	; 0x02
    4d2a:	93 81       	ldd	r25, Z+3	; 0x03
    4d2c:	20 e0       	ldi	r18, 0x00	; 0
    4d2e:	30 e0       	ldi	r19, 0x00	; 0
    4d30:	4a ef       	ldi	r20, 0xFA	; 250
    4d32:	54 e4       	ldi	r21, 0x44	; 68
    4d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d38:	dc 01       	movw	r26, r24
    4d3a:	cb 01       	movw	r24, r22
    4d3c:	f8 01       	movw	r30, r16
    4d3e:	80 83       	st	Z, r24
    4d40:	91 83       	std	Z+1, r25	; 0x01
    4d42:	a2 83       	std	Z+2, r26	; 0x02
    4d44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d46:	fe 01       	movw	r30, r28
    4d48:	ff 96       	adiw	r30, 0x3f	; 63
    4d4a:	60 81       	ld	r22, Z
    4d4c:	71 81       	ldd	r23, Z+1	; 0x01
    4d4e:	82 81       	ldd	r24, Z+2	; 0x02
    4d50:	93 81       	ldd	r25, Z+3	; 0x03
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	40 e8       	ldi	r20, 0x80	; 128
    4d58:	5f e3       	ldi	r21, 0x3F	; 63
    4d5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d5e:	88 23       	and	r24, r24
    4d60:	2c f4       	brge	.+10     	; 0x4d6c <Check_Distance_exiting+0x16e>
		__ticks = 1;
    4d62:	81 e0       	ldi	r24, 0x01	; 1
    4d64:	90 e0       	ldi	r25, 0x00	; 0
    4d66:	9e af       	std	Y+62, r25	; 0x3e
    4d68:	8d af       	std	Y+61, r24	; 0x3d
    4d6a:	46 c0       	rjmp	.+140    	; 0x4df8 <Check_Distance_exiting+0x1fa>
	else if (__tmp > 65535)
    4d6c:	fe 01       	movw	r30, r28
    4d6e:	ff 96       	adiw	r30, 0x3f	; 63
    4d70:	60 81       	ld	r22, Z
    4d72:	71 81       	ldd	r23, Z+1	; 0x01
    4d74:	82 81       	ldd	r24, Z+2	; 0x02
    4d76:	93 81       	ldd	r25, Z+3	; 0x03
    4d78:	20 e0       	ldi	r18, 0x00	; 0
    4d7a:	3f ef       	ldi	r19, 0xFF	; 255
    4d7c:	4f e7       	ldi	r20, 0x7F	; 127
    4d7e:	57 e4       	ldi	r21, 0x47	; 71
    4d80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d84:	18 16       	cp	r1, r24
    4d86:	64 f5       	brge	.+88     	; 0x4de0 <Check_Distance_exiting+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d88:	fe 01       	movw	r30, r28
    4d8a:	ed 5b       	subi	r30, 0xBD	; 189
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	60 81       	ld	r22, Z
    4d90:	71 81       	ldd	r23, Z+1	; 0x01
    4d92:	82 81       	ldd	r24, Z+2	; 0x02
    4d94:	93 81       	ldd	r25, Z+3	; 0x03
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	40 e2       	ldi	r20, 0x20	; 32
    4d9c:	51 e4       	ldi	r21, 0x41	; 65
    4d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4da2:	dc 01       	movw	r26, r24
    4da4:	cb 01       	movw	r24, r22
    4da6:	bc 01       	movw	r22, r24
    4da8:	cd 01       	movw	r24, r26
    4daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dae:	dc 01       	movw	r26, r24
    4db0:	cb 01       	movw	r24, r22
    4db2:	9e af       	std	Y+62, r25	; 0x3e
    4db4:	8d af       	std	Y+61, r24	; 0x3d
    4db6:	0f c0       	rjmp	.+30     	; 0x4dd6 <Check_Distance_exiting+0x1d8>
    4db8:	88 ec       	ldi	r24, 0xC8	; 200
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	9c af       	std	Y+60, r25	; 0x3c
    4dbe:	8b af       	std	Y+59, r24	; 0x3b
    4dc0:	8b ad       	ldd	r24, Y+59	; 0x3b
    4dc2:	9c ad       	ldd	r25, Y+60	; 0x3c
    4dc4:	01 97       	sbiw	r24, 0x01	; 1
    4dc6:	f1 f7       	brne	.-4      	; 0x4dc4 <Check_Distance_exiting+0x1c6>
    4dc8:	9c af       	std	Y+60, r25	; 0x3c
    4dca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dcc:	8d ad       	ldd	r24, Y+61	; 0x3d
    4dce:	9e ad       	ldd	r25, Y+62	; 0x3e
    4dd0:	01 97       	sbiw	r24, 0x01	; 1
    4dd2:	9e af       	std	Y+62, r25	; 0x3e
    4dd4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    4dd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    4dda:	00 97       	sbiw	r24, 0x00	; 0
    4ddc:	69 f7       	brne	.-38     	; 0x4db8 <Check_Distance_exiting+0x1ba>
    4dde:	16 c0       	rjmp	.+44     	; 0x4e0c <Check_Distance_exiting+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4de0:	fe 01       	movw	r30, r28
    4de2:	ff 96       	adiw	r30, 0x3f	; 63
    4de4:	60 81       	ld	r22, Z
    4de6:	71 81       	ldd	r23, Z+1	; 0x01
    4de8:	82 81       	ldd	r24, Z+2	; 0x02
    4dea:	93 81       	ldd	r25, Z+3	; 0x03
    4dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4df0:	dc 01       	movw	r26, r24
    4df2:	cb 01       	movw	r24, r22
    4df4:	9e af       	std	Y+62, r25	; 0x3e
    4df6:	8d af       	std	Y+61, r24	; 0x3d
    4df8:	8d ad       	ldd	r24, Y+61	; 0x3d
    4dfa:	9e ad       	ldd	r25, Y+62	; 0x3e
    4dfc:	9a af       	std	Y+58, r25	; 0x3a
    4dfe:	89 af       	std	Y+57, r24	; 0x39
    4e00:	89 ad       	ldd	r24, Y+57	; 0x39
    4e02:	9a ad       	ldd	r25, Y+58	; 0x3a
    4e04:	01 97       	sbiw	r24, 0x01	; 1
    4e06:	f1 f7       	brne	.-4      	; 0x4e04 <Check_Distance_exiting+0x206>
    4e08:	9a af       	std	Y+58, r25	; 0x3a
    4e0a:	89 af       	std	Y+57, r24	; 0x39
				STOP_DC_MOTOR();
    4e0c:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
				ExitParallel();
    4e10:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <ExitParallel>
    4e14:	05 c0       	rjmp	.+10     	; 0x4e20 <Check_Distance_exiting+0x222>
}
void Check_Distance_exiting(void)//check and choose exiting function
{
	count=0;
	result_of_distance=0;
	while(count<4)
    4e16:	80 91 b4 01 	lds	r24, 0x01B4
    4e1a:	84 30       	cpi	r24, 0x04	; 4
    4e1c:	08 f4       	brcc	.+2      	; 0x4e20 <Check_Distance_exiting+0x222>
    4e1e:	03 cf       	rjmp	.-506    	; 0x4c26 <Check_Distance_exiting+0x28>

				break;
			}
		}
	}
	if(count>=4)
    4e20:	80 91 b4 01 	lds	r24, 0x01B4
    4e24:	84 30       	cpi	r24, 0x04	; 4
    4e26:	08 f4       	brcc	.+2      	; 0x4e2a <Check_Distance_exiting+0x22c>
    4e28:	ed c1       	rjmp	.+986    	; 0x5204 <Check_Distance_exiting+0x606>
	{
		Set_Angle_Servo_motor_3(90);
    4e2a:	8a e5       	ldi	r24, 0x5A	; 90
    4e2c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <Set_Angle_Servo_motor_3>
		UART_voidSendData(90);
    4e30:	8a e5       	ldi	r24, 0x5A	; 90
    4e32:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    4e36:	80 e0       	ldi	r24, 0x00	; 0
    4e38:	90 e4       	ldi	r25, 0x40	; 64
    4e3a:	ac e9       	ldi	r26, 0x9C	; 156
    4e3c:	b5 e4       	ldi	r27, 0x45	; 69
    4e3e:	8d ab       	std	Y+53, r24	; 0x35
    4e40:	9e ab       	std	Y+54, r25	; 0x36
    4e42:	af ab       	std	Y+55, r26	; 0x37
    4e44:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e46:	6d a9       	ldd	r22, Y+53	; 0x35
    4e48:	7e a9       	ldd	r23, Y+54	; 0x36
    4e4a:	8f a9       	ldd	r24, Y+55	; 0x37
    4e4c:	98 ad       	ldd	r25, Y+56	; 0x38
    4e4e:	20 e0       	ldi	r18, 0x00	; 0
    4e50:	30 e0       	ldi	r19, 0x00	; 0
    4e52:	4a ef       	ldi	r20, 0xFA	; 250
    4e54:	54 e4       	ldi	r21, 0x44	; 68
    4e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e5a:	dc 01       	movw	r26, r24
    4e5c:	cb 01       	movw	r24, r22
    4e5e:	89 ab       	std	Y+49, r24	; 0x31
    4e60:	9a ab       	std	Y+50, r25	; 0x32
    4e62:	ab ab       	std	Y+51, r26	; 0x33
    4e64:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4e66:	69 a9       	ldd	r22, Y+49	; 0x31
    4e68:	7a a9       	ldd	r23, Y+50	; 0x32
    4e6a:	8b a9       	ldd	r24, Y+51	; 0x33
    4e6c:	9c a9       	ldd	r25, Y+52	; 0x34
    4e6e:	20 e0       	ldi	r18, 0x00	; 0
    4e70:	30 e0       	ldi	r19, 0x00	; 0
    4e72:	40 e8       	ldi	r20, 0x80	; 128
    4e74:	5f e3       	ldi	r21, 0x3F	; 63
    4e76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e7a:	88 23       	and	r24, r24
    4e7c:	2c f4       	brge	.+10     	; 0x4e88 <Check_Distance_exiting+0x28a>
		__ticks = 1;
    4e7e:	81 e0       	ldi	r24, 0x01	; 1
    4e80:	90 e0       	ldi	r25, 0x00	; 0
    4e82:	98 ab       	std	Y+48, r25	; 0x30
    4e84:	8f a7       	std	Y+47, r24	; 0x2f
    4e86:	3f c0       	rjmp	.+126    	; 0x4f06 <Check_Distance_exiting+0x308>
	else if (__tmp > 65535)
    4e88:	69 a9       	ldd	r22, Y+49	; 0x31
    4e8a:	7a a9       	ldd	r23, Y+50	; 0x32
    4e8c:	8b a9       	ldd	r24, Y+51	; 0x33
    4e8e:	9c a9       	ldd	r25, Y+52	; 0x34
    4e90:	20 e0       	ldi	r18, 0x00	; 0
    4e92:	3f ef       	ldi	r19, 0xFF	; 255
    4e94:	4f e7       	ldi	r20, 0x7F	; 127
    4e96:	57 e4       	ldi	r21, 0x47	; 71
    4e98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e9c:	18 16       	cp	r1, r24
    4e9e:	4c f5       	brge	.+82     	; 0x4ef2 <Check_Distance_exiting+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ea0:	6d a9       	ldd	r22, Y+53	; 0x35
    4ea2:	7e a9       	ldd	r23, Y+54	; 0x36
    4ea4:	8f a9       	ldd	r24, Y+55	; 0x37
    4ea6:	98 ad       	ldd	r25, Y+56	; 0x38
    4ea8:	20 e0       	ldi	r18, 0x00	; 0
    4eaa:	30 e0       	ldi	r19, 0x00	; 0
    4eac:	40 e2       	ldi	r20, 0x20	; 32
    4eae:	51 e4       	ldi	r21, 0x41	; 65
    4eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eb4:	dc 01       	movw	r26, r24
    4eb6:	cb 01       	movw	r24, r22
    4eb8:	bc 01       	movw	r22, r24
    4eba:	cd 01       	movw	r24, r26
    4ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ec0:	dc 01       	movw	r26, r24
    4ec2:	cb 01       	movw	r24, r22
    4ec4:	98 ab       	std	Y+48, r25	; 0x30
    4ec6:	8f a7       	std	Y+47, r24	; 0x2f
    4ec8:	0f c0       	rjmp	.+30     	; 0x4ee8 <Check_Distance_exiting+0x2ea>
    4eca:	88 ec       	ldi	r24, 0xC8	; 200
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	9e a7       	std	Y+46, r25	; 0x2e
    4ed0:	8d a7       	std	Y+45, r24	; 0x2d
    4ed2:	8d a5       	ldd	r24, Y+45	; 0x2d
    4ed4:	9e a5       	ldd	r25, Y+46	; 0x2e
    4ed6:	01 97       	sbiw	r24, 0x01	; 1
    4ed8:	f1 f7       	brne	.-4      	; 0x4ed6 <Check_Distance_exiting+0x2d8>
    4eda:	9e a7       	std	Y+46, r25	; 0x2e
    4edc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ede:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ee0:	98 a9       	ldd	r25, Y+48	; 0x30
    4ee2:	01 97       	sbiw	r24, 0x01	; 1
    4ee4:	98 ab       	std	Y+48, r25	; 0x30
    4ee6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ee8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4eea:	98 a9       	ldd	r25, Y+48	; 0x30
    4eec:	00 97       	sbiw	r24, 0x00	; 0
    4eee:	69 f7       	brne	.-38     	; 0x4eca <Check_Distance_exiting+0x2cc>
    4ef0:	14 c0       	rjmp	.+40     	; 0x4f1a <Check_Distance_exiting+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ef2:	69 a9       	ldd	r22, Y+49	; 0x31
    4ef4:	7a a9       	ldd	r23, Y+50	; 0x32
    4ef6:	8b a9       	ldd	r24, Y+51	; 0x33
    4ef8:	9c a9       	ldd	r25, Y+52	; 0x34
    4efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4efe:	dc 01       	movw	r26, r24
    4f00:	cb 01       	movw	r24, r22
    4f02:	98 ab       	std	Y+48, r25	; 0x30
    4f04:	8f a7       	std	Y+47, r24	; 0x2f
    4f06:	8f a5       	ldd	r24, Y+47	; 0x2f
    4f08:	98 a9       	ldd	r25, Y+48	; 0x30
    4f0a:	9c a7       	std	Y+44, r25	; 0x2c
    4f0c:	8b a7       	std	Y+43, r24	; 0x2b
    4f0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4f10:	9c a5       	ldd	r25, Y+44	; 0x2c
    4f12:	01 97       	sbiw	r24, 0x01	; 1
    4f14:	f1 f7       	brne	.-4      	; 0x4f12 <Check_Distance_exiting+0x314>
    4f16:	9c a7       	std	Y+44, r25	; 0x2c
    4f18:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5000);
		MOVE_FORWARD_1_perpindicular(PWM_SPEED_OF_MOTOR_TO_PARK);
    4f1a:	86 e9       	ldi	r24, 0x96	; 150
    4f1c:	0e 94 88 35 	call	0x6b10	; 0x6b10 <MOVE_FORWARD_1_perpindicular>
		MOVE_BACKWORD_2_perpindicular(PWM_SPEED_OF_MOTOR_TO_PARK);
    4f20:	86 e9       	ldi	r24, 0x96	; 150
    4f22:	0e 94 12 35 	call	0x6a24	; 0x6a24 <MOVE_BACKWORD_2_perpindicular>
		_delay_ms(time_of_move_perpindicular_park*10);
    4f26:	80 91 c5 01 	lds	r24, 0x01C5
    4f2a:	90 91 c6 01 	lds	r25, 0x01C6
    4f2e:	a0 91 c7 01 	lds	r26, 0x01C7
    4f32:	b0 91 c8 01 	lds	r27, 0x01C8
    4f36:	bc 01       	movw	r22, r24
    4f38:	cd 01       	movw	r24, r26
    4f3a:	20 e0       	ldi	r18, 0x00	; 0
    4f3c:	30 e0       	ldi	r19, 0x00	; 0
    4f3e:	40 e2       	ldi	r20, 0x20	; 32
    4f40:	51 e4       	ldi	r21, 0x41	; 65
    4f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f46:	dc 01       	movw	r26, r24
    4f48:	cb 01       	movw	r24, r22
    4f4a:	8f a3       	std	Y+39, r24	; 0x27
    4f4c:	98 a7       	std	Y+40, r25	; 0x28
    4f4e:	a9 a7       	std	Y+41, r26	; 0x29
    4f50:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f52:	6f a1       	ldd	r22, Y+39	; 0x27
    4f54:	78 a5       	ldd	r23, Y+40	; 0x28
    4f56:	89 a5       	ldd	r24, Y+41	; 0x29
    4f58:	9a a5       	ldd	r25, Y+42	; 0x2a
    4f5a:	20 e0       	ldi	r18, 0x00	; 0
    4f5c:	30 e0       	ldi	r19, 0x00	; 0
    4f5e:	4a ef       	ldi	r20, 0xFA	; 250
    4f60:	54 e4       	ldi	r21, 0x44	; 68
    4f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f66:	dc 01       	movw	r26, r24
    4f68:	cb 01       	movw	r24, r22
    4f6a:	8b a3       	std	Y+35, r24	; 0x23
    4f6c:	9c a3       	std	Y+36, r25	; 0x24
    4f6e:	ad a3       	std	Y+37, r26	; 0x25
    4f70:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4f72:	6b a1       	ldd	r22, Y+35	; 0x23
    4f74:	7c a1       	ldd	r23, Y+36	; 0x24
    4f76:	8d a1       	ldd	r24, Y+37	; 0x25
    4f78:	9e a1       	ldd	r25, Y+38	; 0x26
    4f7a:	20 e0       	ldi	r18, 0x00	; 0
    4f7c:	30 e0       	ldi	r19, 0x00	; 0
    4f7e:	40 e8       	ldi	r20, 0x80	; 128
    4f80:	5f e3       	ldi	r21, 0x3F	; 63
    4f82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f86:	88 23       	and	r24, r24
    4f88:	2c f4       	brge	.+10     	; 0x4f94 <Check_Distance_exiting+0x396>
		__ticks = 1;
    4f8a:	81 e0       	ldi	r24, 0x01	; 1
    4f8c:	90 e0       	ldi	r25, 0x00	; 0
    4f8e:	9a a3       	std	Y+34, r25	; 0x22
    4f90:	89 a3       	std	Y+33, r24	; 0x21
    4f92:	3f c0       	rjmp	.+126    	; 0x5012 <Check_Distance_exiting+0x414>
	else if (__tmp > 65535)
    4f94:	6b a1       	ldd	r22, Y+35	; 0x23
    4f96:	7c a1       	ldd	r23, Y+36	; 0x24
    4f98:	8d a1       	ldd	r24, Y+37	; 0x25
    4f9a:	9e a1       	ldd	r25, Y+38	; 0x26
    4f9c:	20 e0       	ldi	r18, 0x00	; 0
    4f9e:	3f ef       	ldi	r19, 0xFF	; 255
    4fa0:	4f e7       	ldi	r20, 0x7F	; 127
    4fa2:	57 e4       	ldi	r21, 0x47	; 71
    4fa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fa8:	18 16       	cp	r1, r24
    4faa:	4c f5       	brge	.+82     	; 0x4ffe <Check_Distance_exiting+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fac:	6f a1       	ldd	r22, Y+39	; 0x27
    4fae:	78 a5       	ldd	r23, Y+40	; 0x28
    4fb0:	89 a5       	ldd	r24, Y+41	; 0x29
    4fb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    4fb4:	20 e0       	ldi	r18, 0x00	; 0
    4fb6:	30 e0       	ldi	r19, 0x00	; 0
    4fb8:	40 e2       	ldi	r20, 0x20	; 32
    4fba:	51 e4       	ldi	r21, 0x41	; 65
    4fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fc0:	dc 01       	movw	r26, r24
    4fc2:	cb 01       	movw	r24, r22
    4fc4:	bc 01       	movw	r22, r24
    4fc6:	cd 01       	movw	r24, r26
    4fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fcc:	dc 01       	movw	r26, r24
    4fce:	cb 01       	movw	r24, r22
    4fd0:	9a a3       	std	Y+34, r25	; 0x22
    4fd2:	89 a3       	std	Y+33, r24	; 0x21
    4fd4:	0f c0       	rjmp	.+30     	; 0x4ff4 <Check_Distance_exiting+0x3f6>
    4fd6:	88 ec       	ldi	r24, 0xC8	; 200
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	98 a3       	std	Y+32, r25	; 0x20
    4fdc:	8f 8f       	std	Y+31, r24	; 0x1f
    4fde:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4fe0:	98 a1       	ldd	r25, Y+32	; 0x20
    4fe2:	01 97       	sbiw	r24, 0x01	; 1
    4fe4:	f1 f7       	brne	.-4      	; 0x4fe2 <Check_Distance_exiting+0x3e4>
    4fe6:	98 a3       	std	Y+32, r25	; 0x20
    4fe8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fea:	89 a1       	ldd	r24, Y+33	; 0x21
    4fec:	9a a1       	ldd	r25, Y+34	; 0x22
    4fee:	01 97       	sbiw	r24, 0x01	; 1
    4ff0:	9a a3       	std	Y+34, r25	; 0x22
    4ff2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ff4:	89 a1       	ldd	r24, Y+33	; 0x21
    4ff6:	9a a1       	ldd	r25, Y+34	; 0x22
    4ff8:	00 97       	sbiw	r24, 0x00	; 0
    4ffa:	69 f7       	brne	.-38     	; 0x4fd6 <Check_Distance_exiting+0x3d8>
    4ffc:	14 c0       	rjmp	.+40     	; 0x5026 <Check_Distance_exiting+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ffe:	6b a1       	ldd	r22, Y+35	; 0x23
    5000:	7c a1       	ldd	r23, Y+36	; 0x24
    5002:	8d a1       	ldd	r24, Y+37	; 0x25
    5004:	9e a1       	ldd	r25, Y+38	; 0x26
    5006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    500a:	dc 01       	movw	r26, r24
    500c:	cb 01       	movw	r24, r22
    500e:	9a a3       	std	Y+34, r25	; 0x22
    5010:	89 a3       	std	Y+33, r24	; 0x21
    5012:	89 a1       	ldd	r24, Y+33	; 0x21
    5014:	9a a1       	ldd	r25, Y+34	; 0x22
    5016:	9e 8f       	std	Y+30, r25	; 0x1e
    5018:	8d 8f       	std	Y+29, r24	; 0x1d
    501a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    501c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    501e:	01 97       	sbiw	r24, 0x01	; 1
    5020:	f1 f7       	brne	.-4      	; 0x501e <Check_Distance_exiting+0x420>
    5022:	9e 8f       	std	Y+30, r25	; 0x1e
    5024:	8d 8f       	std	Y+29, r24	; 0x1d
		STOP_DC_MOTOR();
    5026:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
		UART_voidSendData(45);
    502a:	8d e2       	ldi	r24, 0x2D	; 45
    502c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    5030:	80 e0       	ldi	r24, 0x00	; 0
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	aa e7       	ldi	r26, 0x7A	; 122
    5036:	b4 e4       	ldi	r27, 0x44	; 68
    5038:	89 8f       	std	Y+25, r24	; 0x19
    503a:	9a 8f       	std	Y+26, r25	; 0x1a
    503c:	ab 8f       	std	Y+27, r26	; 0x1b
    503e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5040:	69 8d       	ldd	r22, Y+25	; 0x19
    5042:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5044:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5046:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5048:	20 e0       	ldi	r18, 0x00	; 0
    504a:	30 e0       	ldi	r19, 0x00	; 0
    504c:	4a ef       	ldi	r20, 0xFA	; 250
    504e:	54 e4       	ldi	r21, 0x44	; 68
    5050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5054:	dc 01       	movw	r26, r24
    5056:	cb 01       	movw	r24, r22
    5058:	8d 8b       	std	Y+21, r24	; 0x15
    505a:	9e 8b       	std	Y+22, r25	; 0x16
    505c:	af 8b       	std	Y+23, r26	; 0x17
    505e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5060:	6d 89       	ldd	r22, Y+21	; 0x15
    5062:	7e 89       	ldd	r23, Y+22	; 0x16
    5064:	8f 89       	ldd	r24, Y+23	; 0x17
    5066:	98 8d       	ldd	r25, Y+24	; 0x18
    5068:	20 e0       	ldi	r18, 0x00	; 0
    506a:	30 e0       	ldi	r19, 0x00	; 0
    506c:	40 e8       	ldi	r20, 0x80	; 128
    506e:	5f e3       	ldi	r21, 0x3F	; 63
    5070:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5074:	88 23       	and	r24, r24
    5076:	2c f4       	brge	.+10     	; 0x5082 <Check_Distance_exiting+0x484>
		__ticks = 1;
    5078:	81 e0       	ldi	r24, 0x01	; 1
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	9c 8b       	std	Y+20, r25	; 0x14
    507e:	8b 8b       	std	Y+19, r24	; 0x13
    5080:	3f c0       	rjmp	.+126    	; 0x5100 <Check_Distance_exiting+0x502>
	else if (__tmp > 65535)
    5082:	6d 89       	ldd	r22, Y+21	; 0x15
    5084:	7e 89       	ldd	r23, Y+22	; 0x16
    5086:	8f 89       	ldd	r24, Y+23	; 0x17
    5088:	98 8d       	ldd	r25, Y+24	; 0x18
    508a:	20 e0       	ldi	r18, 0x00	; 0
    508c:	3f ef       	ldi	r19, 0xFF	; 255
    508e:	4f e7       	ldi	r20, 0x7F	; 127
    5090:	57 e4       	ldi	r21, 0x47	; 71
    5092:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5096:	18 16       	cp	r1, r24
    5098:	4c f5       	brge	.+82     	; 0x50ec <Check_Distance_exiting+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    509a:	69 8d       	ldd	r22, Y+25	; 0x19
    509c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    509e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50a2:	20 e0       	ldi	r18, 0x00	; 0
    50a4:	30 e0       	ldi	r19, 0x00	; 0
    50a6:	40 e2       	ldi	r20, 0x20	; 32
    50a8:	51 e4       	ldi	r21, 0x41	; 65
    50aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50ae:	dc 01       	movw	r26, r24
    50b0:	cb 01       	movw	r24, r22
    50b2:	bc 01       	movw	r22, r24
    50b4:	cd 01       	movw	r24, r26
    50b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ba:	dc 01       	movw	r26, r24
    50bc:	cb 01       	movw	r24, r22
    50be:	9c 8b       	std	Y+20, r25	; 0x14
    50c0:	8b 8b       	std	Y+19, r24	; 0x13
    50c2:	0f c0       	rjmp	.+30     	; 0x50e2 <Check_Distance_exiting+0x4e4>
    50c4:	88 ec       	ldi	r24, 0xC8	; 200
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	9a 8b       	std	Y+18, r25	; 0x12
    50ca:	89 8b       	std	Y+17, r24	; 0x11
    50cc:	89 89       	ldd	r24, Y+17	; 0x11
    50ce:	9a 89       	ldd	r25, Y+18	; 0x12
    50d0:	01 97       	sbiw	r24, 0x01	; 1
    50d2:	f1 f7       	brne	.-4      	; 0x50d0 <Check_Distance_exiting+0x4d2>
    50d4:	9a 8b       	std	Y+18, r25	; 0x12
    50d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50d8:	8b 89       	ldd	r24, Y+19	; 0x13
    50da:	9c 89       	ldd	r25, Y+20	; 0x14
    50dc:	01 97       	sbiw	r24, 0x01	; 1
    50de:	9c 8b       	std	Y+20, r25	; 0x14
    50e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50e2:	8b 89       	ldd	r24, Y+19	; 0x13
    50e4:	9c 89       	ldd	r25, Y+20	; 0x14
    50e6:	00 97       	sbiw	r24, 0x00	; 0
    50e8:	69 f7       	brne	.-38     	; 0x50c4 <Check_Distance_exiting+0x4c6>
    50ea:	14 c0       	rjmp	.+40     	; 0x5114 <Check_Distance_exiting+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50ec:	6d 89       	ldd	r22, Y+21	; 0x15
    50ee:	7e 89       	ldd	r23, Y+22	; 0x16
    50f0:	8f 89       	ldd	r24, Y+23	; 0x17
    50f2:	98 8d       	ldd	r25, Y+24	; 0x18
    50f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50f8:	dc 01       	movw	r26, r24
    50fa:	cb 01       	movw	r24, r22
    50fc:	9c 8b       	std	Y+20, r25	; 0x14
    50fe:	8b 8b       	std	Y+19, r24	; 0x13
    5100:	8b 89       	ldd	r24, Y+19	; 0x13
    5102:	9c 89       	ldd	r25, Y+20	; 0x14
    5104:	98 8b       	std	Y+16, r25	; 0x10
    5106:	8f 87       	std	Y+15, r24	; 0x0f
    5108:	8f 85       	ldd	r24, Y+15	; 0x0f
    510a:	98 89       	ldd	r25, Y+16	; 0x10
    510c:	01 97       	sbiw	r24, 0x01	; 1
    510e:	f1 f7       	brne	.-4      	; 0x510c <Check_Distance_exiting+0x50e>
    5110:	98 8b       	std	Y+16, r25	; 0x10
    5112:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		UART_voidSendData(0);
    5114:	80 e0       	ldi	r24, 0x00	; 0
    5116:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
		//_delay_ms(1000);
		Set_Angle_Servo_motor_3(0);
    511a:	80 e0       	ldi	r24, 0x00	; 0
    511c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <Set_Angle_Servo_motor_3>
    5120:	80 e0       	ldi	r24, 0x00	; 0
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	aa e7       	ldi	r26, 0x7A	; 122
    5126:	b4 e4       	ldi	r27, 0x44	; 68
    5128:	8b 87       	std	Y+11, r24	; 0x0b
    512a:	9c 87       	std	Y+12, r25	; 0x0c
    512c:	ad 87       	std	Y+13, r26	; 0x0d
    512e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5130:	6b 85       	ldd	r22, Y+11	; 0x0b
    5132:	7c 85       	ldd	r23, Y+12	; 0x0c
    5134:	8d 85       	ldd	r24, Y+13	; 0x0d
    5136:	9e 85       	ldd	r25, Y+14	; 0x0e
    5138:	20 e0       	ldi	r18, 0x00	; 0
    513a:	30 e0       	ldi	r19, 0x00	; 0
    513c:	4a ef       	ldi	r20, 0xFA	; 250
    513e:	54 e4       	ldi	r21, 0x44	; 68
    5140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5144:	dc 01       	movw	r26, r24
    5146:	cb 01       	movw	r24, r22
    5148:	8f 83       	std	Y+7, r24	; 0x07
    514a:	98 87       	std	Y+8, r25	; 0x08
    514c:	a9 87       	std	Y+9, r26	; 0x09
    514e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5150:	6f 81       	ldd	r22, Y+7	; 0x07
    5152:	78 85       	ldd	r23, Y+8	; 0x08
    5154:	89 85       	ldd	r24, Y+9	; 0x09
    5156:	9a 85       	ldd	r25, Y+10	; 0x0a
    5158:	20 e0       	ldi	r18, 0x00	; 0
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	40 e8       	ldi	r20, 0x80	; 128
    515e:	5f e3       	ldi	r21, 0x3F	; 63
    5160:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5164:	88 23       	and	r24, r24
    5166:	2c f4       	brge	.+10     	; 0x5172 <Check_Distance_exiting+0x574>
		__ticks = 1;
    5168:	81 e0       	ldi	r24, 0x01	; 1
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	9e 83       	std	Y+6, r25	; 0x06
    516e:	8d 83       	std	Y+5, r24	; 0x05
    5170:	3f c0       	rjmp	.+126    	; 0x51f0 <Check_Distance_exiting+0x5f2>
	else if (__tmp > 65535)
    5172:	6f 81       	ldd	r22, Y+7	; 0x07
    5174:	78 85       	ldd	r23, Y+8	; 0x08
    5176:	89 85       	ldd	r24, Y+9	; 0x09
    5178:	9a 85       	ldd	r25, Y+10	; 0x0a
    517a:	20 e0       	ldi	r18, 0x00	; 0
    517c:	3f ef       	ldi	r19, 0xFF	; 255
    517e:	4f e7       	ldi	r20, 0x7F	; 127
    5180:	57 e4       	ldi	r21, 0x47	; 71
    5182:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5186:	18 16       	cp	r1, r24
    5188:	4c f5       	brge	.+82     	; 0x51dc <Check_Distance_exiting+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    518a:	6b 85       	ldd	r22, Y+11	; 0x0b
    518c:	7c 85       	ldd	r23, Y+12	; 0x0c
    518e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5190:	9e 85       	ldd	r25, Y+14	; 0x0e
    5192:	20 e0       	ldi	r18, 0x00	; 0
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	40 e2       	ldi	r20, 0x20	; 32
    5198:	51 e4       	ldi	r21, 0x41	; 65
    519a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    519e:	dc 01       	movw	r26, r24
    51a0:	cb 01       	movw	r24, r22
    51a2:	bc 01       	movw	r22, r24
    51a4:	cd 01       	movw	r24, r26
    51a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51aa:	dc 01       	movw	r26, r24
    51ac:	cb 01       	movw	r24, r22
    51ae:	9e 83       	std	Y+6, r25	; 0x06
    51b0:	8d 83       	std	Y+5, r24	; 0x05
    51b2:	0f c0       	rjmp	.+30     	; 0x51d2 <Check_Distance_exiting+0x5d4>
    51b4:	88 ec       	ldi	r24, 0xC8	; 200
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	9c 83       	std	Y+4, r25	; 0x04
    51ba:	8b 83       	std	Y+3, r24	; 0x03
    51bc:	8b 81       	ldd	r24, Y+3	; 0x03
    51be:	9c 81       	ldd	r25, Y+4	; 0x04
    51c0:	01 97       	sbiw	r24, 0x01	; 1
    51c2:	f1 f7       	brne	.-4      	; 0x51c0 <Check_Distance_exiting+0x5c2>
    51c4:	9c 83       	std	Y+4, r25	; 0x04
    51c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51c8:	8d 81       	ldd	r24, Y+5	; 0x05
    51ca:	9e 81       	ldd	r25, Y+6	; 0x06
    51cc:	01 97       	sbiw	r24, 0x01	; 1
    51ce:	9e 83       	std	Y+6, r25	; 0x06
    51d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51d2:	8d 81       	ldd	r24, Y+5	; 0x05
    51d4:	9e 81       	ldd	r25, Y+6	; 0x06
    51d6:	00 97       	sbiw	r24, 0x00	; 0
    51d8:	69 f7       	brne	.-38     	; 0x51b4 <Check_Distance_exiting+0x5b6>
    51da:	14 c0       	rjmp	.+40     	; 0x5204 <Check_Distance_exiting+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51dc:	6f 81       	ldd	r22, Y+7	; 0x07
    51de:	78 85       	ldd	r23, Y+8	; 0x08
    51e0:	89 85       	ldd	r24, Y+9	; 0x09
    51e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    51e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51e8:	dc 01       	movw	r26, r24
    51ea:	cb 01       	movw	r24, r22
    51ec:	9e 83       	std	Y+6, r25	; 0x06
    51ee:	8d 83       	std	Y+5, r24	; 0x05
    51f0:	8d 81       	ldd	r24, Y+5	; 0x05
    51f2:	9e 81       	ldd	r25, Y+6	; 0x06
    51f4:	9a 83       	std	Y+2, r25	; 0x02
    51f6:	89 83       	std	Y+1, r24	; 0x01
    51f8:	89 81       	ldd	r24, Y+1	; 0x01
    51fa:	9a 81       	ldd	r25, Y+2	; 0x02
    51fc:	01 97       	sbiw	r24, 0x01	; 1
    51fe:	f1 f7       	brne	.-4      	; 0x51fc <Check_Distance_exiting+0x5fe>
    5200:	9a 83       	std	Y+2, r25	; 0x02
    5202:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);

	}


}
    5204:	ca 5b       	subi	r28, 0xBA	; 186
    5206:	df 4f       	sbci	r29, 0xFF	; 255
    5208:	0f b6       	in	r0, 0x3f	; 63
    520a:	f8 94       	cli
    520c:	de bf       	out	0x3e, r29	; 62
    520e:	0f be       	out	0x3f, r0	; 63
    5210:	cd bf       	out	0x3d, r28	; 61
    5212:	cf 91       	pop	r28
    5214:	df 91       	pop	r29
    5216:	1f 91       	pop	r17
    5218:	0f 91       	pop	r16
    521a:	08 95       	ret

0000521c <Parallel_Parking>:


void Parallel_Parking(void)
{
    521c:	0f 93       	push	r16
    521e:	1f 93       	push	r17
    5220:	df 93       	push	r29
    5222:	cf 93       	push	r28
    5224:	cd b7       	in	r28, 0x3d	; 61
    5226:	de b7       	in	r29, 0x3e	; 62
    5228:	cc 5f       	subi	r28, 0xFC	; 252
    522a:	d0 40       	sbci	r29, 0x00	; 0
    522c:	0f b6       	in	r0, 0x3f	; 63
    522e:	f8 94       	cli
    5230:	de bf       	out	0x3e, r29	; 62
    5232:	0f be       	out	0x3f, r0	; 63
    5234:	cd bf       	out	0x3d, r28	; 61

	count=0;
    5236:	10 92 b4 01 	sts	0x01B4, r1
	STOP_DC_MOTOR();
    523a:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
	MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
    523e:	86 e9       	ldi	r24, 0x96	; 150
    5240:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <MOVE_FORWARD>
	_delay_ms(time_of_extra_space_for_parking_after_check*10);//equation done time_of_extra_space_for_parking_after_check
    5244:	80 91 a8 01 	lds	r24, 0x01A8
    5248:	90 91 a9 01 	lds	r25, 0x01A9
    524c:	a0 91 aa 01 	lds	r26, 0x01AA
    5250:	b0 91 ab 01 	lds	r27, 0x01AB
    5254:	bc 01       	movw	r22, r24
    5256:	cd 01       	movw	r24, r26
    5258:	20 e0       	ldi	r18, 0x00	; 0
    525a:	30 e0       	ldi	r19, 0x00	; 0
    525c:	40 e2       	ldi	r20, 0x20	; 32
    525e:	51 e4       	ldi	r21, 0x41	; 65
    5260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5264:	dc 01       	movw	r26, r24
    5266:	cb 01       	movw	r24, r22
    5268:	fe 01       	movw	r30, r28
    526a:	e7 50       	subi	r30, 0x07	; 7
    526c:	ff 4f       	sbci	r31, 0xFF	; 255
    526e:	80 83       	st	Z, r24
    5270:	91 83       	std	Z+1, r25	; 0x01
    5272:	a2 83       	std	Z+2, r26	; 0x02
    5274:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5276:	8e 01       	movw	r16, r28
    5278:	0b 50       	subi	r16, 0x0B	; 11
    527a:	1f 4f       	sbci	r17, 0xFF	; 255
    527c:	fe 01       	movw	r30, r28
    527e:	e7 50       	subi	r30, 0x07	; 7
    5280:	ff 4f       	sbci	r31, 0xFF	; 255
    5282:	60 81       	ld	r22, Z
    5284:	71 81       	ldd	r23, Z+1	; 0x01
    5286:	82 81       	ldd	r24, Z+2	; 0x02
    5288:	93 81       	ldd	r25, Z+3	; 0x03
    528a:	20 e0       	ldi	r18, 0x00	; 0
    528c:	30 e0       	ldi	r19, 0x00	; 0
    528e:	4a ef       	ldi	r20, 0xFA	; 250
    5290:	54 e4       	ldi	r21, 0x44	; 68
    5292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5296:	dc 01       	movw	r26, r24
    5298:	cb 01       	movw	r24, r22
    529a:	f8 01       	movw	r30, r16
    529c:	80 83       	st	Z, r24
    529e:	91 83       	std	Z+1, r25	; 0x01
    52a0:	a2 83       	std	Z+2, r26	; 0x02
    52a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    52a4:	fe 01       	movw	r30, r28
    52a6:	eb 50       	subi	r30, 0x0B	; 11
    52a8:	ff 4f       	sbci	r31, 0xFF	; 255
    52aa:	60 81       	ld	r22, Z
    52ac:	71 81       	ldd	r23, Z+1	; 0x01
    52ae:	82 81       	ldd	r24, Z+2	; 0x02
    52b0:	93 81       	ldd	r25, Z+3	; 0x03
    52b2:	20 e0       	ldi	r18, 0x00	; 0
    52b4:	30 e0       	ldi	r19, 0x00	; 0
    52b6:	40 e8       	ldi	r20, 0x80	; 128
    52b8:	5f e3       	ldi	r21, 0x3F	; 63
    52ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52be:	88 23       	and	r24, r24
    52c0:	44 f4       	brge	.+16     	; 0x52d2 <Parallel_Parking+0xb6>
		__ticks = 1;
    52c2:	fe 01       	movw	r30, r28
    52c4:	ed 50       	subi	r30, 0x0D	; 13
    52c6:	ff 4f       	sbci	r31, 0xFF	; 255
    52c8:	81 e0       	ldi	r24, 0x01	; 1
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	91 83       	std	Z+1, r25	; 0x01
    52ce:	80 83       	st	Z, r24
    52d0:	64 c0       	rjmp	.+200    	; 0x539a <Parallel_Parking+0x17e>
	else if (__tmp > 65535)
    52d2:	fe 01       	movw	r30, r28
    52d4:	eb 50       	subi	r30, 0x0B	; 11
    52d6:	ff 4f       	sbci	r31, 0xFF	; 255
    52d8:	60 81       	ld	r22, Z
    52da:	71 81       	ldd	r23, Z+1	; 0x01
    52dc:	82 81       	ldd	r24, Z+2	; 0x02
    52de:	93 81       	ldd	r25, Z+3	; 0x03
    52e0:	20 e0       	ldi	r18, 0x00	; 0
    52e2:	3f ef       	ldi	r19, 0xFF	; 255
    52e4:	4f e7       	ldi	r20, 0x7F	; 127
    52e6:	57 e4       	ldi	r21, 0x47	; 71
    52e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52ec:	18 16       	cp	r1, r24
    52ee:	0c f0       	brlt	.+2      	; 0x52f2 <Parallel_Parking+0xd6>
    52f0:	43 c0       	rjmp	.+134    	; 0x5378 <Parallel_Parking+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52f2:	fe 01       	movw	r30, r28
    52f4:	e7 50       	subi	r30, 0x07	; 7
    52f6:	ff 4f       	sbci	r31, 0xFF	; 255
    52f8:	60 81       	ld	r22, Z
    52fa:	71 81       	ldd	r23, Z+1	; 0x01
    52fc:	82 81       	ldd	r24, Z+2	; 0x02
    52fe:	93 81       	ldd	r25, Z+3	; 0x03
    5300:	20 e0       	ldi	r18, 0x00	; 0
    5302:	30 e0       	ldi	r19, 0x00	; 0
    5304:	40 e2       	ldi	r20, 0x20	; 32
    5306:	51 e4       	ldi	r21, 0x41	; 65
    5308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    530c:	dc 01       	movw	r26, r24
    530e:	cb 01       	movw	r24, r22
    5310:	8e 01       	movw	r16, r28
    5312:	0d 50       	subi	r16, 0x0D	; 13
    5314:	1f 4f       	sbci	r17, 0xFF	; 255
    5316:	bc 01       	movw	r22, r24
    5318:	cd 01       	movw	r24, r26
    531a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    531e:	dc 01       	movw	r26, r24
    5320:	cb 01       	movw	r24, r22
    5322:	f8 01       	movw	r30, r16
    5324:	91 83       	std	Z+1, r25	; 0x01
    5326:	80 83       	st	Z, r24
    5328:	1f c0       	rjmp	.+62     	; 0x5368 <Parallel_Parking+0x14c>
    532a:	fe 01       	movw	r30, r28
    532c:	ef 50       	subi	r30, 0x0F	; 15
    532e:	ff 4f       	sbci	r31, 0xFF	; 255
    5330:	88 ec       	ldi	r24, 0xC8	; 200
    5332:	90 e0       	ldi	r25, 0x00	; 0
    5334:	91 83       	std	Z+1, r25	; 0x01
    5336:	80 83       	st	Z, r24
    5338:	fe 01       	movw	r30, r28
    533a:	ef 50       	subi	r30, 0x0F	; 15
    533c:	ff 4f       	sbci	r31, 0xFF	; 255
    533e:	80 81       	ld	r24, Z
    5340:	91 81       	ldd	r25, Z+1	; 0x01
    5342:	01 97       	sbiw	r24, 0x01	; 1
    5344:	f1 f7       	brne	.-4      	; 0x5342 <Parallel_Parking+0x126>
    5346:	fe 01       	movw	r30, r28
    5348:	ef 50       	subi	r30, 0x0F	; 15
    534a:	ff 4f       	sbci	r31, 0xFF	; 255
    534c:	91 83       	std	Z+1, r25	; 0x01
    534e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5350:	de 01       	movw	r26, r28
    5352:	ad 50       	subi	r26, 0x0D	; 13
    5354:	bf 4f       	sbci	r27, 0xFF	; 255
    5356:	fe 01       	movw	r30, r28
    5358:	ed 50       	subi	r30, 0x0D	; 13
    535a:	ff 4f       	sbci	r31, 0xFF	; 255
    535c:	80 81       	ld	r24, Z
    535e:	91 81       	ldd	r25, Z+1	; 0x01
    5360:	01 97       	sbiw	r24, 0x01	; 1
    5362:	11 96       	adiw	r26, 0x01	; 1
    5364:	9c 93       	st	X, r25
    5366:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5368:	fe 01       	movw	r30, r28
    536a:	ed 50       	subi	r30, 0x0D	; 13
    536c:	ff 4f       	sbci	r31, 0xFF	; 255
    536e:	80 81       	ld	r24, Z
    5370:	91 81       	ldd	r25, Z+1	; 0x01
    5372:	00 97       	sbiw	r24, 0x00	; 0
    5374:	d1 f6       	brne	.-76     	; 0x532a <Parallel_Parking+0x10e>
    5376:	27 c0       	rjmp	.+78     	; 0x53c6 <Parallel_Parking+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5378:	8e 01       	movw	r16, r28
    537a:	0d 50       	subi	r16, 0x0D	; 13
    537c:	1f 4f       	sbci	r17, 0xFF	; 255
    537e:	fe 01       	movw	r30, r28
    5380:	eb 50       	subi	r30, 0x0B	; 11
    5382:	ff 4f       	sbci	r31, 0xFF	; 255
    5384:	60 81       	ld	r22, Z
    5386:	71 81       	ldd	r23, Z+1	; 0x01
    5388:	82 81       	ldd	r24, Z+2	; 0x02
    538a:	93 81       	ldd	r25, Z+3	; 0x03
    538c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5390:	dc 01       	movw	r26, r24
    5392:	cb 01       	movw	r24, r22
    5394:	f8 01       	movw	r30, r16
    5396:	91 83       	std	Z+1, r25	; 0x01
    5398:	80 83       	st	Z, r24
    539a:	de 01       	movw	r26, r28
    539c:	a1 51       	subi	r26, 0x11	; 17
    539e:	bf 4f       	sbci	r27, 0xFF	; 255
    53a0:	fe 01       	movw	r30, r28
    53a2:	ed 50       	subi	r30, 0x0D	; 13
    53a4:	ff 4f       	sbci	r31, 0xFF	; 255
    53a6:	80 81       	ld	r24, Z
    53a8:	91 81       	ldd	r25, Z+1	; 0x01
    53aa:	8d 93       	st	X+, r24
    53ac:	9c 93       	st	X, r25
    53ae:	fe 01       	movw	r30, r28
    53b0:	e1 51       	subi	r30, 0x11	; 17
    53b2:	ff 4f       	sbci	r31, 0xFF	; 255
    53b4:	80 81       	ld	r24, Z
    53b6:	91 81       	ldd	r25, Z+1	; 0x01
    53b8:	01 97       	sbiw	r24, 0x01	; 1
    53ba:	f1 f7       	brne	.-4      	; 0x53b8 <Parallel_Parking+0x19c>
    53bc:	fe 01       	movw	r30, r28
    53be:	e1 51       	subi	r30, 0x11	; 17
    53c0:	ff 4f       	sbci	r31, 0xFF	; 255
    53c2:	91 83       	std	Z+1, r25	; 0x01
    53c4:	80 83       	st	Z, r24
	STOP_DC_MOTOR();
    53c6:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
    53ca:	fe 01       	movw	r30, r28
    53cc:	e5 51       	subi	r30, 0x15	; 21
    53ce:	ff 4f       	sbci	r31, 0xFF	; 255
    53d0:	80 e0       	ldi	r24, 0x00	; 0
    53d2:	90 e8       	ldi	r25, 0x80	; 128
    53d4:	ab eb       	ldi	r26, 0xBB	; 187
    53d6:	b4 e4       	ldi	r27, 0x44	; 68
    53d8:	80 83       	st	Z, r24
    53da:	91 83       	std	Z+1, r25	; 0x01
    53dc:	a2 83       	std	Z+2, r26	; 0x02
    53de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53e0:	8e 01       	movw	r16, r28
    53e2:	09 51       	subi	r16, 0x19	; 25
    53e4:	1f 4f       	sbci	r17, 0xFF	; 255
    53e6:	fe 01       	movw	r30, r28
    53e8:	e5 51       	subi	r30, 0x15	; 21
    53ea:	ff 4f       	sbci	r31, 0xFF	; 255
    53ec:	60 81       	ld	r22, Z
    53ee:	71 81       	ldd	r23, Z+1	; 0x01
    53f0:	82 81       	ldd	r24, Z+2	; 0x02
    53f2:	93 81       	ldd	r25, Z+3	; 0x03
    53f4:	20 e0       	ldi	r18, 0x00	; 0
    53f6:	30 e0       	ldi	r19, 0x00	; 0
    53f8:	4a ef       	ldi	r20, 0xFA	; 250
    53fa:	54 e4       	ldi	r21, 0x44	; 68
    53fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5400:	dc 01       	movw	r26, r24
    5402:	cb 01       	movw	r24, r22
    5404:	f8 01       	movw	r30, r16
    5406:	80 83       	st	Z, r24
    5408:	91 83       	std	Z+1, r25	; 0x01
    540a:	a2 83       	std	Z+2, r26	; 0x02
    540c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    540e:	fe 01       	movw	r30, r28
    5410:	e9 51       	subi	r30, 0x19	; 25
    5412:	ff 4f       	sbci	r31, 0xFF	; 255
    5414:	60 81       	ld	r22, Z
    5416:	71 81       	ldd	r23, Z+1	; 0x01
    5418:	82 81       	ldd	r24, Z+2	; 0x02
    541a:	93 81       	ldd	r25, Z+3	; 0x03
    541c:	20 e0       	ldi	r18, 0x00	; 0
    541e:	30 e0       	ldi	r19, 0x00	; 0
    5420:	40 e8       	ldi	r20, 0x80	; 128
    5422:	5f e3       	ldi	r21, 0x3F	; 63
    5424:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5428:	88 23       	and	r24, r24
    542a:	44 f4       	brge	.+16     	; 0x543c <Parallel_Parking+0x220>
		__ticks = 1;
    542c:	fe 01       	movw	r30, r28
    542e:	eb 51       	subi	r30, 0x1B	; 27
    5430:	ff 4f       	sbci	r31, 0xFF	; 255
    5432:	81 e0       	ldi	r24, 0x01	; 1
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	91 83       	std	Z+1, r25	; 0x01
    5438:	80 83       	st	Z, r24
    543a:	64 c0       	rjmp	.+200    	; 0x5504 <Parallel_Parking+0x2e8>
	else if (__tmp > 65535)
    543c:	fe 01       	movw	r30, r28
    543e:	e9 51       	subi	r30, 0x19	; 25
    5440:	ff 4f       	sbci	r31, 0xFF	; 255
    5442:	60 81       	ld	r22, Z
    5444:	71 81       	ldd	r23, Z+1	; 0x01
    5446:	82 81       	ldd	r24, Z+2	; 0x02
    5448:	93 81       	ldd	r25, Z+3	; 0x03
    544a:	20 e0       	ldi	r18, 0x00	; 0
    544c:	3f ef       	ldi	r19, 0xFF	; 255
    544e:	4f e7       	ldi	r20, 0x7F	; 127
    5450:	57 e4       	ldi	r21, 0x47	; 71
    5452:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5456:	18 16       	cp	r1, r24
    5458:	0c f0       	brlt	.+2      	; 0x545c <Parallel_Parking+0x240>
    545a:	43 c0       	rjmp	.+134    	; 0x54e2 <Parallel_Parking+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    545c:	fe 01       	movw	r30, r28
    545e:	e5 51       	subi	r30, 0x15	; 21
    5460:	ff 4f       	sbci	r31, 0xFF	; 255
    5462:	60 81       	ld	r22, Z
    5464:	71 81       	ldd	r23, Z+1	; 0x01
    5466:	82 81       	ldd	r24, Z+2	; 0x02
    5468:	93 81       	ldd	r25, Z+3	; 0x03
    546a:	20 e0       	ldi	r18, 0x00	; 0
    546c:	30 e0       	ldi	r19, 0x00	; 0
    546e:	40 e2       	ldi	r20, 0x20	; 32
    5470:	51 e4       	ldi	r21, 0x41	; 65
    5472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5476:	dc 01       	movw	r26, r24
    5478:	cb 01       	movw	r24, r22
    547a:	8e 01       	movw	r16, r28
    547c:	0b 51       	subi	r16, 0x1B	; 27
    547e:	1f 4f       	sbci	r17, 0xFF	; 255
    5480:	bc 01       	movw	r22, r24
    5482:	cd 01       	movw	r24, r26
    5484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5488:	dc 01       	movw	r26, r24
    548a:	cb 01       	movw	r24, r22
    548c:	f8 01       	movw	r30, r16
    548e:	91 83       	std	Z+1, r25	; 0x01
    5490:	80 83       	st	Z, r24
    5492:	1f c0       	rjmp	.+62     	; 0x54d2 <Parallel_Parking+0x2b6>
    5494:	fe 01       	movw	r30, r28
    5496:	ed 51       	subi	r30, 0x1D	; 29
    5498:	ff 4f       	sbci	r31, 0xFF	; 255
    549a:	88 ec       	ldi	r24, 0xC8	; 200
    549c:	90 e0       	ldi	r25, 0x00	; 0
    549e:	91 83       	std	Z+1, r25	; 0x01
    54a0:	80 83       	st	Z, r24
    54a2:	fe 01       	movw	r30, r28
    54a4:	ed 51       	subi	r30, 0x1D	; 29
    54a6:	ff 4f       	sbci	r31, 0xFF	; 255
    54a8:	80 81       	ld	r24, Z
    54aa:	91 81       	ldd	r25, Z+1	; 0x01
    54ac:	01 97       	sbiw	r24, 0x01	; 1
    54ae:	f1 f7       	brne	.-4      	; 0x54ac <Parallel_Parking+0x290>
    54b0:	fe 01       	movw	r30, r28
    54b2:	ed 51       	subi	r30, 0x1D	; 29
    54b4:	ff 4f       	sbci	r31, 0xFF	; 255
    54b6:	91 83       	std	Z+1, r25	; 0x01
    54b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54ba:	de 01       	movw	r26, r28
    54bc:	ab 51       	subi	r26, 0x1B	; 27
    54be:	bf 4f       	sbci	r27, 0xFF	; 255
    54c0:	fe 01       	movw	r30, r28
    54c2:	eb 51       	subi	r30, 0x1B	; 27
    54c4:	ff 4f       	sbci	r31, 0xFF	; 255
    54c6:	80 81       	ld	r24, Z
    54c8:	91 81       	ldd	r25, Z+1	; 0x01
    54ca:	01 97       	sbiw	r24, 0x01	; 1
    54cc:	11 96       	adiw	r26, 0x01	; 1
    54ce:	9c 93       	st	X, r25
    54d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54d2:	fe 01       	movw	r30, r28
    54d4:	eb 51       	subi	r30, 0x1B	; 27
    54d6:	ff 4f       	sbci	r31, 0xFF	; 255
    54d8:	80 81       	ld	r24, Z
    54da:	91 81       	ldd	r25, Z+1	; 0x01
    54dc:	00 97       	sbiw	r24, 0x00	; 0
    54de:	d1 f6       	brne	.-76     	; 0x5494 <Parallel_Parking+0x278>
    54e0:	27 c0       	rjmp	.+78     	; 0x5530 <Parallel_Parking+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54e2:	8e 01       	movw	r16, r28
    54e4:	0b 51       	subi	r16, 0x1B	; 27
    54e6:	1f 4f       	sbci	r17, 0xFF	; 255
    54e8:	fe 01       	movw	r30, r28
    54ea:	e9 51       	subi	r30, 0x19	; 25
    54ec:	ff 4f       	sbci	r31, 0xFF	; 255
    54ee:	60 81       	ld	r22, Z
    54f0:	71 81       	ldd	r23, Z+1	; 0x01
    54f2:	82 81       	ldd	r24, Z+2	; 0x02
    54f4:	93 81       	ldd	r25, Z+3	; 0x03
    54f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54fa:	dc 01       	movw	r26, r24
    54fc:	cb 01       	movw	r24, r22
    54fe:	f8 01       	movw	r30, r16
    5500:	91 83       	std	Z+1, r25	; 0x01
    5502:	80 83       	st	Z, r24
    5504:	de 01       	movw	r26, r28
    5506:	af 51       	subi	r26, 0x1F	; 31
    5508:	bf 4f       	sbci	r27, 0xFF	; 255
    550a:	fe 01       	movw	r30, r28
    550c:	eb 51       	subi	r30, 0x1B	; 27
    550e:	ff 4f       	sbci	r31, 0xFF	; 255
    5510:	80 81       	ld	r24, Z
    5512:	91 81       	ldd	r25, Z+1	; 0x01
    5514:	8d 93       	st	X+, r24
    5516:	9c 93       	st	X, r25
    5518:	fe 01       	movw	r30, r28
    551a:	ef 51       	subi	r30, 0x1F	; 31
    551c:	ff 4f       	sbci	r31, 0xFF	; 255
    551e:	80 81       	ld	r24, Z
    5520:	91 81       	ldd	r25, Z+1	; 0x01
    5522:	01 97       	sbiw	r24, 0x01	; 1
    5524:	f1 f7       	brne	.-4      	; 0x5522 <Parallel_Parking+0x306>
    5526:	fe 01       	movw	r30, r28
    5528:	ef 51       	subi	r30, 0x1F	; 31
    552a:	ff 4f       	sbci	r31, 0xFF	; 255
    552c:	91 83       	std	Z+1, r25	; 0x01
    552e:	80 83       	st	Z, r24
	_delay_ms(1500);
	UART_voidSendData(45);//set servo 45
    5530:	8d e2       	ldi	r24, 0x2D	; 45
    5532:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    5536:	fe 01       	movw	r30, r28
    5538:	e3 52       	subi	r30, 0x23	; 35
    553a:	ff 4f       	sbci	r31, 0xFF	; 255
    553c:	80 e0       	ldi	r24, 0x00	; 0
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	aa ef       	ldi	r26, 0xFA	; 250
    5542:	b3 e4       	ldi	r27, 0x43	; 67
    5544:	80 83       	st	Z, r24
    5546:	91 83       	std	Z+1, r25	; 0x01
    5548:	a2 83       	std	Z+2, r26	; 0x02
    554a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    554c:	8e 01       	movw	r16, r28
    554e:	07 52       	subi	r16, 0x27	; 39
    5550:	1f 4f       	sbci	r17, 0xFF	; 255
    5552:	fe 01       	movw	r30, r28
    5554:	e3 52       	subi	r30, 0x23	; 35
    5556:	ff 4f       	sbci	r31, 0xFF	; 255
    5558:	60 81       	ld	r22, Z
    555a:	71 81       	ldd	r23, Z+1	; 0x01
    555c:	82 81       	ldd	r24, Z+2	; 0x02
    555e:	93 81       	ldd	r25, Z+3	; 0x03
    5560:	20 e0       	ldi	r18, 0x00	; 0
    5562:	30 e0       	ldi	r19, 0x00	; 0
    5564:	4a ef       	ldi	r20, 0xFA	; 250
    5566:	54 e4       	ldi	r21, 0x44	; 68
    5568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    556c:	dc 01       	movw	r26, r24
    556e:	cb 01       	movw	r24, r22
    5570:	f8 01       	movw	r30, r16
    5572:	80 83       	st	Z, r24
    5574:	91 83       	std	Z+1, r25	; 0x01
    5576:	a2 83       	std	Z+2, r26	; 0x02
    5578:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    557a:	fe 01       	movw	r30, r28
    557c:	e7 52       	subi	r30, 0x27	; 39
    557e:	ff 4f       	sbci	r31, 0xFF	; 255
    5580:	60 81       	ld	r22, Z
    5582:	71 81       	ldd	r23, Z+1	; 0x01
    5584:	82 81       	ldd	r24, Z+2	; 0x02
    5586:	93 81       	ldd	r25, Z+3	; 0x03
    5588:	20 e0       	ldi	r18, 0x00	; 0
    558a:	30 e0       	ldi	r19, 0x00	; 0
    558c:	40 e8       	ldi	r20, 0x80	; 128
    558e:	5f e3       	ldi	r21, 0x3F	; 63
    5590:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5594:	88 23       	and	r24, r24
    5596:	44 f4       	brge	.+16     	; 0x55a8 <Parallel_Parking+0x38c>
		__ticks = 1;
    5598:	fe 01       	movw	r30, r28
    559a:	e9 52       	subi	r30, 0x29	; 41
    559c:	ff 4f       	sbci	r31, 0xFF	; 255
    559e:	81 e0       	ldi	r24, 0x01	; 1
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	91 83       	std	Z+1, r25	; 0x01
    55a4:	80 83       	st	Z, r24
    55a6:	64 c0       	rjmp	.+200    	; 0x5670 <Parallel_Parking+0x454>
	else if (__tmp > 65535)
    55a8:	fe 01       	movw	r30, r28
    55aa:	e7 52       	subi	r30, 0x27	; 39
    55ac:	ff 4f       	sbci	r31, 0xFF	; 255
    55ae:	60 81       	ld	r22, Z
    55b0:	71 81       	ldd	r23, Z+1	; 0x01
    55b2:	82 81       	ldd	r24, Z+2	; 0x02
    55b4:	93 81       	ldd	r25, Z+3	; 0x03
    55b6:	20 e0       	ldi	r18, 0x00	; 0
    55b8:	3f ef       	ldi	r19, 0xFF	; 255
    55ba:	4f e7       	ldi	r20, 0x7F	; 127
    55bc:	57 e4       	ldi	r21, 0x47	; 71
    55be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55c2:	18 16       	cp	r1, r24
    55c4:	0c f0       	brlt	.+2      	; 0x55c8 <Parallel_Parking+0x3ac>
    55c6:	43 c0       	rjmp	.+134    	; 0x564e <Parallel_Parking+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55c8:	fe 01       	movw	r30, r28
    55ca:	e3 52       	subi	r30, 0x23	; 35
    55cc:	ff 4f       	sbci	r31, 0xFF	; 255
    55ce:	60 81       	ld	r22, Z
    55d0:	71 81       	ldd	r23, Z+1	; 0x01
    55d2:	82 81       	ldd	r24, Z+2	; 0x02
    55d4:	93 81       	ldd	r25, Z+3	; 0x03
    55d6:	20 e0       	ldi	r18, 0x00	; 0
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	40 e2       	ldi	r20, 0x20	; 32
    55dc:	51 e4       	ldi	r21, 0x41	; 65
    55de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55e2:	dc 01       	movw	r26, r24
    55e4:	cb 01       	movw	r24, r22
    55e6:	8e 01       	movw	r16, r28
    55e8:	09 52       	subi	r16, 0x29	; 41
    55ea:	1f 4f       	sbci	r17, 0xFF	; 255
    55ec:	bc 01       	movw	r22, r24
    55ee:	cd 01       	movw	r24, r26
    55f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55f4:	dc 01       	movw	r26, r24
    55f6:	cb 01       	movw	r24, r22
    55f8:	f8 01       	movw	r30, r16
    55fa:	91 83       	std	Z+1, r25	; 0x01
    55fc:	80 83       	st	Z, r24
    55fe:	1f c0       	rjmp	.+62     	; 0x563e <Parallel_Parking+0x422>
    5600:	fe 01       	movw	r30, r28
    5602:	eb 52       	subi	r30, 0x2B	; 43
    5604:	ff 4f       	sbci	r31, 0xFF	; 255
    5606:	88 ec       	ldi	r24, 0xC8	; 200
    5608:	90 e0       	ldi	r25, 0x00	; 0
    560a:	91 83       	std	Z+1, r25	; 0x01
    560c:	80 83       	st	Z, r24
    560e:	fe 01       	movw	r30, r28
    5610:	eb 52       	subi	r30, 0x2B	; 43
    5612:	ff 4f       	sbci	r31, 0xFF	; 255
    5614:	80 81       	ld	r24, Z
    5616:	91 81       	ldd	r25, Z+1	; 0x01
    5618:	01 97       	sbiw	r24, 0x01	; 1
    561a:	f1 f7       	brne	.-4      	; 0x5618 <Parallel_Parking+0x3fc>
    561c:	fe 01       	movw	r30, r28
    561e:	eb 52       	subi	r30, 0x2B	; 43
    5620:	ff 4f       	sbci	r31, 0xFF	; 255
    5622:	91 83       	std	Z+1, r25	; 0x01
    5624:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5626:	de 01       	movw	r26, r28
    5628:	a9 52       	subi	r26, 0x29	; 41
    562a:	bf 4f       	sbci	r27, 0xFF	; 255
    562c:	fe 01       	movw	r30, r28
    562e:	e9 52       	subi	r30, 0x29	; 41
    5630:	ff 4f       	sbci	r31, 0xFF	; 255
    5632:	80 81       	ld	r24, Z
    5634:	91 81       	ldd	r25, Z+1	; 0x01
    5636:	01 97       	sbiw	r24, 0x01	; 1
    5638:	11 96       	adiw	r26, 0x01	; 1
    563a:	9c 93       	st	X, r25
    563c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    563e:	fe 01       	movw	r30, r28
    5640:	e9 52       	subi	r30, 0x29	; 41
    5642:	ff 4f       	sbci	r31, 0xFF	; 255
    5644:	80 81       	ld	r24, Z
    5646:	91 81       	ldd	r25, Z+1	; 0x01
    5648:	00 97       	sbiw	r24, 0x00	; 0
    564a:	d1 f6       	brne	.-76     	; 0x5600 <Parallel_Parking+0x3e4>
    564c:	27 c0       	rjmp	.+78     	; 0x569c <Parallel_Parking+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    564e:	8e 01       	movw	r16, r28
    5650:	09 52       	subi	r16, 0x29	; 41
    5652:	1f 4f       	sbci	r17, 0xFF	; 255
    5654:	fe 01       	movw	r30, r28
    5656:	e7 52       	subi	r30, 0x27	; 39
    5658:	ff 4f       	sbci	r31, 0xFF	; 255
    565a:	60 81       	ld	r22, Z
    565c:	71 81       	ldd	r23, Z+1	; 0x01
    565e:	82 81       	ldd	r24, Z+2	; 0x02
    5660:	93 81       	ldd	r25, Z+3	; 0x03
    5662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5666:	dc 01       	movw	r26, r24
    5668:	cb 01       	movw	r24, r22
    566a:	f8 01       	movw	r30, r16
    566c:	91 83       	std	Z+1, r25	; 0x01
    566e:	80 83       	st	Z, r24
    5670:	de 01       	movw	r26, r28
    5672:	ad 52       	subi	r26, 0x2D	; 45
    5674:	bf 4f       	sbci	r27, 0xFF	; 255
    5676:	fe 01       	movw	r30, r28
    5678:	e9 52       	subi	r30, 0x29	; 41
    567a:	ff 4f       	sbci	r31, 0xFF	; 255
    567c:	80 81       	ld	r24, Z
    567e:	91 81       	ldd	r25, Z+1	; 0x01
    5680:	8d 93       	st	X+, r24
    5682:	9c 93       	st	X, r25
    5684:	fe 01       	movw	r30, r28
    5686:	ed 52       	subi	r30, 0x2D	; 45
    5688:	ff 4f       	sbci	r31, 0xFF	; 255
    568a:	80 81       	ld	r24, Z
    568c:	91 81       	ldd	r25, Z+1	; 0x01
    568e:	01 97       	sbiw	r24, 0x01	; 1
    5690:	f1 f7       	brne	.-4      	; 0x568e <Parallel_Parking+0x472>
    5692:	fe 01       	movw	r30, r28
    5694:	ed 52       	subi	r30, 0x2D	; 45
    5696:	ff 4f       	sbci	r31, 0xFF	; 255
    5698:	91 83       	std	Z+1, r25	; 0x01
    569a:	80 83       	st	Z, r24
	_delay_ms(500);
	UART_voidSendData(45);//set servo 45
    569c:	8d e2       	ldi	r24, 0x2D	; 45
    569e:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    56a2:	fe 01       	movw	r30, r28
    56a4:	e1 53       	subi	r30, 0x31	; 49
    56a6:	ff 4f       	sbci	r31, 0xFF	; 255
    56a8:	80 e0       	ldi	r24, 0x00	; 0
    56aa:	90 e0       	ldi	r25, 0x00	; 0
    56ac:	aa e7       	ldi	r26, 0x7A	; 122
    56ae:	b4 e4       	ldi	r27, 0x44	; 68
    56b0:	80 83       	st	Z, r24
    56b2:	91 83       	std	Z+1, r25	; 0x01
    56b4:	a2 83       	std	Z+2, r26	; 0x02
    56b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56b8:	8e 01       	movw	r16, r28
    56ba:	05 53       	subi	r16, 0x35	; 53
    56bc:	1f 4f       	sbci	r17, 0xFF	; 255
    56be:	fe 01       	movw	r30, r28
    56c0:	e1 53       	subi	r30, 0x31	; 49
    56c2:	ff 4f       	sbci	r31, 0xFF	; 255
    56c4:	60 81       	ld	r22, Z
    56c6:	71 81       	ldd	r23, Z+1	; 0x01
    56c8:	82 81       	ldd	r24, Z+2	; 0x02
    56ca:	93 81       	ldd	r25, Z+3	; 0x03
    56cc:	20 e0       	ldi	r18, 0x00	; 0
    56ce:	30 e0       	ldi	r19, 0x00	; 0
    56d0:	4a ef       	ldi	r20, 0xFA	; 250
    56d2:	54 e4       	ldi	r21, 0x44	; 68
    56d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56d8:	dc 01       	movw	r26, r24
    56da:	cb 01       	movw	r24, r22
    56dc:	f8 01       	movw	r30, r16
    56de:	80 83       	st	Z, r24
    56e0:	91 83       	std	Z+1, r25	; 0x01
    56e2:	a2 83       	std	Z+2, r26	; 0x02
    56e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    56e6:	fe 01       	movw	r30, r28
    56e8:	e5 53       	subi	r30, 0x35	; 53
    56ea:	ff 4f       	sbci	r31, 0xFF	; 255
    56ec:	60 81       	ld	r22, Z
    56ee:	71 81       	ldd	r23, Z+1	; 0x01
    56f0:	82 81       	ldd	r24, Z+2	; 0x02
    56f2:	93 81       	ldd	r25, Z+3	; 0x03
    56f4:	20 e0       	ldi	r18, 0x00	; 0
    56f6:	30 e0       	ldi	r19, 0x00	; 0
    56f8:	40 e8       	ldi	r20, 0x80	; 128
    56fa:	5f e3       	ldi	r21, 0x3F	; 63
    56fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5700:	88 23       	and	r24, r24
    5702:	44 f4       	brge	.+16     	; 0x5714 <Parallel_Parking+0x4f8>
		__ticks = 1;
    5704:	fe 01       	movw	r30, r28
    5706:	e7 53       	subi	r30, 0x37	; 55
    5708:	ff 4f       	sbci	r31, 0xFF	; 255
    570a:	81 e0       	ldi	r24, 0x01	; 1
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	91 83       	std	Z+1, r25	; 0x01
    5710:	80 83       	st	Z, r24
    5712:	64 c0       	rjmp	.+200    	; 0x57dc <Parallel_Parking+0x5c0>
	else if (__tmp > 65535)
    5714:	fe 01       	movw	r30, r28
    5716:	e5 53       	subi	r30, 0x35	; 53
    5718:	ff 4f       	sbci	r31, 0xFF	; 255
    571a:	60 81       	ld	r22, Z
    571c:	71 81       	ldd	r23, Z+1	; 0x01
    571e:	82 81       	ldd	r24, Z+2	; 0x02
    5720:	93 81       	ldd	r25, Z+3	; 0x03
    5722:	20 e0       	ldi	r18, 0x00	; 0
    5724:	3f ef       	ldi	r19, 0xFF	; 255
    5726:	4f e7       	ldi	r20, 0x7F	; 127
    5728:	57 e4       	ldi	r21, 0x47	; 71
    572a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    572e:	18 16       	cp	r1, r24
    5730:	0c f0       	brlt	.+2      	; 0x5734 <Parallel_Parking+0x518>
    5732:	43 c0       	rjmp	.+134    	; 0x57ba <Parallel_Parking+0x59e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5734:	fe 01       	movw	r30, r28
    5736:	e1 53       	subi	r30, 0x31	; 49
    5738:	ff 4f       	sbci	r31, 0xFF	; 255
    573a:	60 81       	ld	r22, Z
    573c:	71 81       	ldd	r23, Z+1	; 0x01
    573e:	82 81       	ldd	r24, Z+2	; 0x02
    5740:	93 81       	ldd	r25, Z+3	; 0x03
    5742:	20 e0       	ldi	r18, 0x00	; 0
    5744:	30 e0       	ldi	r19, 0x00	; 0
    5746:	40 e2       	ldi	r20, 0x20	; 32
    5748:	51 e4       	ldi	r21, 0x41	; 65
    574a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    574e:	dc 01       	movw	r26, r24
    5750:	cb 01       	movw	r24, r22
    5752:	8e 01       	movw	r16, r28
    5754:	07 53       	subi	r16, 0x37	; 55
    5756:	1f 4f       	sbci	r17, 0xFF	; 255
    5758:	bc 01       	movw	r22, r24
    575a:	cd 01       	movw	r24, r26
    575c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5760:	dc 01       	movw	r26, r24
    5762:	cb 01       	movw	r24, r22
    5764:	f8 01       	movw	r30, r16
    5766:	91 83       	std	Z+1, r25	; 0x01
    5768:	80 83       	st	Z, r24
    576a:	1f c0       	rjmp	.+62     	; 0x57aa <Parallel_Parking+0x58e>
    576c:	fe 01       	movw	r30, r28
    576e:	e9 53       	subi	r30, 0x39	; 57
    5770:	ff 4f       	sbci	r31, 0xFF	; 255
    5772:	88 ec       	ldi	r24, 0xC8	; 200
    5774:	90 e0       	ldi	r25, 0x00	; 0
    5776:	91 83       	std	Z+1, r25	; 0x01
    5778:	80 83       	st	Z, r24
    577a:	fe 01       	movw	r30, r28
    577c:	e9 53       	subi	r30, 0x39	; 57
    577e:	ff 4f       	sbci	r31, 0xFF	; 255
    5780:	80 81       	ld	r24, Z
    5782:	91 81       	ldd	r25, Z+1	; 0x01
    5784:	01 97       	sbiw	r24, 0x01	; 1
    5786:	f1 f7       	brne	.-4      	; 0x5784 <Parallel_Parking+0x568>
    5788:	fe 01       	movw	r30, r28
    578a:	e9 53       	subi	r30, 0x39	; 57
    578c:	ff 4f       	sbci	r31, 0xFF	; 255
    578e:	91 83       	std	Z+1, r25	; 0x01
    5790:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5792:	de 01       	movw	r26, r28
    5794:	a7 53       	subi	r26, 0x37	; 55
    5796:	bf 4f       	sbci	r27, 0xFF	; 255
    5798:	fe 01       	movw	r30, r28
    579a:	e7 53       	subi	r30, 0x37	; 55
    579c:	ff 4f       	sbci	r31, 0xFF	; 255
    579e:	80 81       	ld	r24, Z
    57a0:	91 81       	ldd	r25, Z+1	; 0x01
    57a2:	01 97       	sbiw	r24, 0x01	; 1
    57a4:	11 96       	adiw	r26, 0x01	; 1
    57a6:	9c 93       	st	X, r25
    57a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57aa:	fe 01       	movw	r30, r28
    57ac:	e7 53       	subi	r30, 0x37	; 55
    57ae:	ff 4f       	sbci	r31, 0xFF	; 255
    57b0:	80 81       	ld	r24, Z
    57b2:	91 81       	ldd	r25, Z+1	; 0x01
    57b4:	00 97       	sbiw	r24, 0x00	; 0
    57b6:	d1 f6       	brne	.-76     	; 0x576c <Parallel_Parking+0x550>
    57b8:	27 c0       	rjmp	.+78     	; 0x5808 <Parallel_Parking+0x5ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57ba:	8e 01       	movw	r16, r28
    57bc:	07 53       	subi	r16, 0x37	; 55
    57be:	1f 4f       	sbci	r17, 0xFF	; 255
    57c0:	fe 01       	movw	r30, r28
    57c2:	e5 53       	subi	r30, 0x35	; 53
    57c4:	ff 4f       	sbci	r31, 0xFF	; 255
    57c6:	60 81       	ld	r22, Z
    57c8:	71 81       	ldd	r23, Z+1	; 0x01
    57ca:	82 81       	ldd	r24, Z+2	; 0x02
    57cc:	93 81       	ldd	r25, Z+3	; 0x03
    57ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57d2:	dc 01       	movw	r26, r24
    57d4:	cb 01       	movw	r24, r22
    57d6:	f8 01       	movw	r30, r16
    57d8:	91 83       	std	Z+1, r25	; 0x01
    57da:	80 83       	st	Z, r24
    57dc:	de 01       	movw	r26, r28
    57de:	ab 53       	subi	r26, 0x3B	; 59
    57e0:	bf 4f       	sbci	r27, 0xFF	; 255
    57e2:	fe 01       	movw	r30, r28
    57e4:	e7 53       	subi	r30, 0x37	; 55
    57e6:	ff 4f       	sbci	r31, 0xFF	; 255
    57e8:	80 81       	ld	r24, Z
    57ea:	91 81       	ldd	r25, Z+1	; 0x01
    57ec:	8d 93       	st	X+, r24
    57ee:	9c 93       	st	X, r25
    57f0:	fe 01       	movw	r30, r28
    57f2:	eb 53       	subi	r30, 0x3B	; 59
    57f4:	ff 4f       	sbci	r31, 0xFF	; 255
    57f6:	80 81       	ld	r24, Z
    57f8:	91 81       	ldd	r25, Z+1	; 0x01
    57fa:	01 97       	sbiw	r24, 0x01	; 1
    57fc:	f1 f7       	brne	.-4      	; 0x57fa <Parallel_Parking+0x5de>
    57fe:	fe 01       	movw	r30, r28
    5800:	eb 53       	subi	r30, 0x3B	; 59
    5802:	ff 4f       	sbci	r31, 0xFF	; 255
    5804:	91 83       	std	Z+1, r25	; 0x01
    5806:	80 83       	st	Z, r24
	_delay_ms(1000);
	MOVE_BACKWORD(PWM_SPEED_OF_MOTOR_TO_PARK);
    5808:	86 e9       	ldi	r24, 0x96	; 150
    580a:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <MOVE_BACKWORD>
	_delay_ms(time_of_first_move_of_parallel_parking*10);//equation done time_of_first_move_of_parallel_parking
    580e:	80 91 90 01 	lds	r24, 0x0190
    5812:	90 91 91 01 	lds	r25, 0x0191
    5816:	a0 91 92 01 	lds	r26, 0x0192
    581a:	b0 91 93 01 	lds	r27, 0x0193
    581e:	bc 01       	movw	r22, r24
    5820:	cd 01       	movw	r24, r26
    5822:	20 e0       	ldi	r18, 0x00	; 0
    5824:	30 e0       	ldi	r19, 0x00	; 0
    5826:	40 e2       	ldi	r20, 0x20	; 32
    5828:	51 e4       	ldi	r21, 0x41	; 65
    582a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    582e:	dc 01       	movw	r26, r24
    5830:	cb 01       	movw	r24, r22
    5832:	fe 01       	movw	r30, r28
    5834:	ef 53       	subi	r30, 0x3F	; 63
    5836:	ff 4f       	sbci	r31, 0xFF	; 255
    5838:	80 83       	st	Z, r24
    583a:	91 83       	std	Z+1, r25	; 0x01
    583c:	a2 83       	std	Z+2, r26	; 0x02
    583e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5840:	8e 01       	movw	r16, r28
    5842:	03 54       	subi	r16, 0x43	; 67
    5844:	1f 4f       	sbci	r17, 0xFF	; 255
    5846:	fe 01       	movw	r30, r28
    5848:	ef 53       	subi	r30, 0x3F	; 63
    584a:	ff 4f       	sbci	r31, 0xFF	; 255
    584c:	60 81       	ld	r22, Z
    584e:	71 81       	ldd	r23, Z+1	; 0x01
    5850:	82 81       	ldd	r24, Z+2	; 0x02
    5852:	93 81       	ldd	r25, Z+3	; 0x03
    5854:	20 e0       	ldi	r18, 0x00	; 0
    5856:	30 e0       	ldi	r19, 0x00	; 0
    5858:	4a ef       	ldi	r20, 0xFA	; 250
    585a:	54 e4       	ldi	r21, 0x44	; 68
    585c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5860:	dc 01       	movw	r26, r24
    5862:	cb 01       	movw	r24, r22
    5864:	f8 01       	movw	r30, r16
    5866:	80 83       	st	Z, r24
    5868:	91 83       	std	Z+1, r25	; 0x01
    586a:	a2 83       	std	Z+2, r26	; 0x02
    586c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    586e:	fe 01       	movw	r30, r28
    5870:	e3 54       	subi	r30, 0x43	; 67
    5872:	ff 4f       	sbci	r31, 0xFF	; 255
    5874:	60 81       	ld	r22, Z
    5876:	71 81       	ldd	r23, Z+1	; 0x01
    5878:	82 81       	ldd	r24, Z+2	; 0x02
    587a:	93 81       	ldd	r25, Z+3	; 0x03
    587c:	20 e0       	ldi	r18, 0x00	; 0
    587e:	30 e0       	ldi	r19, 0x00	; 0
    5880:	40 e8       	ldi	r20, 0x80	; 128
    5882:	5f e3       	ldi	r21, 0x3F	; 63
    5884:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5888:	88 23       	and	r24, r24
    588a:	44 f4       	brge	.+16     	; 0x589c <Parallel_Parking+0x680>
		__ticks = 1;
    588c:	fe 01       	movw	r30, r28
    588e:	e5 54       	subi	r30, 0x45	; 69
    5890:	ff 4f       	sbci	r31, 0xFF	; 255
    5892:	81 e0       	ldi	r24, 0x01	; 1
    5894:	90 e0       	ldi	r25, 0x00	; 0
    5896:	91 83       	std	Z+1, r25	; 0x01
    5898:	80 83       	st	Z, r24
    589a:	64 c0       	rjmp	.+200    	; 0x5964 <Parallel_Parking+0x748>
	else if (__tmp > 65535)
    589c:	fe 01       	movw	r30, r28
    589e:	e3 54       	subi	r30, 0x43	; 67
    58a0:	ff 4f       	sbci	r31, 0xFF	; 255
    58a2:	60 81       	ld	r22, Z
    58a4:	71 81       	ldd	r23, Z+1	; 0x01
    58a6:	82 81       	ldd	r24, Z+2	; 0x02
    58a8:	93 81       	ldd	r25, Z+3	; 0x03
    58aa:	20 e0       	ldi	r18, 0x00	; 0
    58ac:	3f ef       	ldi	r19, 0xFF	; 255
    58ae:	4f e7       	ldi	r20, 0x7F	; 127
    58b0:	57 e4       	ldi	r21, 0x47	; 71
    58b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58b6:	18 16       	cp	r1, r24
    58b8:	0c f0       	brlt	.+2      	; 0x58bc <Parallel_Parking+0x6a0>
    58ba:	43 c0       	rjmp	.+134    	; 0x5942 <Parallel_Parking+0x726>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58bc:	fe 01       	movw	r30, r28
    58be:	ef 53       	subi	r30, 0x3F	; 63
    58c0:	ff 4f       	sbci	r31, 0xFF	; 255
    58c2:	60 81       	ld	r22, Z
    58c4:	71 81       	ldd	r23, Z+1	; 0x01
    58c6:	82 81       	ldd	r24, Z+2	; 0x02
    58c8:	93 81       	ldd	r25, Z+3	; 0x03
    58ca:	20 e0       	ldi	r18, 0x00	; 0
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	40 e2       	ldi	r20, 0x20	; 32
    58d0:	51 e4       	ldi	r21, 0x41	; 65
    58d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58d6:	dc 01       	movw	r26, r24
    58d8:	cb 01       	movw	r24, r22
    58da:	8e 01       	movw	r16, r28
    58dc:	05 54       	subi	r16, 0x45	; 69
    58de:	1f 4f       	sbci	r17, 0xFF	; 255
    58e0:	bc 01       	movw	r22, r24
    58e2:	cd 01       	movw	r24, r26
    58e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58e8:	dc 01       	movw	r26, r24
    58ea:	cb 01       	movw	r24, r22
    58ec:	f8 01       	movw	r30, r16
    58ee:	91 83       	std	Z+1, r25	; 0x01
    58f0:	80 83       	st	Z, r24
    58f2:	1f c0       	rjmp	.+62     	; 0x5932 <Parallel_Parking+0x716>
    58f4:	fe 01       	movw	r30, r28
    58f6:	e7 54       	subi	r30, 0x47	; 71
    58f8:	ff 4f       	sbci	r31, 0xFF	; 255
    58fa:	88 ec       	ldi	r24, 0xC8	; 200
    58fc:	90 e0       	ldi	r25, 0x00	; 0
    58fe:	91 83       	std	Z+1, r25	; 0x01
    5900:	80 83       	st	Z, r24
    5902:	fe 01       	movw	r30, r28
    5904:	e7 54       	subi	r30, 0x47	; 71
    5906:	ff 4f       	sbci	r31, 0xFF	; 255
    5908:	80 81       	ld	r24, Z
    590a:	91 81       	ldd	r25, Z+1	; 0x01
    590c:	01 97       	sbiw	r24, 0x01	; 1
    590e:	f1 f7       	brne	.-4      	; 0x590c <Parallel_Parking+0x6f0>
    5910:	fe 01       	movw	r30, r28
    5912:	e7 54       	subi	r30, 0x47	; 71
    5914:	ff 4f       	sbci	r31, 0xFF	; 255
    5916:	91 83       	std	Z+1, r25	; 0x01
    5918:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    591a:	de 01       	movw	r26, r28
    591c:	a5 54       	subi	r26, 0x45	; 69
    591e:	bf 4f       	sbci	r27, 0xFF	; 255
    5920:	fe 01       	movw	r30, r28
    5922:	e5 54       	subi	r30, 0x45	; 69
    5924:	ff 4f       	sbci	r31, 0xFF	; 255
    5926:	80 81       	ld	r24, Z
    5928:	91 81       	ldd	r25, Z+1	; 0x01
    592a:	01 97       	sbiw	r24, 0x01	; 1
    592c:	11 96       	adiw	r26, 0x01	; 1
    592e:	9c 93       	st	X, r25
    5930:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5932:	fe 01       	movw	r30, r28
    5934:	e5 54       	subi	r30, 0x45	; 69
    5936:	ff 4f       	sbci	r31, 0xFF	; 255
    5938:	80 81       	ld	r24, Z
    593a:	91 81       	ldd	r25, Z+1	; 0x01
    593c:	00 97       	sbiw	r24, 0x00	; 0
    593e:	d1 f6       	brne	.-76     	; 0x58f4 <Parallel_Parking+0x6d8>
    5940:	27 c0       	rjmp	.+78     	; 0x5990 <Parallel_Parking+0x774>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5942:	8e 01       	movw	r16, r28
    5944:	05 54       	subi	r16, 0x45	; 69
    5946:	1f 4f       	sbci	r17, 0xFF	; 255
    5948:	fe 01       	movw	r30, r28
    594a:	e3 54       	subi	r30, 0x43	; 67
    594c:	ff 4f       	sbci	r31, 0xFF	; 255
    594e:	60 81       	ld	r22, Z
    5950:	71 81       	ldd	r23, Z+1	; 0x01
    5952:	82 81       	ldd	r24, Z+2	; 0x02
    5954:	93 81       	ldd	r25, Z+3	; 0x03
    5956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    595a:	dc 01       	movw	r26, r24
    595c:	cb 01       	movw	r24, r22
    595e:	f8 01       	movw	r30, r16
    5960:	91 83       	std	Z+1, r25	; 0x01
    5962:	80 83       	st	Z, r24
    5964:	de 01       	movw	r26, r28
    5966:	a9 54       	subi	r26, 0x49	; 73
    5968:	bf 4f       	sbci	r27, 0xFF	; 255
    596a:	fe 01       	movw	r30, r28
    596c:	e5 54       	subi	r30, 0x45	; 69
    596e:	ff 4f       	sbci	r31, 0xFF	; 255
    5970:	80 81       	ld	r24, Z
    5972:	91 81       	ldd	r25, Z+1	; 0x01
    5974:	8d 93       	st	X+, r24
    5976:	9c 93       	st	X, r25
    5978:	fe 01       	movw	r30, r28
    597a:	e9 54       	subi	r30, 0x49	; 73
    597c:	ff 4f       	sbci	r31, 0xFF	; 255
    597e:	80 81       	ld	r24, Z
    5980:	91 81       	ldd	r25, Z+1	; 0x01
    5982:	01 97       	sbiw	r24, 0x01	; 1
    5984:	f1 f7       	brne	.-4      	; 0x5982 <Parallel_Parking+0x766>
    5986:	fe 01       	movw	r30, r28
    5988:	e9 54       	subi	r30, 0x49	; 73
    598a:	ff 4f       	sbci	r31, 0xFF	; 255
    598c:	91 83       	std	Z+1, r25	; 0x01
    598e:	80 83       	st	Z, r24
	STOP_DC_MOTOR();
    5990:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
	UART_voidSendData(0);//set servo 0
    5994:	80 e0       	ldi	r24, 0x00	; 0
    5996:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    599a:	fe 01       	movw	r30, r28
    599c:	ed 54       	subi	r30, 0x4D	; 77
    599e:	ff 4f       	sbci	r31, 0xFF	; 255
    59a0:	80 e0       	ldi	r24, 0x00	; 0
    59a2:	90 e0       	ldi	r25, 0x00	; 0
    59a4:	aa e7       	ldi	r26, 0x7A	; 122
    59a6:	b4 e4       	ldi	r27, 0x44	; 68
    59a8:	80 83       	st	Z, r24
    59aa:	91 83       	std	Z+1, r25	; 0x01
    59ac:	a2 83       	std	Z+2, r26	; 0x02
    59ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59b0:	8e 01       	movw	r16, r28
    59b2:	01 55       	subi	r16, 0x51	; 81
    59b4:	1f 4f       	sbci	r17, 0xFF	; 255
    59b6:	fe 01       	movw	r30, r28
    59b8:	ed 54       	subi	r30, 0x4D	; 77
    59ba:	ff 4f       	sbci	r31, 0xFF	; 255
    59bc:	60 81       	ld	r22, Z
    59be:	71 81       	ldd	r23, Z+1	; 0x01
    59c0:	82 81       	ldd	r24, Z+2	; 0x02
    59c2:	93 81       	ldd	r25, Z+3	; 0x03
    59c4:	20 e0       	ldi	r18, 0x00	; 0
    59c6:	30 e0       	ldi	r19, 0x00	; 0
    59c8:	4a ef       	ldi	r20, 0xFA	; 250
    59ca:	54 e4       	ldi	r21, 0x44	; 68
    59cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59d0:	dc 01       	movw	r26, r24
    59d2:	cb 01       	movw	r24, r22
    59d4:	f8 01       	movw	r30, r16
    59d6:	80 83       	st	Z, r24
    59d8:	91 83       	std	Z+1, r25	; 0x01
    59da:	a2 83       	std	Z+2, r26	; 0x02
    59dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    59de:	fe 01       	movw	r30, r28
    59e0:	e1 55       	subi	r30, 0x51	; 81
    59e2:	ff 4f       	sbci	r31, 0xFF	; 255
    59e4:	60 81       	ld	r22, Z
    59e6:	71 81       	ldd	r23, Z+1	; 0x01
    59e8:	82 81       	ldd	r24, Z+2	; 0x02
    59ea:	93 81       	ldd	r25, Z+3	; 0x03
    59ec:	20 e0       	ldi	r18, 0x00	; 0
    59ee:	30 e0       	ldi	r19, 0x00	; 0
    59f0:	40 e8       	ldi	r20, 0x80	; 128
    59f2:	5f e3       	ldi	r21, 0x3F	; 63
    59f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59f8:	88 23       	and	r24, r24
    59fa:	44 f4       	brge	.+16     	; 0x5a0c <Parallel_Parking+0x7f0>
		__ticks = 1;
    59fc:	fe 01       	movw	r30, r28
    59fe:	e3 55       	subi	r30, 0x53	; 83
    5a00:	ff 4f       	sbci	r31, 0xFF	; 255
    5a02:	81 e0       	ldi	r24, 0x01	; 1
    5a04:	90 e0       	ldi	r25, 0x00	; 0
    5a06:	91 83       	std	Z+1, r25	; 0x01
    5a08:	80 83       	st	Z, r24
    5a0a:	64 c0       	rjmp	.+200    	; 0x5ad4 <Parallel_Parking+0x8b8>
	else if (__tmp > 65535)
    5a0c:	fe 01       	movw	r30, r28
    5a0e:	e1 55       	subi	r30, 0x51	; 81
    5a10:	ff 4f       	sbci	r31, 0xFF	; 255
    5a12:	60 81       	ld	r22, Z
    5a14:	71 81       	ldd	r23, Z+1	; 0x01
    5a16:	82 81       	ldd	r24, Z+2	; 0x02
    5a18:	93 81       	ldd	r25, Z+3	; 0x03
    5a1a:	20 e0       	ldi	r18, 0x00	; 0
    5a1c:	3f ef       	ldi	r19, 0xFF	; 255
    5a1e:	4f e7       	ldi	r20, 0x7F	; 127
    5a20:	57 e4       	ldi	r21, 0x47	; 71
    5a22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a26:	18 16       	cp	r1, r24
    5a28:	0c f0       	brlt	.+2      	; 0x5a2c <Parallel_Parking+0x810>
    5a2a:	43 c0       	rjmp	.+134    	; 0x5ab2 <Parallel_Parking+0x896>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a2c:	fe 01       	movw	r30, r28
    5a2e:	ed 54       	subi	r30, 0x4D	; 77
    5a30:	ff 4f       	sbci	r31, 0xFF	; 255
    5a32:	60 81       	ld	r22, Z
    5a34:	71 81       	ldd	r23, Z+1	; 0x01
    5a36:	82 81       	ldd	r24, Z+2	; 0x02
    5a38:	93 81       	ldd	r25, Z+3	; 0x03
    5a3a:	20 e0       	ldi	r18, 0x00	; 0
    5a3c:	30 e0       	ldi	r19, 0x00	; 0
    5a3e:	40 e2       	ldi	r20, 0x20	; 32
    5a40:	51 e4       	ldi	r21, 0x41	; 65
    5a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a46:	dc 01       	movw	r26, r24
    5a48:	cb 01       	movw	r24, r22
    5a4a:	8e 01       	movw	r16, r28
    5a4c:	03 55       	subi	r16, 0x53	; 83
    5a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a50:	bc 01       	movw	r22, r24
    5a52:	cd 01       	movw	r24, r26
    5a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a58:	dc 01       	movw	r26, r24
    5a5a:	cb 01       	movw	r24, r22
    5a5c:	f8 01       	movw	r30, r16
    5a5e:	91 83       	std	Z+1, r25	; 0x01
    5a60:	80 83       	st	Z, r24
    5a62:	1f c0       	rjmp	.+62     	; 0x5aa2 <Parallel_Parking+0x886>
    5a64:	fe 01       	movw	r30, r28
    5a66:	e5 55       	subi	r30, 0x55	; 85
    5a68:	ff 4f       	sbci	r31, 0xFF	; 255
    5a6a:	88 ec       	ldi	r24, 0xC8	; 200
    5a6c:	90 e0       	ldi	r25, 0x00	; 0
    5a6e:	91 83       	std	Z+1, r25	; 0x01
    5a70:	80 83       	st	Z, r24
    5a72:	fe 01       	movw	r30, r28
    5a74:	e5 55       	subi	r30, 0x55	; 85
    5a76:	ff 4f       	sbci	r31, 0xFF	; 255
    5a78:	80 81       	ld	r24, Z
    5a7a:	91 81       	ldd	r25, Z+1	; 0x01
    5a7c:	01 97       	sbiw	r24, 0x01	; 1
    5a7e:	f1 f7       	brne	.-4      	; 0x5a7c <Parallel_Parking+0x860>
    5a80:	fe 01       	movw	r30, r28
    5a82:	e5 55       	subi	r30, 0x55	; 85
    5a84:	ff 4f       	sbci	r31, 0xFF	; 255
    5a86:	91 83       	std	Z+1, r25	; 0x01
    5a88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a8a:	de 01       	movw	r26, r28
    5a8c:	a3 55       	subi	r26, 0x53	; 83
    5a8e:	bf 4f       	sbci	r27, 0xFF	; 255
    5a90:	fe 01       	movw	r30, r28
    5a92:	e3 55       	subi	r30, 0x53	; 83
    5a94:	ff 4f       	sbci	r31, 0xFF	; 255
    5a96:	80 81       	ld	r24, Z
    5a98:	91 81       	ldd	r25, Z+1	; 0x01
    5a9a:	01 97       	sbiw	r24, 0x01	; 1
    5a9c:	11 96       	adiw	r26, 0x01	; 1
    5a9e:	9c 93       	st	X, r25
    5aa0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5aa2:	fe 01       	movw	r30, r28
    5aa4:	e3 55       	subi	r30, 0x53	; 83
    5aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa8:	80 81       	ld	r24, Z
    5aaa:	91 81       	ldd	r25, Z+1	; 0x01
    5aac:	00 97       	sbiw	r24, 0x00	; 0
    5aae:	d1 f6       	brne	.-76     	; 0x5a64 <Parallel_Parking+0x848>
    5ab0:	27 c0       	rjmp	.+78     	; 0x5b00 <Parallel_Parking+0x8e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ab2:	8e 01       	movw	r16, r28
    5ab4:	03 55       	subi	r16, 0x53	; 83
    5ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ab8:	fe 01       	movw	r30, r28
    5aba:	e1 55       	subi	r30, 0x51	; 81
    5abc:	ff 4f       	sbci	r31, 0xFF	; 255
    5abe:	60 81       	ld	r22, Z
    5ac0:	71 81       	ldd	r23, Z+1	; 0x01
    5ac2:	82 81       	ldd	r24, Z+2	; 0x02
    5ac4:	93 81       	ldd	r25, Z+3	; 0x03
    5ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5aca:	dc 01       	movw	r26, r24
    5acc:	cb 01       	movw	r24, r22
    5ace:	f8 01       	movw	r30, r16
    5ad0:	91 83       	std	Z+1, r25	; 0x01
    5ad2:	80 83       	st	Z, r24
    5ad4:	de 01       	movw	r26, r28
    5ad6:	a7 55       	subi	r26, 0x57	; 87
    5ad8:	bf 4f       	sbci	r27, 0xFF	; 255
    5ada:	fe 01       	movw	r30, r28
    5adc:	e3 55       	subi	r30, 0x53	; 83
    5ade:	ff 4f       	sbci	r31, 0xFF	; 255
    5ae0:	80 81       	ld	r24, Z
    5ae2:	91 81       	ldd	r25, Z+1	; 0x01
    5ae4:	8d 93       	st	X+, r24
    5ae6:	9c 93       	st	X, r25
    5ae8:	fe 01       	movw	r30, r28
    5aea:	e7 55       	subi	r30, 0x57	; 87
    5aec:	ff 4f       	sbci	r31, 0xFF	; 255
    5aee:	80 81       	ld	r24, Z
    5af0:	91 81       	ldd	r25, Z+1	; 0x01
    5af2:	01 97       	sbiw	r24, 0x01	; 1
    5af4:	f1 f7       	brne	.-4      	; 0x5af2 <Parallel_Parking+0x8d6>
    5af6:	fe 01       	movw	r30, r28
    5af8:	e7 55       	subi	r30, 0x57	; 87
    5afa:	ff 4f       	sbci	r31, 0xFF	; 255
    5afc:	91 83       	std	Z+1, r25	; 0x01
    5afe:	80 83       	st	Z, r24
	_delay_ms(1000);
	UART_voidSendData(0);//set servo 0
    5b00:	80 e0       	ldi	r24, 0x00	; 0
    5b02:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    5b06:	fe 01       	movw	r30, r28
    5b08:	eb 55       	subi	r30, 0x5B	; 91
    5b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b0c:	80 e0       	ldi	r24, 0x00	; 0
    5b0e:	90 e0       	ldi	r25, 0x00	; 0
    5b10:	aa e7       	ldi	r26, 0x7A	; 122
    5b12:	b4 e4       	ldi	r27, 0x44	; 68
    5b14:	80 83       	st	Z, r24
    5b16:	91 83       	std	Z+1, r25	; 0x01
    5b18:	a2 83       	std	Z+2, r26	; 0x02
    5b1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b1c:	8e 01       	movw	r16, r28
    5b1e:	0f 55       	subi	r16, 0x5F	; 95
    5b20:	1f 4f       	sbci	r17, 0xFF	; 255
    5b22:	fe 01       	movw	r30, r28
    5b24:	eb 55       	subi	r30, 0x5B	; 91
    5b26:	ff 4f       	sbci	r31, 0xFF	; 255
    5b28:	60 81       	ld	r22, Z
    5b2a:	71 81       	ldd	r23, Z+1	; 0x01
    5b2c:	82 81       	ldd	r24, Z+2	; 0x02
    5b2e:	93 81       	ldd	r25, Z+3	; 0x03
    5b30:	20 e0       	ldi	r18, 0x00	; 0
    5b32:	30 e0       	ldi	r19, 0x00	; 0
    5b34:	4a ef       	ldi	r20, 0xFA	; 250
    5b36:	54 e4       	ldi	r21, 0x44	; 68
    5b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b3c:	dc 01       	movw	r26, r24
    5b3e:	cb 01       	movw	r24, r22
    5b40:	f8 01       	movw	r30, r16
    5b42:	80 83       	st	Z, r24
    5b44:	91 83       	std	Z+1, r25	; 0x01
    5b46:	a2 83       	std	Z+2, r26	; 0x02
    5b48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5b4a:	fe 01       	movw	r30, r28
    5b4c:	ef 55       	subi	r30, 0x5F	; 95
    5b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b50:	60 81       	ld	r22, Z
    5b52:	71 81       	ldd	r23, Z+1	; 0x01
    5b54:	82 81       	ldd	r24, Z+2	; 0x02
    5b56:	93 81       	ldd	r25, Z+3	; 0x03
    5b58:	20 e0       	ldi	r18, 0x00	; 0
    5b5a:	30 e0       	ldi	r19, 0x00	; 0
    5b5c:	40 e8       	ldi	r20, 0x80	; 128
    5b5e:	5f e3       	ldi	r21, 0x3F	; 63
    5b60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b64:	88 23       	and	r24, r24
    5b66:	44 f4       	brge	.+16     	; 0x5b78 <Parallel_Parking+0x95c>
		__ticks = 1;
    5b68:	fe 01       	movw	r30, r28
    5b6a:	e1 56       	subi	r30, 0x61	; 97
    5b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b6e:	81 e0       	ldi	r24, 0x01	; 1
    5b70:	90 e0       	ldi	r25, 0x00	; 0
    5b72:	91 83       	std	Z+1, r25	; 0x01
    5b74:	80 83       	st	Z, r24
    5b76:	64 c0       	rjmp	.+200    	; 0x5c40 <Parallel_Parking+0xa24>
	else if (__tmp > 65535)
    5b78:	fe 01       	movw	r30, r28
    5b7a:	ef 55       	subi	r30, 0x5F	; 95
    5b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b7e:	60 81       	ld	r22, Z
    5b80:	71 81       	ldd	r23, Z+1	; 0x01
    5b82:	82 81       	ldd	r24, Z+2	; 0x02
    5b84:	93 81       	ldd	r25, Z+3	; 0x03
    5b86:	20 e0       	ldi	r18, 0x00	; 0
    5b88:	3f ef       	ldi	r19, 0xFF	; 255
    5b8a:	4f e7       	ldi	r20, 0x7F	; 127
    5b8c:	57 e4       	ldi	r21, 0x47	; 71
    5b8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b92:	18 16       	cp	r1, r24
    5b94:	0c f0       	brlt	.+2      	; 0x5b98 <Parallel_Parking+0x97c>
    5b96:	43 c0       	rjmp	.+134    	; 0x5c1e <Parallel_Parking+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b98:	fe 01       	movw	r30, r28
    5b9a:	eb 55       	subi	r30, 0x5B	; 91
    5b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b9e:	60 81       	ld	r22, Z
    5ba0:	71 81       	ldd	r23, Z+1	; 0x01
    5ba2:	82 81       	ldd	r24, Z+2	; 0x02
    5ba4:	93 81       	ldd	r25, Z+3	; 0x03
    5ba6:	20 e0       	ldi	r18, 0x00	; 0
    5ba8:	30 e0       	ldi	r19, 0x00	; 0
    5baa:	40 e2       	ldi	r20, 0x20	; 32
    5bac:	51 e4       	ldi	r21, 0x41	; 65
    5bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bb2:	dc 01       	movw	r26, r24
    5bb4:	cb 01       	movw	r24, r22
    5bb6:	8e 01       	movw	r16, r28
    5bb8:	01 56       	subi	r16, 0x61	; 97
    5bba:	1f 4f       	sbci	r17, 0xFF	; 255
    5bbc:	bc 01       	movw	r22, r24
    5bbe:	cd 01       	movw	r24, r26
    5bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bc4:	dc 01       	movw	r26, r24
    5bc6:	cb 01       	movw	r24, r22
    5bc8:	f8 01       	movw	r30, r16
    5bca:	91 83       	std	Z+1, r25	; 0x01
    5bcc:	80 83       	st	Z, r24
    5bce:	1f c0       	rjmp	.+62     	; 0x5c0e <Parallel_Parking+0x9f2>
    5bd0:	fe 01       	movw	r30, r28
    5bd2:	e3 56       	subi	r30, 0x63	; 99
    5bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd6:	88 ec       	ldi	r24, 0xC8	; 200
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
    5bda:	91 83       	std	Z+1, r25	; 0x01
    5bdc:	80 83       	st	Z, r24
    5bde:	fe 01       	movw	r30, r28
    5be0:	e3 56       	subi	r30, 0x63	; 99
    5be2:	ff 4f       	sbci	r31, 0xFF	; 255
    5be4:	80 81       	ld	r24, Z
    5be6:	91 81       	ldd	r25, Z+1	; 0x01
    5be8:	01 97       	sbiw	r24, 0x01	; 1
    5bea:	f1 f7       	brne	.-4      	; 0x5be8 <Parallel_Parking+0x9cc>
    5bec:	fe 01       	movw	r30, r28
    5bee:	e3 56       	subi	r30, 0x63	; 99
    5bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf2:	91 83       	std	Z+1, r25	; 0x01
    5bf4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bf6:	de 01       	movw	r26, r28
    5bf8:	a1 56       	subi	r26, 0x61	; 97
    5bfa:	bf 4f       	sbci	r27, 0xFF	; 255
    5bfc:	fe 01       	movw	r30, r28
    5bfe:	e1 56       	subi	r30, 0x61	; 97
    5c00:	ff 4f       	sbci	r31, 0xFF	; 255
    5c02:	80 81       	ld	r24, Z
    5c04:	91 81       	ldd	r25, Z+1	; 0x01
    5c06:	01 97       	sbiw	r24, 0x01	; 1
    5c08:	11 96       	adiw	r26, 0x01	; 1
    5c0a:	9c 93       	st	X, r25
    5c0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c0e:	fe 01       	movw	r30, r28
    5c10:	e1 56       	subi	r30, 0x61	; 97
    5c12:	ff 4f       	sbci	r31, 0xFF	; 255
    5c14:	80 81       	ld	r24, Z
    5c16:	91 81       	ldd	r25, Z+1	; 0x01
    5c18:	00 97       	sbiw	r24, 0x00	; 0
    5c1a:	d1 f6       	brne	.-76     	; 0x5bd0 <Parallel_Parking+0x9b4>
    5c1c:	27 c0       	rjmp	.+78     	; 0x5c6c <Parallel_Parking+0xa50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c1e:	8e 01       	movw	r16, r28
    5c20:	01 56       	subi	r16, 0x61	; 97
    5c22:	1f 4f       	sbci	r17, 0xFF	; 255
    5c24:	fe 01       	movw	r30, r28
    5c26:	ef 55       	subi	r30, 0x5F	; 95
    5c28:	ff 4f       	sbci	r31, 0xFF	; 255
    5c2a:	60 81       	ld	r22, Z
    5c2c:	71 81       	ldd	r23, Z+1	; 0x01
    5c2e:	82 81       	ldd	r24, Z+2	; 0x02
    5c30:	93 81       	ldd	r25, Z+3	; 0x03
    5c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c36:	dc 01       	movw	r26, r24
    5c38:	cb 01       	movw	r24, r22
    5c3a:	f8 01       	movw	r30, r16
    5c3c:	91 83       	std	Z+1, r25	; 0x01
    5c3e:	80 83       	st	Z, r24
    5c40:	de 01       	movw	r26, r28
    5c42:	a5 56       	subi	r26, 0x65	; 101
    5c44:	bf 4f       	sbci	r27, 0xFF	; 255
    5c46:	fe 01       	movw	r30, r28
    5c48:	e1 56       	subi	r30, 0x61	; 97
    5c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c4c:	80 81       	ld	r24, Z
    5c4e:	91 81       	ldd	r25, Z+1	; 0x01
    5c50:	8d 93       	st	X+, r24
    5c52:	9c 93       	st	X, r25
    5c54:	fe 01       	movw	r30, r28
    5c56:	e5 56       	subi	r30, 0x65	; 101
    5c58:	ff 4f       	sbci	r31, 0xFF	; 255
    5c5a:	80 81       	ld	r24, Z
    5c5c:	91 81       	ldd	r25, Z+1	; 0x01
    5c5e:	01 97       	sbiw	r24, 0x01	; 1
    5c60:	f1 f7       	brne	.-4      	; 0x5c5e <Parallel_Parking+0xa42>
    5c62:	fe 01       	movw	r30, r28
    5c64:	e5 56       	subi	r30, 0x65	; 101
    5c66:	ff 4f       	sbci	r31, 0xFF	; 255
    5c68:	91 83       	std	Z+1, r25	; 0x01
    5c6a:	80 83       	st	Z, r24
	_delay_ms(1000);
	UART_voidSendData(135);//set servo 135
    5c6c:	87 e8       	ldi	r24, 0x87	; 135
    5c6e:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    5c72:	fe 01       	movw	r30, r28
    5c74:	e9 56       	subi	r30, 0x69	; 105
    5c76:	ff 4f       	sbci	r31, 0xFF	; 255
    5c78:	80 e0       	ldi	r24, 0x00	; 0
    5c7a:	90 e0       	ldi	r25, 0x00	; 0
    5c7c:	aa e7       	ldi	r26, 0x7A	; 122
    5c7e:	b4 e4       	ldi	r27, 0x44	; 68
    5c80:	80 83       	st	Z, r24
    5c82:	91 83       	std	Z+1, r25	; 0x01
    5c84:	a2 83       	std	Z+2, r26	; 0x02
    5c86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c88:	8e 01       	movw	r16, r28
    5c8a:	0d 56       	subi	r16, 0x6D	; 109
    5c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    5c8e:	fe 01       	movw	r30, r28
    5c90:	e9 56       	subi	r30, 0x69	; 105
    5c92:	ff 4f       	sbci	r31, 0xFF	; 255
    5c94:	60 81       	ld	r22, Z
    5c96:	71 81       	ldd	r23, Z+1	; 0x01
    5c98:	82 81       	ldd	r24, Z+2	; 0x02
    5c9a:	93 81       	ldd	r25, Z+3	; 0x03
    5c9c:	20 e0       	ldi	r18, 0x00	; 0
    5c9e:	30 e0       	ldi	r19, 0x00	; 0
    5ca0:	4a ef       	ldi	r20, 0xFA	; 250
    5ca2:	54 e4       	ldi	r21, 0x44	; 68
    5ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ca8:	dc 01       	movw	r26, r24
    5caa:	cb 01       	movw	r24, r22
    5cac:	f8 01       	movw	r30, r16
    5cae:	80 83       	st	Z, r24
    5cb0:	91 83       	std	Z+1, r25	; 0x01
    5cb2:	a2 83       	std	Z+2, r26	; 0x02
    5cb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5cb6:	fe 01       	movw	r30, r28
    5cb8:	ed 56       	subi	r30, 0x6D	; 109
    5cba:	ff 4f       	sbci	r31, 0xFF	; 255
    5cbc:	60 81       	ld	r22, Z
    5cbe:	71 81       	ldd	r23, Z+1	; 0x01
    5cc0:	82 81       	ldd	r24, Z+2	; 0x02
    5cc2:	93 81       	ldd	r25, Z+3	; 0x03
    5cc4:	20 e0       	ldi	r18, 0x00	; 0
    5cc6:	30 e0       	ldi	r19, 0x00	; 0
    5cc8:	40 e8       	ldi	r20, 0x80	; 128
    5cca:	5f e3       	ldi	r21, 0x3F	; 63
    5ccc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cd0:	88 23       	and	r24, r24
    5cd2:	44 f4       	brge	.+16     	; 0x5ce4 <Parallel_Parking+0xac8>
		__ticks = 1;
    5cd4:	fe 01       	movw	r30, r28
    5cd6:	ef 56       	subi	r30, 0x6F	; 111
    5cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5cda:	81 e0       	ldi	r24, 0x01	; 1
    5cdc:	90 e0       	ldi	r25, 0x00	; 0
    5cde:	91 83       	std	Z+1, r25	; 0x01
    5ce0:	80 83       	st	Z, r24
    5ce2:	64 c0       	rjmp	.+200    	; 0x5dac <Parallel_Parking+0xb90>
	else if (__tmp > 65535)
    5ce4:	fe 01       	movw	r30, r28
    5ce6:	ed 56       	subi	r30, 0x6D	; 109
    5ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    5cea:	60 81       	ld	r22, Z
    5cec:	71 81       	ldd	r23, Z+1	; 0x01
    5cee:	82 81       	ldd	r24, Z+2	; 0x02
    5cf0:	93 81       	ldd	r25, Z+3	; 0x03
    5cf2:	20 e0       	ldi	r18, 0x00	; 0
    5cf4:	3f ef       	ldi	r19, 0xFF	; 255
    5cf6:	4f e7       	ldi	r20, 0x7F	; 127
    5cf8:	57 e4       	ldi	r21, 0x47	; 71
    5cfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5cfe:	18 16       	cp	r1, r24
    5d00:	0c f0       	brlt	.+2      	; 0x5d04 <Parallel_Parking+0xae8>
    5d02:	43 c0       	rjmp	.+134    	; 0x5d8a <Parallel_Parking+0xb6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d04:	fe 01       	movw	r30, r28
    5d06:	e9 56       	subi	r30, 0x69	; 105
    5d08:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0a:	60 81       	ld	r22, Z
    5d0c:	71 81       	ldd	r23, Z+1	; 0x01
    5d0e:	82 81       	ldd	r24, Z+2	; 0x02
    5d10:	93 81       	ldd	r25, Z+3	; 0x03
    5d12:	20 e0       	ldi	r18, 0x00	; 0
    5d14:	30 e0       	ldi	r19, 0x00	; 0
    5d16:	40 e2       	ldi	r20, 0x20	; 32
    5d18:	51 e4       	ldi	r21, 0x41	; 65
    5d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d1e:	dc 01       	movw	r26, r24
    5d20:	cb 01       	movw	r24, r22
    5d22:	8e 01       	movw	r16, r28
    5d24:	0f 56       	subi	r16, 0x6F	; 111
    5d26:	1f 4f       	sbci	r17, 0xFF	; 255
    5d28:	bc 01       	movw	r22, r24
    5d2a:	cd 01       	movw	r24, r26
    5d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d30:	dc 01       	movw	r26, r24
    5d32:	cb 01       	movw	r24, r22
    5d34:	f8 01       	movw	r30, r16
    5d36:	91 83       	std	Z+1, r25	; 0x01
    5d38:	80 83       	st	Z, r24
    5d3a:	1f c0       	rjmp	.+62     	; 0x5d7a <Parallel_Parking+0xb5e>
    5d3c:	fe 01       	movw	r30, r28
    5d3e:	e1 57       	subi	r30, 0x71	; 113
    5d40:	ff 4f       	sbci	r31, 0xFF	; 255
    5d42:	88 ec       	ldi	r24, 0xC8	; 200
    5d44:	90 e0       	ldi	r25, 0x00	; 0
    5d46:	91 83       	std	Z+1, r25	; 0x01
    5d48:	80 83       	st	Z, r24
    5d4a:	fe 01       	movw	r30, r28
    5d4c:	e1 57       	subi	r30, 0x71	; 113
    5d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d50:	80 81       	ld	r24, Z
    5d52:	91 81       	ldd	r25, Z+1	; 0x01
    5d54:	01 97       	sbiw	r24, 0x01	; 1
    5d56:	f1 f7       	brne	.-4      	; 0x5d54 <Parallel_Parking+0xb38>
    5d58:	fe 01       	movw	r30, r28
    5d5a:	e1 57       	subi	r30, 0x71	; 113
    5d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d5e:	91 83       	std	Z+1, r25	; 0x01
    5d60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d62:	de 01       	movw	r26, r28
    5d64:	af 56       	subi	r26, 0x6F	; 111
    5d66:	bf 4f       	sbci	r27, 0xFF	; 255
    5d68:	fe 01       	movw	r30, r28
    5d6a:	ef 56       	subi	r30, 0x6F	; 111
    5d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d6e:	80 81       	ld	r24, Z
    5d70:	91 81       	ldd	r25, Z+1	; 0x01
    5d72:	01 97       	sbiw	r24, 0x01	; 1
    5d74:	11 96       	adiw	r26, 0x01	; 1
    5d76:	9c 93       	st	X, r25
    5d78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d7a:	fe 01       	movw	r30, r28
    5d7c:	ef 56       	subi	r30, 0x6F	; 111
    5d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d80:	80 81       	ld	r24, Z
    5d82:	91 81       	ldd	r25, Z+1	; 0x01
    5d84:	00 97       	sbiw	r24, 0x00	; 0
    5d86:	d1 f6       	brne	.-76     	; 0x5d3c <Parallel_Parking+0xb20>
    5d88:	27 c0       	rjmp	.+78     	; 0x5dd8 <Parallel_Parking+0xbbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d8a:	8e 01       	movw	r16, r28
    5d8c:	0f 56       	subi	r16, 0x6F	; 111
    5d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    5d90:	fe 01       	movw	r30, r28
    5d92:	ed 56       	subi	r30, 0x6D	; 109
    5d94:	ff 4f       	sbci	r31, 0xFF	; 255
    5d96:	60 81       	ld	r22, Z
    5d98:	71 81       	ldd	r23, Z+1	; 0x01
    5d9a:	82 81       	ldd	r24, Z+2	; 0x02
    5d9c:	93 81       	ldd	r25, Z+3	; 0x03
    5d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5da2:	dc 01       	movw	r26, r24
    5da4:	cb 01       	movw	r24, r22
    5da6:	f8 01       	movw	r30, r16
    5da8:	91 83       	std	Z+1, r25	; 0x01
    5daa:	80 83       	st	Z, r24
    5dac:	de 01       	movw	r26, r28
    5dae:	a3 57       	subi	r26, 0x73	; 115
    5db0:	bf 4f       	sbci	r27, 0xFF	; 255
    5db2:	fe 01       	movw	r30, r28
    5db4:	ef 56       	subi	r30, 0x6F	; 111
    5db6:	ff 4f       	sbci	r31, 0xFF	; 255
    5db8:	80 81       	ld	r24, Z
    5dba:	91 81       	ldd	r25, Z+1	; 0x01
    5dbc:	8d 93       	st	X+, r24
    5dbe:	9c 93       	st	X, r25
    5dc0:	fe 01       	movw	r30, r28
    5dc2:	e3 57       	subi	r30, 0x73	; 115
    5dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc6:	80 81       	ld	r24, Z
    5dc8:	91 81       	ldd	r25, Z+1	; 0x01
    5dca:	01 97       	sbiw	r24, 0x01	; 1
    5dcc:	f1 f7       	brne	.-4      	; 0x5dca <Parallel_Parking+0xbae>
    5dce:	fe 01       	movw	r30, r28
    5dd0:	e3 57       	subi	r30, 0x73	; 115
    5dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd4:	91 83       	std	Z+1, r25	; 0x01
    5dd6:	80 83       	st	Z, r24
	_delay_ms(1000);
	UART_voidSendData(135);//set servo 135
    5dd8:	87 e8       	ldi	r24, 0x87	; 135
    5dda:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    5dde:	fe 01       	movw	r30, r28
    5de0:	e7 57       	subi	r30, 0x77	; 119
    5de2:	ff 4f       	sbci	r31, 0xFF	; 255
    5de4:	80 e0       	ldi	r24, 0x00	; 0
    5de6:	90 e0       	ldi	r25, 0x00	; 0
    5de8:	aa ef       	ldi	r26, 0xFA	; 250
    5dea:	b3 e4       	ldi	r27, 0x43	; 67
    5dec:	80 83       	st	Z, r24
    5dee:	91 83       	std	Z+1, r25	; 0x01
    5df0:	a2 83       	std	Z+2, r26	; 0x02
    5df2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5df4:	8e 01       	movw	r16, r28
    5df6:	0b 57       	subi	r16, 0x7B	; 123
    5df8:	1f 4f       	sbci	r17, 0xFF	; 255
    5dfa:	fe 01       	movw	r30, r28
    5dfc:	e7 57       	subi	r30, 0x77	; 119
    5dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    5e00:	60 81       	ld	r22, Z
    5e02:	71 81       	ldd	r23, Z+1	; 0x01
    5e04:	82 81       	ldd	r24, Z+2	; 0x02
    5e06:	93 81       	ldd	r25, Z+3	; 0x03
    5e08:	20 e0       	ldi	r18, 0x00	; 0
    5e0a:	30 e0       	ldi	r19, 0x00	; 0
    5e0c:	4a ef       	ldi	r20, 0xFA	; 250
    5e0e:	54 e4       	ldi	r21, 0x44	; 68
    5e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e14:	dc 01       	movw	r26, r24
    5e16:	cb 01       	movw	r24, r22
    5e18:	f8 01       	movw	r30, r16
    5e1a:	80 83       	st	Z, r24
    5e1c:	91 83       	std	Z+1, r25	; 0x01
    5e1e:	a2 83       	std	Z+2, r26	; 0x02
    5e20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5e22:	fe 01       	movw	r30, r28
    5e24:	eb 57       	subi	r30, 0x7B	; 123
    5e26:	ff 4f       	sbci	r31, 0xFF	; 255
    5e28:	60 81       	ld	r22, Z
    5e2a:	71 81       	ldd	r23, Z+1	; 0x01
    5e2c:	82 81       	ldd	r24, Z+2	; 0x02
    5e2e:	93 81       	ldd	r25, Z+3	; 0x03
    5e30:	20 e0       	ldi	r18, 0x00	; 0
    5e32:	30 e0       	ldi	r19, 0x00	; 0
    5e34:	40 e8       	ldi	r20, 0x80	; 128
    5e36:	5f e3       	ldi	r21, 0x3F	; 63
    5e38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e3c:	88 23       	and	r24, r24
    5e3e:	44 f4       	brge	.+16     	; 0x5e50 <Parallel_Parking+0xc34>
		__ticks = 1;
    5e40:	fe 01       	movw	r30, r28
    5e42:	ed 57       	subi	r30, 0x7D	; 125
    5e44:	ff 4f       	sbci	r31, 0xFF	; 255
    5e46:	81 e0       	ldi	r24, 0x01	; 1
    5e48:	90 e0       	ldi	r25, 0x00	; 0
    5e4a:	91 83       	std	Z+1, r25	; 0x01
    5e4c:	80 83       	st	Z, r24
    5e4e:	64 c0       	rjmp	.+200    	; 0x5f18 <Parallel_Parking+0xcfc>
	else if (__tmp > 65535)
    5e50:	fe 01       	movw	r30, r28
    5e52:	eb 57       	subi	r30, 0x7B	; 123
    5e54:	ff 4f       	sbci	r31, 0xFF	; 255
    5e56:	60 81       	ld	r22, Z
    5e58:	71 81       	ldd	r23, Z+1	; 0x01
    5e5a:	82 81       	ldd	r24, Z+2	; 0x02
    5e5c:	93 81       	ldd	r25, Z+3	; 0x03
    5e5e:	20 e0       	ldi	r18, 0x00	; 0
    5e60:	3f ef       	ldi	r19, 0xFF	; 255
    5e62:	4f e7       	ldi	r20, 0x7F	; 127
    5e64:	57 e4       	ldi	r21, 0x47	; 71
    5e66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e6a:	18 16       	cp	r1, r24
    5e6c:	0c f0       	brlt	.+2      	; 0x5e70 <Parallel_Parking+0xc54>
    5e6e:	43 c0       	rjmp	.+134    	; 0x5ef6 <Parallel_Parking+0xcda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e70:	fe 01       	movw	r30, r28
    5e72:	e7 57       	subi	r30, 0x77	; 119
    5e74:	ff 4f       	sbci	r31, 0xFF	; 255
    5e76:	60 81       	ld	r22, Z
    5e78:	71 81       	ldd	r23, Z+1	; 0x01
    5e7a:	82 81       	ldd	r24, Z+2	; 0x02
    5e7c:	93 81       	ldd	r25, Z+3	; 0x03
    5e7e:	20 e0       	ldi	r18, 0x00	; 0
    5e80:	30 e0       	ldi	r19, 0x00	; 0
    5e82:	40 e2       	ldi	r20, 0x20	; 32
    5e84:	51 e4       	ldi	r21, 0x41	; 65
    5e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e8a:	dc 01       	movw	r26, r24
    5e8c:	cb 01       	movw	r24, r22
    5e8e:	8e 01       	movw	r16, r28
    5e90:	0d 57       	subi	r16, 0x7D	; 125
    5e92:	1f 4f       	sbci	r17, 0xFF	; 255
    5e94:	bc 01       	movw	r22, r24
    5e96:	cd 01       	movw	r24, r26
    5e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e9c:	dc 01       	movw	r26, r24
    5e9e:	cb 01       	movw	r24, r22
    5ea0:	f8 01       	movw	r30, r16
    5ea2:	91 83       	std	Z+1, r25	; 0x01
    5ea4:	80 83       	st	Z, r24
    5ea6:	1f c0       	rjmp	.+62     	; 0x5ee6 <Parallel_Parking+0xcca>
    5ea8:	fe 01       	movw	r30, r28
    5eaa:	ef 57       	subi	r30, 0x7F	; 127
    5eac:	ff 4f       	sbci	r31, 0xFF	; 255
    5eae:	88 ec       	ldi	r24, 0xC8	; 200
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	91 83       	std	Z+1, r25	; 0x01
    5eb4:	80 83       	st	Z, r24
    5eb6:	fe 01       	movw	r30, r28
    5eb8:	ef 57       	subi	r30, 0x7F	; 127
    5eba:	ff 4f       	sbci	r31, 0xFF	; 255
    5ebc:	80 81       	ld	r24, Z
    5ebe:	91 81       	ldd	r25, Z+1	; 0x01
    5ec0:	01 97       	sbiw	r24, 0x01	; 1
    5ec2:	f1 f7       	brne	.-4      	; 0x5ec0 <Parallel_Parking+0xca4>
    5ec4:	fe 01       	movw	r30, r28
    5ec6:	ef 57       	subi	r30, 0x7F	; 127
    5ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    5eca:	91 83       	std	Z+1, r25	; 0x01
    5ecc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ece:	de 01       	movw	r26, r28
    5ed0:	ad 57       	subi	r26, 0x7D	; 125
    5ed2:	bf 4f       	sbci	r27, 0xFF	; 255
    5ed4:	fe 01       	movw	r30, r28
    5ed6:	ed 57       	subi	r30, 0x7D	; 125
    5ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    5eda:	80 81       	ld	r24, Z
    5edc:	91 81       	ldd	r25, Z+1	; 0x01
    5ede:	01 97       	sbiw	r24, 0x01	; 1
    5ee0:	11 96       	adiw	r26, 0x01	; 1
    5ee2:	9c 93       	st	X, r25
    5ee4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ee6:	fe 01       	movw	r30, r28
    5ee8:	ed 57       	subi	r30, 0x7D	; 125
    5eea:	ff 4f       	sbci	r31, 0xFF	; 255
    5eec:	80 81       	ld	r24, Z
    5eee:	91 81       	ldd	r25, Z+1	; 0x01
    5ef0:	00 97       	sbiw	r24, 0x00	; 0
    5ef2:	d1 f6       	brne	.-76     	; 0x5ea8 <Parallel_Parking+0xc8c>
    5ef4:	27 c0       	rjmp	.+78     	; 0x5f44 <Parallel_Parking+0xd28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ef6:	8e 01       	movw	r16, r28
    5ef8:	0d 57       	subi	r16, 0x7D	; 125
    5efa:	1f 4f       	sbci	r17, 0xFF	; 255
    5efc:	fe 01       	movw	r30, r28
    5efe:	eb 57       	subi	r30, 0x7B	; 123
    5f00:	ff 4f       	sbci	r31, 0xFF	; 255
    5f02:	60 81       	ld	r22, Z
    5f04:	71 81       	ldd	r23, Z+1	; 0x01
    5f06:	82 81       	ldd	r24, Z+2	; 0x02
    5f08:	93 81       	ldd	r25, Z+3	; 0x03
    5f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f0e:	dc 01       	movw	r26, r24
    5f10:	cb 01       	movw	r24, r22
    5f12:	f8 01       	movw	r30, r16
    5f14:	91 83       	std	Z+1, r25	; 0x01
    5f16:	80 83       	st	Z, r24
    5f18:	de 01       	movw	r26, r28
    5f1a:	a1 58       	subi	r26, 0x81	; 129
    5f1c:	bf 4f       	sbci	r27, 0xFF	; 255
    5f1e:	fe 01       	movw	r30, r28
    5f20:	ed 57       	subi	r30, 0x7D	; 125
    5f22:	ff 4f       	sbci	r31, 0xFF	; 255
    5f24:	80 81       	ld	r24, Z
    5f26:	91 81       	ldd	r25, Z+1	; 0x01
    5f28:	8d 93       	st	X+, r24
    5f2a:	9c 93       	st	X, r25
    5f2c:	fe 01       	movw	r30, r28
    5f2e:	e1 58       	subi	r30, 0x81	; 129
    5f30:	ff 4f       	sbci	r31, 0xFF	; 255
    5f32:	80 81       	ld	r24, Z
    5f34:	91 81       	ldd	r25, Z+1	; 0x01
    5f36:	01 97       	sbiw	r24, 0x01	; 1
    5f38:	f1 f7       	brne	.-4      	; 0x5f36 <Parallel_Parking+0xd1a>
    5f3a:	fe 01       	movw	r30, r28
    5f3c:	e1 58       	subi	r30, 0x81	; 129
    5f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f40:	91 83       	std	Z+1, r25	; 0x01
    5f42:	80 83       	st	Z, r24
	_delay_ms(500);
	MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
    5f44:	86 e9       	ldi	r24, 0x96	; 150
    5f46:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <MOVE_FORWARD>
	_delay_ms(time_of_second_move_of_parallel_parking*10);//equation done time_of_second_move_of_parallel_parking
    5f4a:	80 91 b0 01 	lds	r24, 0x01B0
    5f4e:	90 91 b1 01 	lds	r25, 0x01B1
    5f52:	a0 91 b2 01 	lds	r26, 0x01B2
    5f56:	b0 91 b3 01 	lds	r27, 0x01B3
    5f5a:	bc 01       	movw	r22, r24
    5f5c:	cd 01       	movw	r24, r26
    5f5e:	20 e0       	ldi	r18, 0x00	; 0
    5f60:	30 e0       	ldi	r19, 0x00	; 0
    5f62:	40 e2       	ldi	r20, 0x20	; 32
    5f64:	51 e4       	ldi	r21, 0x41	; 65
    5f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f6a:	dc 01       	movw	r26, r24
    5f6c:	cb 01       	movw	r24, r22
    5f6e:	fe 01       	movw	r30, r28
    5f70:	e5 58       	subi	r30, 0x85	; 133
    5f72:	ff 4f       	sbci	r31, 0xFF	; 255
    5f74:	80 83       	st	Z, r24
    5f76:	91 83       	std	Z+1, r25	; 0x01
    5f78:	a2 83       	std	Z+2, r26	; 0x02
    5f7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f7c:	8e 01       	movw	r16, r28
    5f7e:	09 58       	subi	r16, 0x89	; 137
    5f80:	1f 4f       	sbci	r17, 0xFF	; 255
    5f82:	fe 01       	movw	r30, r28
    5f84:	e5 58       	subi	r30, 0x85	; 133
    5f86:	ff 4f       	sbci	r31, 0xFF	; 255
    5f88:	60 81       	ld	r22, Z
    5f8a:	71 81       	ldd	r23, Z+1	; 0x01
    5f8c:	82 81       	ldd	r24, Z+2	; 0x02
    5f8e:	93 81       	ldd	r25, Z+3	; 0x03
    5f90:	20 e0       	ldi	r18, 0x00	; 0
    5f92:	30 e0       	ldi	r19, 0x00	; 0
    5f94:	4a ef       	ldi	r20, 0xFA	; 250
    5f96:	54 e4       	ldi	r21, 0x44	; 68
    5f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f9c:	dc 01       	movw	r26, r24
    5f9e:	cb 01       	movw	r24, r22
    5fa0:	f8 01       	movw	r30, r16
    5fa2:	80 83       	st	Z, r24
    5fa4:	91 83       	std	Z+1, r25	; 0x01
    5fa6:	a2 83       	std	Z+2, r26	; 0x02
    5fa8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5faa:	fe 01       	movw	r30, r28
    5fac:	e9 58       	subi	r30, 0x89	; 137
    5fae:	ff 4f       	sbci	r31, 0xFF	; 255
    5fb0:	60 81       	ld	r22, Z
    5fb2:	71 81       	ldd	r23, Z+1	; 0x01
    5fb4:	82 81       	ldd	r24, Z+2	; 0x02
    5fb6:	93 81       	ldd	r25, Z+3	; 0x03
    5fb8:	20 e0       	ldi	r18, 0x00	; 0
    5fba:	30 e0       	ldi	r19, 0x00	; 0
    5fbc:	40 e8       	ldi	r20, 0x80	; 128
    5fbe:	5f e3       	ldi	r21, 0x3F	; 63
    5fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5fc4:	88 23       	and	r24, r24
    5fc6:	44 f4       	brge	.+16     	; 0x5fd8 <Parallel_Parking+0xdbc>
		__ticks = 1;
    5fc8:	fe 01       	movw	r30, r28
    5fca:	eb 58       	subi	r30, 0x8B	; 139
    5fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    5fce:	81 e0       	ldi	r24, 0x01	; 1
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	91 83       	std	Z+1, r25	; 0x01
    5fd4:	80 83       	st	Z, r24
    5fd6:	64 c0       	rjmp	.+200    	; 0x60a0 <Parallel_Parking+0xe84>
	else if (__tmp > 65535)
    5fd8:	fe 01       	movw	r30, r28
    5fda:	e9 58       	subi	r30, 0x89	; 137
    5fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    5fde:	60 81       	ld	r22, Z
    5fe0:	71 81       	ldd	r23, Z+1	; 0x01
    5fe2:	82 81       	ldd	r24, Z+2	; 0x02
    5fe4:	93 81       	ldd	r25, Z+3	; 0x03
    5fe6:	20 e0       	ldi	r18, 0x00	; 0
    5fe8:	3f ef       	ldi	r19, 0xFF	; 255
    5fea:	4f e7       	ldi	r20, 0x7F	; 127
    5fec:	57 e4       	ldi	r21, 0x47	; 71
    5fee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ff2:	18 16       	cp	r1, r24
    5ff4:	0c f0       	brlt	.+2      	; 0x5ff8 <Parallel_Parking+0xddc>
    5ff6:	43 c0       	rjmp	.+134    	; 0x607e <Parallel_Parking+0xe62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ff8:	fe 01       	movw	r30, r28
    5ffa:	e5 58       	subi	r30, 0x85	; 133
    5ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ffe:	60 81       	ld	r22, Z
    6000:	71 81       	ldd	r23, Z+1	; 0x01
    6002:	82 81       	ldd	r24, Z+2	; 0x02
    6004:	93 81       	ldd	r25, Z+3	; 0x03
    6006:	20 e0       	ldi	r18, 0x00	; 0
    6008:	30 e0       	ldi	r19, 0x00	; 0
    600a:	40 e2       	ldi	r20, 0x20	; 32
    600c:	51 e4       	ldi	r21, 0x41	; 65
    600e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6012:	dc 01       	movw	r26, r24
    6014:	cb 01       	movw	r24, r22
    6016:	8e 01       	movw	r16, r28
    6018:	0b 58       	subi	r16, 0x8B	; 139
    601a:	1f 4f       	sbci	r17, 0xFF	; 255
    601c:	bc 01       	movw	r22, r24
    601e:	cd 01       	movw	r24, r26
    6020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6024:	dc 01       	movw	r26, r24
    6026:	cb 01       	movw	r24, r22
    6028:	f8 01       	movw	r30, r16
    602a:	91 83       	std	Z+1, r25	; 0x01
    602c:	80 83       	st	Z, r24
    602e:	1f c0       	rjmp	.+62     	; 0x606e <Parallel_Parking+0xe52>
    6030:	fe 01       	movw	r30, r28
    6032:	ed 58       	subi	r30, 0x8D	; 141
    6034:	ff 4f       	sbci	r31, 0xFF	; 255
    6036:	88 ec       	ldi	r24, 0xC8	; 200
    6038:	90 e0       	ldi	r25, 0x00	; 0
    603a:	91 83       	std	Z+1, r25	; 0x01
    603c:	80 83       	st	Z, r24
    603e:	fe 01       	movw	r30, r28
    6040:	ed 58       	subi	r30, 0x8D	; 141
    6042:	ff 4f       	sbci	r31, 0xFF	; 255
    6044:	80 81       	ld	r24, Z
    6046:	91 81       	ldd	r25, Z+1	; 0x01
    6048:	01 97       	sbiw	r24, 0x01	; 1
    604a:	f1 f7       	brne	.-4      	; 0x6048 <Parallel_Parking+0xe2c>
    604c:	fe 01       	movw	r30, r28
    604e:	ed 58       	subi	r30, 0x8D	; 141
    6050:	ff 4f       	sbci	r31, 0xFF	; 255
    6052:	91 83       	std	Z+1, r25	; 0x01
    6054:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6056:	de 01       	movw	r26, r28
    6058:	ab 58       	subi	r26, 0x8B	; 139
    605a:	bf 4f       	sbci	r27, 0xFF	; 255
    605c:	fe 01       	movw	r30, r28
    605e:	eb 58       	subi	r30, 0x8B	; 139
    6060:	ff 4f       	sbci	r31, 0xFF	; 255
    6062:	80 81       	ld	r24, Z
    6064:	91 81       	ldd	r25, Z+1	; 0x01
    6066:	01 97       	sbiw	r24, 0x01	; 1
    6068:	11 96       	adiw	r26, 0x01	; 1
    606a:	9c 93       	st	X, r25
    606c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    606e:	fe 01       	movw	r30, r28
    6070:	eb 58       	subi	r30, 0x8B	; 139
    6072:	ff 4f       	sbci	r31, 0xFF	; 255
    6074:	80 81       	ld	r24, Z
    6076:	91 81       	ldd	r25, Z+1	; 0x01
    6078:	00 97       	sbiw	r24, 0x00	; 0
    607a:	d1 f6       	brne	.-76     	; 0x6030 <Parallel_Parking+0xe14>
    607c:	27 c0       	rjmp	.+78     	; 0x60cc <Parallel_Parking+0xeb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    607e:	8e 01       	movw	r16, r28
    6080:	0b 58       	subi	r16, 0x8B	; 139
    6082:	1f 4f       	sbci	r17, 0xFF	; 255
    6084:	fe 01       	movw	r30, r28
    6086:	e9 58       	subi	r30, 0x89	; 137
    6088:	ff 4f       	sbci	r31, 0xFF	; 255
    608a:	60 81       	ld	r22, Z
    608c:	71 81       	ldd	r23, Z+1	; 0x01
    608e:	82 81       	ldd	r24, Z+2	; 0x02
    6090:	93 81       	ldd	r25, Z+3	; 0x03
    6092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6096:	dc 01       	movw	r26, r24
    6098:	cb 01       	movw	r24, r22
    609a:	f8 01       	movw	r30, r16
    609c:	91 83       	std	Z+1, r25	; 0x01
    609e:	80 83       	st	Z, r24
    60a0:	de 01       	movw	r26, r28
    60a2:	af 58       	subi	r26, 0x8F	; 143
    60a4:	bf 4f       	sbci	r27, 0xFF	; 255
    60a6:	fe 01       	movw	r30, r28
    60a8:	eb 58       	subi	r30, 0x8B	; 139
    60aa:	ff 4f       	sbci	r31, 0xFF	; 255
    60ac:	80 81       	ld	r24, Z
    60ae:	91 81       	ldd	r25, Z+1	; 0x01
    60b0:	8d 93       	st	X+, r24
    60b2:	9c 93       	st	X, r25
    60b4:	fe 01       	movw	r30, r28
    60b6:	ef 58       	subi	r30, 0x8F	; 143
    60b8:	ff 4f       	sbci	r31, 0xFF	; 255
    60ba:	80 81       	ld	r24, Z
    60bc:	91 81       	ldd	r25, Z+1	; 0x01
    60be:	01 97       	sbiw	r24, 0x01	; 1
    60c0:	f1 f7       	brne	.-4      	; 0x60be <Parallel_Parking+0xea2>
    60c2:	fe 01       	movw	r30, r28
    60c4:	ef 58       	subi	r30, 0x8F	; 143
    60c6:	ff 4f       	sbci	r31, 0xFF	; 255
    60c8:	91 83       	std	Z+1, r25	; 0x01
    60ca:	80 83       	st	Z, r24
	STOP_DC_MOTOR();
    60cc:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
	UART_voidSendData(0);//set servo 0
    60d0:	80 e0       	ldi	r24, 0x00	; 0
    60d2:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    60d6:	fe 01       	movw	r30, r28
    60d8:	e3 59       	subi	r30, 0x93	; 147
    60da:	ff 4f       	sbci	r31, 0xFF	; 255
    60dc:	80 e0       	ldi	r24, 0x00	; 0
    60de:	90 e0       	ldi	r25, 0x00	; 0
    60e0:	aa e7       	ldi	r26, 0x7A	; 122
    60e2:	b4 e4       	ldi	r27, 0x44	; 68
    60e4:	80 83       	st	Z, r24
    60e6:	91 83       	std	Z+1, r25	; 0x01
    60e8:	a2 83       	std	Z+2, r26	; 0x02
    60ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60ec:	8e 01       	movw	r16, r28
    60ee:	07 59       	subi	r16, 0x97	; 151
    60f0:	1f 4f       	sbci	r17, 0xFF	; 255
    60f2:	fe 01       	movw	r30, r28
    60f4:	e3 59       	subi	r30, 0x93	; 147
    60f6:	ff 4f       	sbci	r31, 0xFF	; 255
    60f8:	60 81       	ld	r22, Z
    60fa:	71 81       	ldd	r23, Z+1	; 0x01
    60fc:	82 81       	ldd	r24, Z+2	; 0x02
    60fe:	93 81       	ldd	r25, Z+3	; 0x03
    6100:	20 e0       	ldi	r18, 0x00	; 0
    6102:	30 e0       	ldi	r19, 0x00	; 0
    6104:	4a ef       	ldi	r20, 0xFA	; 250
    6106:	54 e4       	ldi	r21, 0x44	; 68
    6108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    610c:	dc 01       	movw	r26, r24
    610e:	cb 01       	movw	r24, r22
    6110:	f8 01       	movw	r30, r16
    6112:	80 83       	st	Z, r24
    6114:	91 83       	std	Z+1, r25	; 0x01
    6116:	a2 83       	std	Z+2, r26	; 0x02
    6118:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    611a:	fe 01       	movw	r30, r28
    611c:	e7 59       	subi	r30, 0x97	; 151
    611e:	ff 4f       	sbci	r31, 0xFF	; 255
    6120:	60 81       	ld	r22, Z
    6122:	71 81       	ldd	r23, Z+1	; 0x01
    6124:	82 81       	ldd	r24, Z+2	; 0x02
    6126:	93 81       	ldd	r25, Z+3	; 0x03
    6128:	20 e0       	ldi	r18, 0x00	; 0
    612a:	30 e0       	ldi	r19, 0x00	; 0
    612c:	40 e8       	ldi	r20, 0x80	; 128
    612e:	5f e3       	ldi	r21, 0x3F	; 63
    6130:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6134:	88 23       	and	r24, r24
    6136:	44 f4       	brge	.+16     	; 0x6148 <Parallel_Parking+0xf2c>
		__ticks = 1;
    6138:	fe 01       	movw	r30, r28
    613a:	e9 59       	subi	r30, 0x99	; 153
    613c:	ff 4f       	sbci	r31, 0xFF	; 255
    613e:	81 e0       	ldi	r24, 0x01	; 1
    6140:	90 e0       	ldi	r25, 0x00	; 0
    6142:	91 83       	std	Z+1, r25	; 0x01
    6144:	80 83       	st	Z, r24
    6146:	64 c0       	rjmp	.+200    	; 0x6210 <Parallel_Parking+0xff4>
	else if (__tmp > 65535)
    6148:	fe 01       	movw	r30, r28
    614a:	e7 59       	subi	r30, 0x97	; 151
    614c:	ff 4f       	sbci	r31, 0xFF	; 255
    614e:	60 81       	ld	r22, Z
    6150:	71 81       	ldd	r23, Z+1	; 0x01
    6152:	82 81       	ldd	r24, Z+2	; 0x02
    6154:	93 81       	ldd	r25, Z+3	; 0x03
    6156:	20 e0       	ldi	r18, 0x00	; 0
    6158:	3f ef       	ldi	r19, 0xFF	; 255
    615a:	4f e7       	ldi	r20, 0x7F	; 127
    615c:	57 e4       	ldi	r21, 0x47	; 71
    615e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6162:	18 16       	cp	r1, r24
    6164:	0c f0       	brlt	.+2      	; 0x6168 <Parallel_Parking+0xf4c>
    6166:	43 c0       	rjmp	.+134    	; 0x61ee <Parallel_Parking+0xfd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6168:	fe 01       	movw	r30, r28
    616a:	e3 59       	subi	r30, 0x93	; 147
    616c:	ff 4f       	sbci	r31, 0xFF	; 255
    616e:	60 81       	ld	r22, Z
    6170:	71 81       	ldd	r23, Z+1	; 0x01
    6172:	82 81       	ldd	r24, Z+2	; 0x02
    6174:	93 81       	ldd	r25, Z+3	; 0x03
    6176:	20 e0       	ldi	r18, 0x00	; 0
    6178:	30 e0       	ldi	r19, 0x00	; 0
    617a:	40 e2       	ldi	r20, 0x20	; 32
    617c:	51 e4       	ldi	r21, 0x41	; 65
    617e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6182:	dc 01       	movw	r26, r24
    6184:	cb 01       	movw	r24, r22
    6186:	8e 01       	movw	r16, r28
    6188:	09 59       	subi	r16, 0x99	; 153
    618a:	1f 4f       	sbci	r17, 0xFF	; 255
    618c:	bc 01       	movw	r22, r24
    618e:	cd 01       	movw	r24, r26
    6190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6194:	dc 01       	movw	r26, r24
    6196:	cb 01       	movw	r24, r22
    6198:	f8 01       	movw	r30, r16
    619a:	91 83       	std	Z+1, r25	; 0x01
    619c:	80 83       	st	Z, r24
    619e:	1f c0       	rjmp	.+62     	; 0x61de <Parallel_Parking+0xfc2>
    61a0:	fe 01       	movw	r30, r28
    61a2:	eb 59       	subi	r30, 0x9B	; 155
    61a4:	ff 4f       	sbci	r31, 0xFF	; 255
    61a6:	88 ec       	ldi	r24, 0xC8	; 200
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	91 83       	std	Z+1, r25	; 0x01
    61ac:	80 83       	st	Z, r24
    61ae:	fe 01       	movw	r30, r28
    61b0:	eb 59       	subi	r30, 0x9B	; 155
    61b2:	ff 4f       	sbci	r31, 0xFF	; 255
    61b4:	80 81       	ld	r24, Z
    61b6:	91 81       	ldd	r25, Z+1	; 0x01
    61b8:	01 97       	sbiw	r24, 0x01	; 1
    61ba:	f1 f7       	brne	.-4      	; 0x61b8 <Parallel_Parking+0xf9c>
    61bc:	fe 01       	movw	r30, r28
    61be:	eb 59       	subi	r30, 0x9B	; 155
    61c0:	ff 4f       	sbci	r31, 0xFF	; 255
    61c2:	91 83       	std	Z+1, r25	; 0x01
    61c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61c6:	de 01       	movw	r26, r28
    61c8:	a9 59       	subi	r26, 0x99	; 153
    61ca:	bf 4f       	sbci	r27, 0xFF	; 255
    61cc:	fe 01       	movw	r30, r28
    61ce:	e9 59       	subi	r30, 0x99	; 153
    61d0:	ff 4f       	sbci	r31, 0xFF	; 255
    61d2:	80 81       	ld	r24, Z
    61d4:	91 81       	ldd	r25, Z+1	; 0x01
    61d6:	01 97       	sbiw	r24, 0x01	; 1
    61d8:	11 96       	adiw	r26, 0x01	; 1
    61da:	9c 93       	st	X, r25
    61dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61de:	fe 01       	movw	r30, r28
    61e0:	e9 59       	subi	r30, 0x99	; 153
    61e2:	ff 4f       	sbci	r31, 0xFF	; 255
    61e4:	80 81       	ld	r24, Z
    61e6:	91 81       	ldd	r25, Z+1	; 0x01
    61e8:	00 97       	sbiw	r24, 0x00	; 0
    61ea:	d1 f6       	brne	.-76     	; 0x61a0 <Parallel_Parking+0xf84>
    61ec:	27 c0       	rjmp	.+78     	; 0x623c <Parallel_Parking+0x1020>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61ee:	8e 01       	movw	r16, r28
    61f0:	09 59       	subi	r16, 0x99	; 153
    61f2:	1f 4f       	sbci	r17, 0xFF	; 255
    61f4:	fe 01       	movw	r30, r28
    61f6:	e7 59       	subi	r30, 0x97	; 151
    61f8:	ff 4f       	sbci	r31, 0xFF	; 255
    61fa:	60 81       	ld	r22, Z
    61fc:	71 81       	ldd	r23, Z+1	; 0x01
    61fe:	82 81       	ldd	r24, Z+2	; 0x02
    6200:	93 81       	ldd	r25, Z+3	; 0x03
    6202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6206:	dc 01       	movw	r26, r24
    6208:	cb 01       	movw	r24, r22
    620a:	f8 01       	movw	r30, r16
    620c:	91 83       	std	Z+1, r25	; 0x01
    620e:	80 83       	st	Z, r24
    6210:	de 01       	movw	r26, r28
    6212:	ad 59       	subi	r26, 0x9D	; 157
    6214:	bf 4f       	sbci	r27, 0xFF	; 255
    6216:	fe 01       	movw	r30, r28
    6218:	e9 59       	subi	r30, 0x99	; 153
    621a:	ff 4f       	sbci	r31, 0xFF	; 255
    621c:	80 81       	ld	r24, Z
    621e:	91 81       	ldd	r25, Z+1	; 0x01
    6220:	8d 93       	st	X+, r24
    6222:	9c 93       	st	X, r25
    6224:	fe 01       	movw	r30, r28
    6226:	ed 59       	subi	r30, 0x9D	; 157
    6228:	ff 4f       	sbci	r31, 0xFF	; 255
    622a:	80 81       	ld	r24, Z
    622c:	91 81       	ldd	r25, Z+1	; 0x01
    622e:	01 97       	sbiw	r24, 0x01	; 1
    6230:	f1 f7       	brne	.-4      	; 0x622e <Parallel_Parking+0x1012>
    6232:	fe 01       	movw	r30, r28
    6234:	ed 59       	subi	r30, 0x9D	; 157
    6236:	ff 4f       	sbci	r31, 0xFF	; 255
    6238:	91 83       	std	Z+1, r25	; 0x01
    623a:	80 83       	st	Z, r24
	_delay_ms(1000);
	UART_voidSendData(0);//set servo 0
    623c:	80 e0       	ldi	r24, 0x00	; 0
    623e:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    6242:	fe 01       	movw	r30, r28
    6244:	e1 5a       	subi	r30, 0xA1	; 161
    6246:	ff 4f       	sbci	r31, 0xFF	; 255
    6248:	80 e0       	ldi	r24, 0x00	; 0
    624a:	90 e0       	ldi	r25, 0x00	; 0
    624c:	aa ef       	ldi	r26, 0xFA	; 250
    624e:	b3 e4       	ldi	r27, 0x43	; 67
    6250:	80 83       	st	Z, r24
    6252:	91 83       	std	Z+1, r25	; 0x01
    6254:	a2 83       	std	Z+2, r26	; 0x02
    6256:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6258:	8e 01       	movw	r16, r28
    625a:	05 5a       	subi	r16, 0xA5	; 165
    625c:	1f 4f       	sbci	r17, 0xFF	; 255
    625e:	fe 01       	movw	r30, r28
    6260:	e1 5a       	subi	r30, 0xA1	; 161
    6262:	ff 4f       	sbci	r31, 0xFF	; 255
    6264:	60 81       	ld	r22, Z
    6266:	71 81       	ldd	r23, Z+1	; 0x01
    6268:	82 81       	ldd	r24, Z+2	; 0x02
    626a:	93 81       	ldd	r25, Z+3	; 0x03
    626c:	20 e0       	ldi	r18, 0x00	; 0
    626e:	30 e0       	ldi	r19, 0x00	; 0
    6270:	4a ef       	ldi	r20, 0xFA	; 250
    6272:	54 e4       	ldi	r21, 0x44	; 68
    6274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6278:	dc 01       	movw	r26, r24
    627a:	cb 01       	movw	r24, r22
    627c:	f8 01       	movw	r30, r16
    627e:	80 83       	st	Z, r24
    6280:	91 83       	std	Z+1, r25	; 0x01
    6282:	a2 83       	std	Z+2, r26	; 0x02
    6284:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6286:	fe 01       	movw	r30, r28
    6288:	e5 5a       	subi	r30, 0xA5	; 165
    628a:	ff 4f       	sbci	r31, 0xFF	; 255
    628c:	60 81       	ld	r22, Z
    628e:	71 81       	ldd	r23, Z+1	; 0x01
    6290:	82 81       	ldd	r24, Z+2	; 0x02
    6292:	93 81       	ldd	r25, Z+3	; 0x03
    6294:	20 e0       	ldi	r18, 0x00	; 0
    6296:	30 e0       	ldi	r19, 0x00	; 0
    6298:	40 e8       	ldi	r20, 0x80	; 128
    629a:	5f e3       	ldi	r21, 0x3F	; 63
    629c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    62a0:	88 23       	and	r24, r24
    62a2:	44 f4       	brge	.+16     	; 0x62b4 <Parallel_Parking+0x1098>
		__ticks = 1;
    62a4:	fe 01       	movw	r30, r28
    62a6:	e7 5a       	subi	r30, 0xA7	; 167
    62a8:	ff 4f       	sbci	r31, 0xFF	; 255
    62aa:	81 e0       	ldi	r24, 0x01	; 1
    62ac:	90 e0       	ldi	r25, 0x00	; 0
    62ae:	91 83       	std	Z+1, r25	; 0x01
    62b0:	80 83       	st	Z, r24
    62b2:	64 c0       	rjmp	.+200    	; 0x637c <Parallel_Parking+0x1160>
	else if (__tmp > 65535)
    62b4:	fe 01       	movw	r30, r28
    62b6:	e5 5a       	subi	r30, 0xA5	; 165
    62b8:	ff 4f       	sbci	r31, 0xFF	; 255
    62ba:	60 81       	ld	r22, Z
    62bc:	71 81       	ldd	r23, Z+1	; 0x01
    62be:	82 81       	ldd	r24, Z+2	; 0x02
    62c0:	93 81       	ldd	r25, Z+3	; 0x03
    62c2:	20 e0       	ldi	r18, 0x00	; 0
    62c4:	3f ef       	ldi	r19, 0xFF	; 255
    62c6:	4f e7       	ldi	r20, 0x7F	; 127
    62c8:	57 e4       	ldi	r21, 0x47	; 71
    62ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    62ce:	18 16       	cp	r1, r24
    62d0:	0c f0       	brlt	.+2      	; 0x62d4 <Parallel_Parking+0x10b8>
    62d2:	43 c0       	rjmp	.+134    	; 0x635a <Parallel_Parking+0x113e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62d4:	fe 01       	movw	r30, r28
    62d6:	e1 5a       	subi	r30, 0xA1	; 161
    62d8:	ff 4f       	sbci	r31, 0xFF	; 255
    62da:	60 81       	ld	r22, Z
    62dc:	71 81       	ldd	r23, Z+1	; 0x01
    62de:	82 81       	ldd	r24, Z+2	; 0x02
    62e0:	93 81       	ldd	r25, Z+3	; 0x03
    62e2:	20 e0       	ldi	r18, 0x00	; 0
    62e4:	30 e0       	ldi	r19, 0x00	; 0
    62e6:	40 e2       	ldi	r20, 0x20	; 32
    62e8:	51 e4       	ldi	r21, 0x41	; 65
    62ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62ee:	dc 01       	movw	r26, r24
    62f0:	cb 01       	movw	r24, r22
    62f2:	8e 01       	movw	r16, r28
    62f4:	07 5a       	subi	r16, 0xA7	; 167
    62f6:	1f 4f       	sbci	r17, 0xFF	; 255
    62f8:	bc 01       	movw	r22, r24
    62fa:	cd 01       	movw	r24, r26
    62fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6300:	dc 01       	movw	r26, r24
    6302:	cb 01       	movw	r24, r22
    6304:	f8 01       	movw	r30, r16
    6306:	91 83       	std	Z+1, r25	; 0x01
    6308:	80 83       	st	Z, r24
    630a:	1f c0       	rjmp	.+62     	; 0x634a <Parallel_Parking+0x112e>
    630c:	fe 01       	movw	r30, r28
    630e:	e9 5a       	subi	r30, 0xA9	; 169
    6310:	ff 4f       	sbci	r31, 0xFF	; 255
    6312:	88 ec       	ldi	r24, 0xC8	; 200
    6314:	90 e0       	ldi	r25, 0x00	; 0
    6316:	91 83       	std	Z+1, r25	; 0x01
    6318:	80 83       	st	Z, r24
    631a:	fe 01       	movw	r30, r28
    631c:	e9 5a       	subi	r30, 0xA9	; 169
    631e:	ff 4f       	sbci	r31, 0xFF	; 255
    6320:	80 81       	ld	r24, Z
    6322:	91 81       	ldd	r25, Z+1	; 0x01
    6324:	01 97       	sbiw	r24, 0x01	; 1
    6326:	f1 f7       	brne	.-4      	; 0x6324 <Parallel_Parking+0x1108>
    6328:	fe 01       	movw	r30, r28
    632a:	e9 5a       	subi	r30, 0xA9	; 169
    632c:	ff 4f       	sbci	r31, 0xFF	; 255
    632e:	91 83       	std	Z+1, r25	; 0x01
    6330:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6332:	de 01       	movw	r26, r28
    6334:	a7 5a       	subi	r26, 0xA7	; 167
    6336:	bf 4f       	sbci	r27, 0xFF	; 255
    6338:	fe 01       	movw	r30, r28
    633a:	e7 5a       	subi	r30, 0xA7	; 167
    633c:	ff 4f       	sbci	r31, 0xFF	; 255
    633e:	80 81       	ld	r24, Z
    6340:	91 81       	ldd	r25, Z+1	; 0x01
    6342:	01 97       	sbiw	r24, 0x01	; 1
    6344:	11 96       	adiw	r26, 0x01	; 1
    6346:	9c 93       	st	X, r25
    6348:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    634a:	fe 01       	movw	r30, r28
    634c:	e7 5a       	subi	r30, 0xA7	; 167
    634e:	ff 4f       	sbci	r31, 0xFF	; 255
    6350:	80 81       	ld	r24, Z
    6352:	91 81       	ldd	r25, Z+1	; 0x01
    6354:	00 97       	sbiw	r24, 0x00	; 0
    6356:	d1 f6       	brne	.-76     	; 0x630c <Parallel_Parking+0x10f0>
    6358:	27 c0       	rjmp	.+78     	; 0x63a8 <Parallel_Parking+0x118c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    635a:	8e 01       	movw	r16, r28
    635c:	07 5a       	subi	r16, 0xA7	; 167
    635e:	1f 4f       	sbci	r17, 0xFF	; 255
    6360:	fe 01       	movw	r30, r28
    6362:	e5 5a       	subi	r30, 0xA5	; 165
    6364:	ff 4f       	sbci	r31, 0xFF	; 255
    6366:	60 81       	ld	r22, Z
    6368:	71 81       	ldd	r23, Z+1	; 0x01
    636a:	82 81       	ldd	r24, Z+2	; 0x02
    636c:	93 81       	ldd	r25, Z+3	; 0x03
    636e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6372:	dc 01       	movw	r26, r24
    6374:	cb 01       	movw	r24, r22
    6376:	f8 01       	movw	r30, r16
    6378:	91 83       	std	Z+1, r25	; 0x01
    637a:	80 83       	st	Z, r24
    637c:	de 01       	movw	r26, r28
    637e:	ab 5a       	subi	r26, 0xAB	; 171
    6380:	bf 4f       	sbci	r27, 0xFF	; 255
    6382:	fe 01       	movw	r30, r28
    6384:	e7 5a       	subi	r30, 0xA7	; 167
    6386:	ff 4f       	sbci	r31, 0xFF	; 255
    6388:	80 81       	ld	r24, Z
    638a:	91 81       	ldd	r25, Z+1	; 0x01
    638c:	8d 93       	st	X+, r24
    638e:	9c 93       	st	X, r25
    6390:	fe 01       	movw	r30, r28
    6392:	eb 5a       	subi	r30, 0xAB	; 171
    6394:	ff 4f       	sbci	r31, 0xFF	; 255
    6396:	80 81       	ld	r24, Z
    6398:	91 81       	ldd	r25, Z+1	; 0x01
    639a:	01 97       	sbiw	r24, 0x01	; 1
    639c:	f1 f7       	brne	.-4      	; 0x639a <Parallel_Parking+0x117e>
    639e:	fe 01       	movw	r30, r28
    63a0:	eb 5a       	subi	r30, 0xAB	; 171
    63a2:	ff 4f       	sbci	r31, 0xFF	; 255
    63a4:	91 83       	std	Z+1, r25	; 0x01
    63a6:	80 83       	st	Z, r24
	_delay_ms(500);
	UART_voidSendData(135);//set servo 135
    63a8:	87 e8       	ldi	r24, 0x87	; 135
    63aa:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    63ae:	fe 01       	movw	r30, r28
    63b0:	ef 5a       	subi	r30, 0xAF	; 175
    63b2:	ff 4f       	sbci	r31, 0xFF	; 255
    63b4:	80 e0       	ldi	r24, 0x00	; 0
    63b6:	90 e0       	ldi	r25, 0x00	; 0
    63b8:	aa e7       	ldi	r26, 0x7A	; 122
    63ba:	b4 e4       	ldi	r27, 0x44	; 68
    63bc:	80 83       	st	Z, r24
    63be:	91 83       	std	Z+1, r25	; 0x01
    63c0:	a2 83       	std	Z+2, r26	; 0x02
    63c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63c4:	8e 01       	movw	r16, r28
    63c6:	03 5b       	subi	r16, 0xB3	; 179
    63c8:	1f 4f       	sbci	r17, 0xFF	; 255
    63ca:	fe 01       	movw	r30, r28
    63cc:	ef 5a       	subi	r30, 0xAF	; 175
    63ce:	ff 4f       	sbci	r31, 0xFF	; 255
    63d0:	60 81       	ld	r22, Z
    63d2:	71 81       	ldd	r23, Z+1	; 0x01
    63d4:	82 81       	ldd	r24, Z+2	; 0x02
    63d6:	93 81       	ldd	r25, Z+3	; 0x03
    63d8:	20 e0       	ldi	r18, 0x00	; 0
    63da:	30 e0       	ldi	r19, 0x00	; 0
    63dc:	4a ef       	ldi	r20, 0xFA	; 250
    63de:	54 e4       	ldi	r21, 0x44	; 68
    63e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63e4:	dc 01       	movw	r26, r24
    63e6:	cb 01       	movw	r24, r22
    63e8:	f8 01       	movw	r30, r16
    63ea:	80 83       	st	Z, r24
    63ec:	91 83       	std	Z+1, r25	; 0x01
    63ee:	a2 83       	std	Z+2, r26	; 0x02
    63f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    63f2:	fe 01       	movw	r30, r28
    63f4:	e3 5b       	subi	r30, 0xB3	; 179
    63f6:	ff 4f       	sbci	r31, 0xFF	; 255
    63f8:	60 81       	ld	r22, Z
    63fa:	71 81       	ldd	r23, Z+1	; 0x01
    63fc:	82 81       	ldd	r24, Z+2	; 0x02
    63fe:	93 81       	ldd	r25, Z+3	; 0x03
    6400:	20 e0       	ldi	r18, 0x00	; 0
    6402:	30 e0       	ldi	r19, 0x00	; 0
    6404:	40 e8       	ldi	r20, 0x80	; 128
    6406:	5f e3       	ldi	r21, 0x3F	; 63
    6408:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    640c:	88 23       	and	r24, r24
    640e:	44 f4       	brge	.+16     	; 0x6420 <Parallel_Parking+0x1204>
		__ticks = 1;
    6410:	fe 01       	movw	r30, r28
    6412:	e5 5b       	subi	r30, 0xB5	; 181
    6414:	ff 4f       	sbci	r31, 0xFF	; 255
    6416:	81 e0       	ldi	r24, 0x01	; 1
    6418:	90 e0       	ldi	r25, 0x00	; 0
    641a:	91 83       	std	Z+1, r25	; 0x01
    641c:	80 83       	st	Z, r24
    641e:	64 c0       	rjmp	.+200    	; 0x64e8 <Parallel_Parking+0x12cc>
	else if (__tmp > 65535)
    6420:	fe 01       	movw	r30, r28
    6422:	e3 5b       	subi	r30, 0xB3	; 179
    6424:	ff 4f       	sbci	r31, 0xFF	; 255
    6426:	60 81       	ld	r22, Z
    6428:	71 81       	ldd	r23, Z+1	; 0x01
    642a:	82 81       	ldd	r24, Z+2	; 0x02
    642c:	93 81       	ldd	r25, Z+3	; 0x03
    642e:	20 e0       	ldi	r18, 0x00	; 0
    6430:	3f ef       	ldi	r19, 0xFF	; 255
    6432:	4f e7       	ldi	r20, 0x7F	; 127
    6434:	57 e4       	ldi	r21, 0x47	; 71
    6436:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    643a:	18 16       	cp	r1, r24
    643c:	0c f0       	brlt	.+2      	; 0x6440 <Parallel_Parking+0x1224>
    643e:	43 c0       	rjmp	.+134    	; 0x64c6 <Parallel_Parking+0x12aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6440:	fe 01       	movw	r30, r28
    6442:	ef 5a       	subi	r30, 0xAF	; 175
    6444:	ff 4f       	sbci	r31, 0xFF	; 255
    6446:	60 81       	ld	r22, Z
    6448:	71 81       	ldd	r23, Z+1	; 0x01
    644a:	82 81       	ldd	r24, Z+2	; 0x02
    644c:	93 81       	ldd	r25, Z+3	; 0x03
    644e:	20 e0       	ldi	r18, 0x00	; 0
    6450:	30 e0       	ldi	r19, 0x00	; 0
    6452:	40 e2       	ldi	r20, 0x20	; 32
    6454:	51 e4       	ldi	r21, 0x41	; 65
    6456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    645a:	dc 01       	movw	r26, r24
    645c:	cb 01       	movw	r24, r22
    645e:	8e 01       	movw	r16, r28
    6460:	05 5b       	subi	r16, 0xB5	; 181
    6462:	1f 4f       	sbci	r17, 0xFF	; 255
    6464:	bc 01       	movw	r22, r24
    6466:	cd 01       	movw	r24, r26
    6468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    646c:	dc 01       	movw	r26, r24
    646e:	cb 01       	movw	r24, r22
    6470:	f8 01       	movw	r30, r16
    6472:	91 83       	std	Z+1, r25	; 0x01
    6474:	80 83       	st	Z, r24
    6476:	1f c0       	rjmp	.+62     	; 0x64b6 <Parallel_Parking+0x129a>
    6478:	fe 01       	movw	r30, r28
    647a:	e7 5b       	subi	r30, 0xB7	; 183
    647c:	ff 4f       	sbci	r31, 0xFF	; 255
    647e:	88 ec       	ldi	r24, 0xC8	; 200
    6480:	90 e0       	ldi	r25, 0x00	; 0
    6482:	91 83       	std	Z+1, r25	; 0x01
    6484:	80 83       	st	Z, r24
    6486:	fe 01       	movw	r30, r28
    6488:	e7 5b       	subi	r30, 0xB7	; 183
    648a:	ff 4f       	sbci	r31, 0xFF	; 255
    648c:	80 81       	ld	r24, Z
    648e:	91 81       	ldd	r25, Z+1	; 0x01
    6490:	01 97       	sbiw	r24, 0x01	; 1
    6492:	f1 f7       	brne	.-4      	; 0x6490 <Parallel_Parking+0x1274>
    6494:	fe 01       	movw	r30, r28
    6496:	e7 5b       	subi	r30, 0xB7	; 183
    6498:	ff 4f       	sbci	r31, 0xFF	; 255
    649a:	91 83       	std	Z+1, r25	; 0x01
    649c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    649e:	de 01       	movw	r26, r28
    64a0:	a5 5b       	subi	r26, 0xB5	; 181
    64a2:	bf 4f       	sbci	r27, 0xFF	; 255
    64a4:	fe 01       	movw	r30, r28
    64a6:	e5 5b       	subi	r30, 0xB5	; 181
    64a8:	ff 4f       	sbci	r31, 0xFF	; 255
    64aa:	80 81       	ld	r24, Z
    64ac:	91 81       	ldd	r25, Z+1	; 0x01
    64ae:	01 97       	sbiw	r24, 0x01	; 1
    64b0:	11 96       	adiw	r26, 0x01	; 1
    64b2:	9c 93       	st	X, r25
    64b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64b6:	fe 01       	movw	r30, r28
    64b8:	e5 5b       	subi	r30, 0xB5	; 181
    64ba:	ff 4f       	sbci	r31, 0xFF	; 255
    64bc:	80 81       	ld	r24, Z
    64be:	91 81       	ldd	r25, Z+1	; 0x01
    64c0:	00 97       	sbiw	r24, 0x00	; 0
    64c2:	d1 f6       	brne	.-76     	; 0x6478 <Parallel_Parking+0x125c>
    64c4:	27 c0       	rjmp	.+78     	; 0x6514 <Parallel_Parking+0x12f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64c6:	8e 01       	movw	r16, r28
    64c8:	05 5b       	subi	r16, 0xB5	; 181
    64ca:	1f 4f       	sbci	r17, 0xFF	; 255
    64cc:	fe 01       	movw	r30, r28
    64ce:	e3 5b       	subi	r30, 0xB3	; 179
    64d0:	ff 4f       	sbci	r31, 0xFF	; 255
    64d2:	60 81       	ld	r22, Z
    64d4:	71 81       	ldd	r23, Z+1	; 0x01
    64d6:	82 81       	ldd	r24, Z+2	; 0x02
    64d8:	93 81       	ldd	r25, Z+3	; 0x03
    64da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64de:	dc 01       	movw	r26, r24
    64e0:	cb 01       	movw	r24, r22
    64e2:	f8 01       	movw	r30, r16
    64e4:	91 83       	std	Z+1, r25	; 0x01
    64e6:	80 83       	st	Z, r24
    64e8:	de 01       	movw	r26, r28
    64ea:	a9 5b       	subi	r26, 0xB9	; 185
    64ec:	bf 4f       	sbci	r27, 0xFF	; 255
    64ee:	fe 01       	movw	r30, r28
    64f0:	e5 5b       	subi	r30, 0xB5	; 181
    64f2:	ff 4f       	sbci	r31, 0xFF	; 255
    64f4:	80 81       	ld	r24, Z
    64f6:	91 81       	ldd	r25, Z+1	; 0x01
    64f8:	8d 93       	st	X+, r24
    64fa:	9c 93       	st	X, r25
    64fc:	fe 01       	movw	r30, r28
    64fe:	e9 5b       	subi	r30, 0xB9	; 185
    6500:	ff 4f       	sbci	r31, 0xFF	; 255
    6502:	80 81       	ld	r24, Z
    6504:	91 81       	ldd	r25, Z+1	; 0x01
    6506:	01 97       	sbiw	r24, 0x01	; 1
    6508:	f1 f7       	brne	.-4      	; 0x6506 <Parallel_Parking+0x12ea>
    650a:	fe 01       	movw	r30, r28
    650c:	e9 5b       	subi	r30, 0xB9	; 185
    650e:	ff 4f       	sbci	r31, 0xFF	; 255
    6510:	91 83       	std	Z+1, r25	; 0x01
    6512:	80 83       	st	Z, r24
	_delay_ms(1000);
	UART_voidSendData(135);//set servo 135
    6514:	87 e8       	ldi	r24, 0x87	; 135
    6516:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    651a:	fe 01       	movw	r30, r28
    651c:	ed 5b       	subi	r30, 0xBD	; 189
    651e:	ff 4f       	sbci	r31, 0xFF	; 255
    6520:	80 e0       	ldi	r24, 0x00	; 0
    6522:	90 e0       	ldi	r25, 0x00	; 0
    6524:	aa e7       	ldi	r26, 0x7A	; 122
    6526:	b4 e4       	ldi	r27, 0x44	; 68
    6528:	80 83       	st	Z, r24
    652a:	91 83       	std	Z+1, r25	; 0x01
    652c:	a2 83       	std	Z+2, r26	; 0x02
    652e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6530:	8e 01       	movw	r16, r28
    6532:	01 5c       	subi	r16, 0xC1	; 193
    6534:	1f 4f       	sbci	r17, 0xFF	; 255
    6536:	fe 01       	movw	r30, r28
    6538:	ed 5b       	subi	r30, 0xBD	; 189
    653a:	ff 4f       	sbci	r31, 0xFF	; 255
    653c:	60 81       	ld	r22, Z
    653e:	71 81       	ldd	r23, Z+1	; 0x01
    6540:	82 81       	ldd	r24, Z+2	; 0x02
    6542:	93 81       	ldd	r25, Z+3	; 0x03
    6544:	20 e0       	ldi	r18, 0x00	; 0
    6546:	30 e0       	ldi	r19, 0x00	; 0
    6548:	4a ef       	ldi	r20, 0xFA	; 250
    654a:	54 e4       	ldi	r21, 0x44	; 68
    654c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6550:	dc 01       	movw	r26, r24
    6552:	cb 01       	movw	r24, r22
    6554:	f8 01       	movw	r30, r16
    6556:	80 83       	st	Z, r24
    6558:	91 83       	std	Z+1, r25	; 0x01
    655a:	a2 83       	std	Z+2, r26	; 0x02
    655c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    655e:	fe 01       	movw	r30, r28
    6560:	ff 96       	adiw	r30, 0x3f	; 63
    6562:	60 81       	ld	r22, Z
    6564:	71 81       	ldd	r23, Z+1	; 0x01
    6566:	82 81       	ldd	r24, Z+2	; 0x02
    6568:	93 81       	ldd	r25, Z+3	; 0x03
    656a:	20 e0       	ldi	r18, 0x00	; 0
    656c:	30 e0       	ldi	r19, 0x00	; 0
    656e:	40 e8       	ldi	r20, 0x80	; 128
    6570:	5f e3       	ldi	r21, 0x3F	; 63
    6572:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6576:	88 23       	and	r24, r24
    6578:	2c f4       	brge	.+10     	; 0x6584 <Parallel_Parking+0x1368>
		__ticks = 1;
    657a:	81 e0       	ldi	r24, 0x01	; 1
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	9e af       	std	Y+62, r25	; 0x3e
    6580:	8d af       	std	Y+61, r24	; 0x3d
    6582:	46 c0       	rjmp	.+140    	; 0x6610 <Parallel_Parking+0x13f4>
	else if (__tmp > 65535)
    6584:	fe 01       	movw	r30, r28
    6586:	ff 96       	adiw	r30, 0x3f	; 63
    6588:	60 81       	ld	r22, Z
    658a:	71 81       	ldd	r23, Z+1	; 0x01
    658c:	82 81       	ldd	r24, Z+2	; 0x02
    658e:	93 81       	ldd	r25, Z+3	; 0x03
    6590:	20 e0       	ldi	r18, 0x00	; 0
    6592:	3f ef       	ldi	r19, 0xFF	; 255
    6594:	4f e7       	ldi	r20, 0x7F	; 127
    6596:	57 e4       	ldi	r21, 0x47	; 71
    6598:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    659c:	18 16       	cp	r1, r24
    659e:	64 f5       	brge	.+88     	; 0x65f8 <Parallel_Parking+0x13dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65a0:	fe 01       	movw	r30, r28
    65a2:	ed 5b       	subi	r30, 0xBD	; 189
    65a4:	ff 4f       	sbci	r31, 0xFF	; 255
    65a6:	60 81       	ld	r22, Z
    65a8:	71 81       	ldd	r23, Z+1	; 0x01
    65aa:	82 81       	ldd	r24, Z+2	; 0x02
    65ac:	93 81       	ldd	r25, Z+3	; 0x03
    65ae:	20 e0       	ldi	r18, 0x00	; 0
    65b0:	30 e0       	ldi	r19, 0x00	; 0
    65b2:	40 e2       	ldi	r20, 0x20	; 32
    65b4:	51 e4       	ldi	r21, 0x41	; 65
    65b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65ba:	dc 01       	movw	r26, r24
    65bc:	cb 01       	movw	r24, r22
    65be:	bc 01       	movw	r22, r24
    65c0:	cd 01       	movw	r24, r26
    65c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65c6:	dc 01       	movw	r26, r24
    65c8:	cb 01       	movw	r24, r22
    65ca:	9e af       	std	Y+62, r25	; 0x3e
    65cc:	8d af       	std	Y+61, r24	; 0x3d
    65ce:	0f c0       	rjmp	.+30     	; 0x65ee <Parallel_Parking+0x13d2>
    65d0:	88 ec       	ldi	r24, 0xC8	; 200
    65d2:	90 e0       	ldi	r25, 0x00	; 0
    65d4:	9c af       	std	Y+60, r25	; 0x3c
    65d6:	8b af       	std	Y+59, r24	; 0x3b
    65d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    65da:	9c ad       	ldd	r25, Y+60	; 0x3c
    65dc:	01 97       	sbiw	r24, 0x01	; 1
    65de:	f1 f7       	brne	.-4      	; 0x65dc <Parallel_Parking+0x13c0>
    65e0:	9c af       	std	Y+60, r25	; 0x3c
    65e2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    65e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    65e8:	01 97       	sbiw	r24, 0x01	; 1
    65ea:	9e af       	std	Y+62, r25	; 0x3e
    65ec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    65f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    65f2:	00 97       	sbiw	r24, 0x00	; 0
    65f4:	69 f7       	brne	.-38     	; 0x65d0 <Parallel_Parking+0x13b4>
    65f6:	16 c0       	rjmp	.+44     	; 0x6624 <Parallel_Parking+0x1408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65f8:	fe 01       	movw	r30, r28
    65fa:	ff 96       	adiw	r30, 0x3f	; 63
    65fc:	60 81       	ld	r22, Z
    65fe:	71 81       	ldd	r23, Z+1	; 0x01
    6600:	82 81       	ldd	r24, Z+2	; 0x02
    6602:	93 81       	ldd	r25, Z+3	; 0x03
    6604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6608:	dc 01       	movw	r26, r24
    660a:	cb 01       	movw	r24, r22
    660c:	9e af       	std	Y+62, r25	; 0x3e
    660e:	8d af       	std	Y+61, r24	; 0x3d
    6610:	8d ad       	ldd	r24, Y+61	; 0x3d
    6612:	9e ad       	ldd	r25, Y+62	; 0x3e
    6614:	9a af       	std	Y+58, r25	; 0x3a
    6616:	89 af       	std	Y+57, r24	; 0x39
    6618:	89 ad       	ldd	r24, Y+57	; 0x39
    661a:	9a ad       	ldd	r25, Y+58	; 0x3a
    661c:	01 97       	sbiw	r24, 0x01	; 1
    661e:	f1 f7       	brne	.-4      	; 0x661c <Parallel_Parking+0x1400>
    6620:	9a af       	std	Y+58, r25	; 0x3a
    6622:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	MOVE_BACKWORD(PWM_SPEED_OF_MOTOR_TO_PARK);
    6624:	86 e9       	ldi	r24, 0x96	; 150
    6626:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <MOVE_BACKWORD>
	_delay_ms(time_of_third_move_of_parallel_parking*10);//equation done time_of_third _move_back_of_parallel_parking
    662a:	80 91 ac 01 	lds	r24, 0x01AC
    662e:	90 91 ad 01 	lds	r25, 0x01AD
    6632:	a0 91 ae 01 	lds	r26, 0x01AE
    6636:	b0 91 af 01 	lds	r27, 0x01AF
    663a:	bc 01       	movw	r22, r24
    663c:	cd 01       	movw	r24, r26
    663e:	20 e0       	ldi	r18, 0x00	; 0
    6640:	30 e0       	ldi	r19, 0x00	; 0
    6642:	40 e2       	ldi	r20, 0x20	; 32
    6644:	51 e4       	ldi	r21, 0x41	; 65
    6646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    664a:	dc 01       	movw	r26, r24
    664c:	cb 01       	movw	r24, r22
    664e:	8d ab       	std	Y+53, r24	; 0x35
    6650:	9e ab       	std	Y+54, r25	; 0x36
    6652:	af ab       	std	Y+55, r26	; 0x37
    6654:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6656:	6d a9       	ldd	r22, Y+53	; 0x35
    6658:	7e a9       	ldd	r23, Y+54	; 0x36
    665a:	8f a9       	ldd	r24, Y+55	; 0x37
    665c:	98 ad       	ldd	r25, Y+56	; 0x38
    665e:	20 e0       	ldi	r18, 0x00	; 0
    6660:	30 e0       	ldi	r19, 0x00	; 0
    6662:	4a ef       	ldi	r20, 0xFA	; 250
    6664:	54 e4       	ldi	r21, 0x44	; 68
    6666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    666a:	dc 01       	movw	r26, r24
    666c:	cb 01       	movw	r24, r22
    666e:	89 ab       	std	Y+49, r24	; 0x31
    6670:	9a ab       	std	Y+50, r25	; 0x32
    6672:	ab ab       	std	Y+51, r26	; 0x33
    6674:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6676:	69 a9       	ldd	r22, Y+49	; 0x31
    6678:	7a a9       	ldd	r23, Y+50	; 0x32
    667a:	8b a9       	ldd	r24, Y+51	; 0x33
    667c:	9c a9       	ldd	r25, Y+52	; 0x34
    667e:	20 e0       	ldi	r18, 0x00	; 0
    6680:	30 e0       	ldi	r19, 0x00	; 0
    6682:	40 e8       	ldi	r20, 0x80	; 128
    6684:	5f e3       	ldi	r21, 0x3F	; 63
    6686:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    668a:	88 23       	and	r24, r24
    668c:	2c f4       	brge	.+10     	; 0x6698 <Parallel_Parking+0x147c>
		__ticks = 1;
    668e:	81 e0       	ldi	r24, 0x01	; 1
    6690:	90 e0       	ldi	r25, 0x00	; 0
    6692:	98 ab       	std	Y+48, r25	; 0x30
    6694:	8f a7       	std	Y+47, r24	; 0x2f
    6696:	3f c0       	rjmp	.+126    	; 0x6716 <Parallel_Parking+0x14fa>
	else if (__tmp > 65535)
    6698:	69 a9       	ldd	r22, Y+49	; 0x31
    669a:	7a a9       	ldd	r23, Y+50	; 0x32
    669c:	8b a9       	ldd	r24, Y+51	; 0x33
    669e:	9c a9       	ldd	r25, Y+52	; 0x34
    66a0:	20 e0       	ldi	r18, 0x00	; 0
    66a2:	3f ef       	ldi	r19, 0xFF	; 255
    66a4:	4f e7       	ldi	r20, 0x7F	; 127
    66a6:	57 e4       	ldi	r21, 0x47	; 71
    66a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    66ac:	18 16       	cp	r1, r24
    66ae:	4c f5       	brge	.+82     	; 0x6702 <Parallel_Parking+0x14e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66b0:	6d a9       	ldd	r22, Y+53	; 0x35
    66b2:	7e a9       	ldd	r23, Y+54	; 0x36
    66b4:	8f a9       	ldd	r24, Y+55	; 0x37
    66b6:	98 ad       	ldd	r25, Y+56	; 0x38
    66b8:	20 e0       	ldi	r18, 0x00	; 0
    66ba:	30 e0       	ldi	r19, 0x00	; 0
    66bc:	40 e2       	ldi	r20, 0x20	; 32
    66be:	51 e4       	ldi	r21, 0x41	; 65
    66c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66c4:	dc 01       	movw	r26, r24
    66c6:	cb 01       	movw	r24, r22
    66c8:	bc 01       	movw	r22, r24
    66ca:	cd 01       	movw	r24, r26
    66cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66d0:	dc 01       	movw	r26, r24
    66d2:	cb 01       	movw	r24, r22
    66d4:	98 ab       	std	Y+48, r25	; 0x30
    66d6:	8f a7       	std	Y+47, r24	; 0x2f
    66d8:	0f c0       	rjmp	.+30     	; 0x66f8 <Parallel_Parking+0x14dc>
    66da:	88 ec       	ldi	r24, 0xC8	; 200
    66dc:	90 e0       	ldi	r25, 0x00	; 0
    66de:	9e a7       	std	Y+46, r25	; 0x2e
    66e0:	8d a7       	std	Y+45, r24	; 0x2d
    66e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    66e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    66e6:	01 97       	sbiw	r24, 0x01	; 1
    66e8:	f1 f7       	brne	.-4      	; 0x66e6 <Parallel_Parking+0x14ca>
    66ea:	9e a7       	std	Y+46, r25	; 0x2e
    66ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    66f0:	98 a9       	ldd	r25, Y+48	; 0x30
    66f2:	01 97       	sbiw	r24, 0x01	; 1
    66f4:	98 ab       	std	Y+48, r25	; 0x30
    66f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    66fa:	98 a9       	ldd	r25, Y+48	; 0x30
    66fc:	00 97       	sbiw	r24, 0x00	; 0
    66fe:	69 f7       	brne	.-38     	; 0x66da <Parallel_Parking+0x14be>
    6700:	14 c0       	rjmp	.+40     	; 0x672a <Parallel_Parking+0x150e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6702:	69 a9       	ldd	r22, Y+49	; 0x31
    6704:	7a a9       	ldd	r23, Y+50	; 0x32
    6706:	8b a9       	ldd	r24, Y+51	; 0x33
    6708:	9c a9       	ldd	r25, Y+52	; 0x34
    670a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    670e:	dc 01       	movw	r26, r24
    6710:	cb 01       	movw	r24, r22
    6712:	98 ab       	std	Y+48, r25	; 0x30
    6714:	8f a7       	std	Y+47, r24	; 0x2f
    6716:	8f a5       	ldd	r24, Y+47	; 0x2f
    6718:	98 a9       	ldd	r25, Y+48	; 0x30
    671a:	9c a7       	std	Y+44, r25	; 0x2c
    671c:	8b a7       	std	Y+43, r24	; 0x2b
    671e:	8b a5       	ldd	r24, Y+43	; 0x2b
    6720:	9c a5       	ldd	r25, Y+44	; 0x2c
    6722:	01 97       	sbiw	r24, 0x01	; 1
    6724:	f1 f7       	brne	.-4      	; 0x6722 <Parallel_Parking+0x1506>
    6726:	9c a7       	std	Y+44, r25	; 0x2c
    6728:	8b a7       	std	Y+43, r24	; 0x2b
	STOP_DC_MOTOR();
    672a:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
	UART_voidSendData(0);//set servo 0
    672e:	80 e0       	ldi	r24, 0x00	; 0
    6730:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    6734:	80 e0       	ldi	r24, 0x00	; 0
    6736:	90 e0       	ldi	r25, 0x00	; 0
    6738:	aa e7       	ldi	r26, 0x7A	; 122
    673a:	b4 e4       	ldi	r27, 0x44	; 68
    673c:	8f a3       	std	Y+39, r24	; 0x27
    673e:	98 a7       	std	Y+40, r25	; 0x28
    6740:	a9 a7       	std	Y+41, r26	; 0x29
    6742:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6744:	6f a1       	ldd	r22, Y+39	; 0x27
    6746:	78 a5       	ldd	r23, Y+40	; 0x28
    6748:	89 a5       	ldd	r24, Y+41	; 0x29
    674a:	9a a5       	ldd	r25, Y+42	; 0x2a
    674c:	20 e0       	ldi	r18, 0x00	; 0
    674e:	30 e0       	ldi	r19, 0x00	; 0
    6750:	4a ef       	ldi	r20, 0xFA	; 250
    6752:	54 e4       	ldi	r21, 0x44	; 68
    6754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6758:	dc 01       	movw	r26, r24
    675a:	cb 01       	movw	r24, r22
    675c:	8b a3       	std	Y+35, r24	; 0x23
    675e:	9c a3       	std	Y+36, r25	; 0x24
    6760:	ad a3       	std	Y+37, r26	; 0x25
    6762:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6764:	6b a1       	ldd	r22, Y+35	; 0x23
    6766:	7c a1       	ldd	r23, Y+36	; 0x24
    6768:	8d a1       	ldd	r24, Y+37	; 0x25
    676a:	9e a1       	ldd	r25, Y+38	; 0x26
    676c:	20 e0       	ldi	r18, 0x00	; 0
    676e:	30 e0       	ldi	r19, 0x00	; 0
    6770:	40 e8       	ldi	r20, 0x80	; 128
    6772:	5f e3       	ldi	r21, 0x3F	; 63
    6774:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6778:	88 23       	and	r24, r24
    677a:	2c f4       	brge	.+10     	; 0x6786 <Parallel_Parking+0x156a>
		__ticks = 1;
    677c:	81 e0       	ldi	r24, 0x01	; 1
    677e:	90 e0       	ldi	r25, 0x00	; 0
    6780:	9a a3       	std	Y+34, r25	; 0x22
    6782:	89 a3       	std	Y+33, r24	; 0x21
    6784:	3f c0       	rjmp	.+126    	; 0x6804 <Parallel_Parking+0x15e8>
	else if (__tmp > 65535)
    6786:	6b a1       	ldd	r22, Y+35	; 0x23
    6788:	7c a1       	ldd	r23, Y+36	; 0x24
    678a:	8d a1       	ldd	r24, Y+37	; 0x25
    678c:	9e a1       	ldd	r25, Y+38	; 0x26
    678e:	20 e0       	ldi	r18, 0x00	; 0
    6790:	3f ef       	ldi	r19, 0xFF	; 255
    6792:	4f e7       	ldi	r20, 0x7F	; 127
    6794:	57 e4       	ldi	r21, 0x47	; 71
    6796:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    679a:	18 16       	cp	r1, r24
    679c:	4c f5       	brge	.+82     	; 0x67f0 <Parallel_Parking+0x15d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    679e:	6f a1       	ldd	r22, Y+39	; 0x27
    67a0:	78 a5       	ldd	r23, Y+40	; 0x28
    67a2:	89 a5       	ldd	r24, Y+41	; 0x29
    67a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    67a6:	20 e0       	ldi	r18, 0x00	; 0
    67a8:	30 e0       	ldi	r19, 0x00	; 0
    67aa:	40 e2       	ldi	r20, 0x20	; 32
    67ac:	51 e4       	ldi	r21, 0x41	; 65
    67ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67b2:	dc 01       	movw	r26, r24
    67b4:	cb 01       	movw	r24, r22
    67b6:	bc 01       	movw	r22, r24
    67b8:	cd 01       	movw	r24, r26
    67ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67be:	dc 01       	movw	r26, r24
    67c0:	cb 01       	movw	r24, r22
    67c2:	9a a3       	std	Y+34, r25	; 0x22
    67c4:	89 a3       	std	Y+33, r24	; 0x21
    67c6:	0f c0       	rjmp	.+30     	; 0x67e6 <Parallel_Parking+0x15ca>
    67c8:	88 ec       	ldi	r24, 0xC8	; 200
    67ca:	90 e0       	ldi	r25, 0x00	; 0
    67cc:	98 a3       	std	Y+32, r25	; 0x20
    67ce:	8f 8f       	std	Y+31, r24	; 0x1f
    67d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    67d2:	98 a1       	ldd	r25, Y+32	; 0x20
    67d4:	01 97       	sbiw	r24, 0x01	; 1
    67d6:	f1 f7       	brne	.-4      	; 0x67d4 <Parallel_Parking+0x15b8>
    67d8:	98 a3       	std	Y+32, r25	; 0x20
    67da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67dc:	89 a1       	ldd	r24, Y+33	; 0x21
    67de:	9a a1       	ldd	r25, Y+34	; 0x22
    67e0:	01 97       	sbiw	r24, 0x01	; 1
    67e2:	9a a3       	std	Y+34, r25	; 0x22
    67e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67e6:	89 a1       	ldd	r24, Y+33	; 0x21
    67e8:	9a a1       	ldd	r25, Y+34	; 0x22
    67ea:	00 97       	sbiw	r24, 0x00	; 0
    67ec:	69 f7       	brne	.-38     	; 0x67c8 <Parallel_Parking+0x15ac>
    67ee:	14 c0       	rjmp	.+40     	; 0x6818 <Parallel_Parking+0x15fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67f0:	6b a1       	ldd	r22, Y+35	; 0x23
    67f2:	7c a1       	ldd	r23, Y+36	; 0x24
    67f4:	8d a1       	ldd	r24, Y+37	; 0x25
    67f6:	9e a1       	ldd	r25, Y+38	; 0x26
    67f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67fc:	dc 01       	movw	r26, r24
    67fe:	cb 01       	movw	r24, r22
    6800:	9a a3       	std	Y+34, r25	; 0x22
    6802:	89 a3       	std	Y+33, r24	; 0x21
    6804:	89 a1       	ldd	r24, Y+33	; 0x21
    6806:	9a a1       	ldd	r25, Y+34	; 0x22
    6808:	9e 8f       	std	Y+30, r25	; 0x1e
    680a:	8d 8f       	std	Y+29, r24	; 0x1d
    680c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    680e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6810:	01 97       	sbiw	r24, 0x01	; 1
    6812:	f1 f7       	brne	.-4      	; 0x6810 <Parallel_Parking+0x15f4>
    6814:	9e 8f       	std	Y+30, r25	; 0x1e
    6816:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	UART_voidSendData(0);//set servo 0
    6818:	80 e0       	ldi	r24, 0x00	; 0
    681a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    681e:	80 e0       	ldi	r24, 0x00	; 0
    6820:	90 e0       	ldi	r25, 0x00	; 0
    6822:	aa ef       	ldi	r26, 0xFA	; 250
    6824:	b3 e4       	ldi	r27, 0x43	; 67
    6826:	89 8f       	std	Y+25, r24	; 0x19
    6828:	9a 8f       	std	Y+26, r25	; 0x1a
    682a:	ab 8f       	std	Y+27, r26	; 0x1b
    682c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    682e:	69 8d       	ldd	r22, Y+25	; 0x19
    6830:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6832:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6834:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6836:	20 e0       	ldi	r18, 0x00	; 0
    6838:	30 e0       	ldi	r19, 0x00	; 0
    683a:	4a ef       	ldi	r20, 0xFA	; 250
    683c:	54 e4       	ldi	r21, 0x44	; 68
    683e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6842:	dc 01       	movw	r26, r24
    6844:	cb 01       	movw	r24, r22
    6846:	8d 8b       	std	Y+21, r24	; 0x15
    6848:	9e 8b       	std	Y+22, r25	; 0x16
    684a:	af 8b       	std	Y+23, r26	; 0x17
    684c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    684e:	6d 89       	ldd	r22, Y+21	; 0x15
    6850:	7e 89       	ldd	r23, Y+22	; 0x16
    6852:	8f 89       	ldd	r24, Y+23	; 0x17
    6854:	98 8d       	ldd	r25, Y+24	; 0x18
    6856:	20 e0       	ldi	r18, 0x00	; 0
    6858:	30 e0       	ldi	r19, 0x00	; 0
    685a:	40 e8       	ldi	r20, 0x80	; 128
    685c:	5f e3       	ldi	r21, 0x3F	; 63
    685e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6862:	88 23       	and	r24, r24
    6864:	2c f4       	brge	.+10     	; 0x6870 <Parallel_Parking+0x1654>
		__ticks = 1;
    6866:	81 e0       	ldi	r24, 0x01	; 1
    6868:	90 e0       	ldi	r25, 0x00	; 0
    686a:	9c 8b       	std	Y+20, r25	; 0x14
    686c:	8b 8b       	std	Y+19, r24	; 0x13
    686e:	3f c0       	rjmp	.+126    	; 0x68ee <Parallel_Parking+0x16d2>
	else if (__tmp > 65535)
    6870:	6d 89       	ldd	r22, Y+21	; 0x15
    6872:	7e 89       	ldd	r23, Y+22	; 0x16
    6874:	8f 89       	ldd	r24, Y+23	; 0x17
    6876:	98 8d       	ldd	r25, Y+24	; 0x18
    6878:	20 e0       	ldi	r18, 0x00	; 0
    687a:	3f ef       	ldi	r19, 0xFF	; 255
    687c:	4f e7       	ldi	r20, 0x7F	; 127
    687e:	57 e4       	ldi	r21, 0x47	; 71
    6880:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6884:	18 16       	cp	r1, r24
    6886:	4c f5       	brge	.+82     	; 0x68da <Parallel_Parking+0x16be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6888:	69 8d       	ldd	r22, Y+25	; 0x19
    688a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    688c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    688e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6890:	20 e0       	ldi	r18, 0x00	; 0
    6892:	30 e0       	ldi	r19, 0x00	; 0
    6894:	40 e2       	ldi	r20, 0x20	; 32
    6896:	51 e4       	ldi	r21, 0x41	; 65
    6898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    689c:	dc 01       	movw	r26, r24
    689e:	cb 01       	movw	r24, r22
    68a0:	bc 01       	movw	r22, r24
    68a2:	cd 01       	movw	r24, r26
    68a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68a8:	dc 01       	movw	r26, r24
    68aa:	cb 01       	movw	r24, r22
    68ac:	9c 8b       	std	Y+20, r25	; 0x14
    68ae:	8b 8b       	std	Y+19, r24	; 0x13
    68b0:	0f c0       	rjmp	.+30     	; 0x68d0 <Parallel_Parking+0x16b4>
    68b2:	88 ec       	ldi	r24, 0xC8	; 200
    68b4:	90 e0       	ldi	r25, 0x00	; 0
    68b6:	9a 8b       	std	Y+18, r25	; 0x12
    68b8:	89 8b       	std	Y+17, r24	; 0x11
    68ba:	89 89       	ldd	r24, Y+17	; 0x11
    68bc:	9a 89       	ldd	r25, Y+18	; 0x12
    68be:	01 97       	sbiw	r24, 0x01	; 1
    68c0:	f1 f7       	brne	.-4      	; 0x68be <Parallel_Parking+0x16a2>
    68c2:	9a 8b       	std	Y+18, r25	; 0x12
    68c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68c6:	8b 89       	ldd	r24, Y+19	; 0x13
    68c8:	9c 89       	ldd	r25, Y+20	; 0x14
    68ca:	01 97       	sbiw	r24, 0x01	; 1
    68cc:	9c 8b       	std	Y+20, r25	; 0x14
    68ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68d0:	8b 89       	ldd	r24, Y+19	; 0x13
    68d2:	9c 89       	ldd	r25, Y+20	; 0x14
    68d4:	00 97       	sbiw	r24, 0x00	; 0
    68d6:	69 f7       	brne	.-38     	; 0x68b2 <Parallel_Parking+0x1696>
    68d8:	14 c0       	rjmp	.+40     	; 0x6902 <Parallel_Parking+0x16e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68da:	6d 89       	ldd	r22, Y+21	; 0x15
    68dc:	7e 89       	ldd	r23, Y+22	; 0x16
    68de:	8f 89       	ldd	r24, Y+23	; 0x17
    68e0:	98 8d       	ldd	r25, Y+24	; 0x18
    68e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68e6:	dc 01       	movw	r26, r24
    68e8:	cb 01       	movw	r24, r22
    68ea:	9c 8b       	std	Y+20, r25	; 0x14
    68ec:	8b 8b       	std	Y+19, r24	; 0x13
    68ee:	8b 89       	ldd	r24, Y+19	; 0x13
    68f0:	9c 89       	ldd	r25, Y+20	; 0x14
    68f2:	98 8b       	std	Y+16, r25	; 0x10
    68f4:	8f 87       	std	Y+15, r24	; 0x0f
    68f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    68f8:	98 89       	ldd	r25, Y+16	; 0x10
    68fa:	01 97       	sbiw	r24, 0x01	; 1
    68fc:	f1 f7       	brne	.-4      	; 0x68fa <Parallel_Parking+0x16de>
    68fe:	98 8b       	std	Y+16, r25	; 0x10
    6900:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
    6902:	86 e9       	ldi	r24, 0x96	; 150
    6904:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <MOVE_FORWARD>
	_delay_ms(time_of_fourth_move_of_parallel_parking*10);//equation done time_of_fourth_move_back_of_parallel_parking
    6908:	80 91 8a 01 	lds	r24, 0x018A
    690c:	90 91 8b 01 	lds	r25, 0x018B
    6910:	a0 91 8c 01 	lds	r26, 0x018C
    6914:	b0 91 8d 01 	lds	r27, 0x018D
    6918:	bc 01       	movw	r22, r24
    691a:	cd 01       	movw	r24, r26
    691c:	20 e0       	ldi	r18, 0x00	; 0
    691e:	30 e0       	ldi	r19, 0x00	; 0
    6920:	40 e2       	ldi	r20, 0x20	; 32
    6922:	51 e4       	ldi	r21, 0x41	; 65
    6924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6928:	dc 01       	movw	r26, r24
    692a:	cb 01       	movw	r24, r22
    692c:	8b 87       	std	Y+11, r24	; 0x0b
    692e:	9c 87       	std	Y+12, r25	; 0x0c
    6930:	ad 87       	std	Y+13, r26	; 0x0d
    6932:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6934:	6b 85       	ldd	r22, Y+11	; 0x0b
    6936:	7c 85       	ldd	r23, Y+12	; 0x0c
    6938:	8d 85       	ldd	r24, Y+13	; 0x0d
    693a:	9e 85       	ldd	r25, Y+14	; 0x0e
    693c:	20 e0       	ldi	r18, 0x00	; 0
    693e:	30 e0       	ldi	r19, 0x00	; 0
    6940:	4a ef       	ldi	r20, 0xFA	; 250
    6942:	54 e4       	ldi	r21, 0x44	; 68
    6944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6948:	dc 01       	movw	r26, r24
    694a:	cb 01       	movw	r24, r22
    694c:	8f 83       	std	Y+7, r24	; 0x07
    694e:	98 87       	std	Y+8, r25	; 0x08
    6950:	a9 87       	std	Y+9, r26	; 0x09
    6952:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6954:	6f 81       	ldd	r22, Y+7	; 0x07
    6956:	78 85       	ldd	r23, Y+8	; 0x08
    6958:	89 85       	ldd	r24, Y+9	; 0x09
    695a:	9a 85       	ldd	r25, Y+10	; 0x0a
    695c:	20 e0       	ldi	r18, 0x00	; 0
    695e:	30 e0       	ldi	r19, 0x00	; 0
    6960:	40 e8       	ldi	r20, 0x80	; 128
    6962:	5f e3       	ldi	r21, 0x3F	; 63
    6964:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6968:	88 23       	and	r24, r24
    696a:	2c f4       	brge	.+10     	; 0x6976 <Parallel_Parking+0x175a>
		__ticks = 1;
    696c:	81 e0       	ldi	r24, 0x01	; 1
    696e:	90 e0       	ldi	r25, 0x00	; 0
    6970:	9e 83       	std	Y+6, r25	; 0x06
    6972:	8d 83       	std	Y+5, r24	; 0x05
    6974:	3f c0       	rjmp	.+126    	; 0x69f4 <Parallel_Parking+0x17d8>
	else if (__tmp > 65535)
    6976:	6f 81       	ldd	r22, Y+7	; 0x07
    6978:	78 85       	ldd	r23, Y+8	; 0x08
    697a:	89 85       	ldd	r24, Y+9	; 0x09
    697c:	9a 85       	ldd	r25, Y+10	; 0x0a
    697e:	20 e0       	ldi	r18, 0x00	; 0
    6980:	3f ef       	ldi	r19, 0xFF	; 255
    6982:	4f e7       	ldi	r20, 0x7F	; 127
    6984:	57 e4       	ldi	r21, 0x47	; 71
    6986:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    698a:	18 16       	cp	r1, r24
    698c:	4c f5       	brge	.+82     	; 0x69e0 <Parallel_Parking+0x17c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    698e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6990:	7c 85       	ldd	r23, Y+12	; 0x0c
    6992:	8d 85       	ldd	r24, Y+13	; 0x0d
    6994:	9e 85       	ldd	r25, Y+14	; 0x0e
    6996:	20 e0       	ldi	r18, 0x00	; 0
    6998:	30 e0       	ldi	r19, 0x00	; 0
    699a:	40 e2       	ldi	r20, 0x20	; 32
    699c:	51 e4       	ldi	r21, 0x41	; 65
    699e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69a2:	dc 01       	movw	r26, r24
    69a4:	cb 01       	movw	r24, r22
    69a6:	bc 01       	movw	r22, r24
    69a8:	cd 01       	movw	r24, r26
    69aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69ae:	dc 01       	movw	r26, r24
    69b0:	cb 01       	movw	r24, r22
    69b2:	9e 83       	std	Y+6, r25	; 0x06
    69b4:	8d 83       	std	Y+5, r24	; 0x05
    69b6:	0f c0       	rjmp	.+30     	; 0x69d6 <Parallel_Parking+0x17ba>
    69b8:	88 ec       	ldi	r24, 0xC8	; 200
    69ba:	90 e0       	ldi	r25, 0x00	; 0
    69bc:	9c 83       	std	Y+4, r25	; 0x04
    69be:	8b 83       	std	Y+3, r24	; 0x03
    69c0:	8b 81       	ldd	r24, Y+3	; 0x03
    69c2:	9c 81       	ldd	r25, Y+4	; 0x04
    69c4:	01 97       	sbiw	r24, 0x01	; 1
    69c6:	f1 f7       	brne	.-4      	; 0x69c4 <Parallel_Parking+0x17a8>
    69c8:	9c 83       	std	Y+4, r25	; 0x04
    69ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69cc:	8d 81       	ldd	r24, Y+5	; 0x05
    69ce:	9e 81       	ldd	r25, Y+6	; 0x06
    69d0:	01 97       	sbiw	r24, 0x01	; 1
    69d2:	9e 83       	std	Y+6, r25	; 0x06
    69d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69d6:	8d 81       	ldd	r24, Y+5	; 0x05
    69d8:	9e 81       	ldd	r25, Y+6	; 0x06
    69da:	00 97       	sbiw	r24, 0x00	; 0
    69dc:	69 f7       	brne	.-38     	; 0x69b8 <Parallel_Parking+0x179c>
    69de:	14 c0       	rjmp	.+40     	; 0x6a08 <Parallel_Parking+0x17ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69e0:	6f 81       	ldd	r22, Y+7	; 0x07
    69e2:	78 85       	ldd	r23, Y+8	; 0x08
    69e4:	89 85       	ldd	r24, Y+9	; 0x09
    69e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    69e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69ec:	dc 01       	movw	r26, r24
    69ee:	cb 01       	movw	r24, r22
    69f0:	9e 83       	std	Y+6, r25	; 0x06
    69f2:	8d 83       	std	Y+5, r24	; 0x05
    69f4:	8d 81       	ldd	r24, Y+5	; 0x05
    69f6:	9e 81       	ldd	r25, Y+6	; 0x06
    69f8:	9a 83       	std	Y+2, r25	; 0x02
    69fa:	89 83       	std	Y+1, r24	; 0x01
    69fc:	89 81       	ldd	r24, Y+1	; 0x01
    69fe:	9a 81       	ldd	r25, Y+2	; 0x02
    6a00:	01 97       	sbiw	r24, 0x01	; 1
    6a02:	f1 f7       	brne	.-4      	; 0x6a00 <Parallel_Parking+0x17e4>
    6a04:	9a 83       	std	Y+2, r25	; 0x02
    6a06:	89 83       	std	Y+1, r24	; 0x01
	STOP_DC_MOTOR();
    6a08:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
}
    6a0c:	c4 50       	subi	r28, 0x04	; 4
    6a0e:	df 4f       	sbci	r29, 0xFF	; 255
    6a10:	0f b6       	in	r0, 0x3f	; 63
    6a12:	f8 94       	cli
    6a14:	de bf       	out	0x3e, r29	; 62
    6a16:	0f be       	out	0x3f, r0	; 63
    6a18:	cd bf       	out	0x3d, r28	; 61
    6a1a:	cf 91       	pop	r28
    6a1c:	df 91       	pop	r29
    6a1e:	1f 91       	pop	r17
    6a20:	0f 91       	pop	r16
    6a22:	08 95       	ret

00006a24 <MOVE_BACKWORD_2_perpindicular>:

void MOVE_BACKWORD_2_perpindicular(u8 Copy_u8Speed)
{
    6a24:	df 93       	push	r29
    6a26:	cf 93       	push	r28
    6a28:	0f 92       	push	r0
    6a2a:	cd b7       	in	r28, 0x3d	; 61
    6a2c:	de b7       	in	r29, 0x3e	; 62
    6a2e:	89 83       	std	Y+1, r24	; 0x01

	PWM2_voidSetOcrValue(Copy_u8Speed);
    6a30:	89 81       	ldd	r24, Y+1	; 0x01
    6a32:	88 2f       	mov	r24, r24
    6a34:	90 e0       	ldi	r25, 0x00	; 0
    6a36:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <PWM2_voidSetOcrValue>
	DC_MOTOR2_voidRotateAntiClockwise();
    6a3a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <DC_MOTOR2_voidRotateAntiClockwise>
	DC_MOTOR3_voidRotateAntiClockwise();
    6a3e:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DC_MOTOR3_voidRotateAntiClockwise>
}
    6a42:	0f 90       	pop	r0
    6a44:	cf 91       	pop	r28
    6a46:	df 91       	pop	r29
    6a48:	08 95       	ret

00006a4a <STOP_DC_MOTOR>:
void STOP_DC_MOTOR(void)
{
    6a4a:	df 93       	push	r29
    6a4c:	cf 93       	push	r28
    6a4e:	cd b7       	in	r28, 0x3d	; 61
    6a50:	de b7       	in	r29, 0x3e	; 62
	DC_MOTOR1_voidStop();
    6a52:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <DC_MOTOR1_voidStop>
	DC_MOTOR2_voidStop();
    6a56:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <DC_MOTOR2_voidStop>
	DC_MOTOR3_voidStop();
    6a5a:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <DC_MOTOR3_voidStop>
	DC_MOTOR4_voidStop();
    6a5e:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <DC_MOTOR4_voidStop>
}
    6a62:	cf 91       	pop	r28
    6a64:	df 91       	pop	r29
    6a66:	08 95       	ret

00006a68 <MOVE_FORWARD_2_perpindicular>:
void MOVE_FORWARD_2_perpindicular(u8 Copy_u8Speed)
{
    6a68:	df 93       	push	r29
    6a6a:	cf 93       	push	r28
    6a6c:	0f 92       	push	r0
    6a6e:	cd b7       	in	r28, 0x3d	; 61
    6a70:	de b7       	in	r29, 0x3e	; 62
    6a72:	89 83       	std	Y+1, r24	; 0x01

	PWM2_voidSetOcrValue(Copy_u8Speed);
    6a74:	89 81       	ldd	r24, Y+1	; 0x01
    6a76:	88 2f       	mov	r24, r24
    6a78:	90 e0       	ldi	r25, 0x00	; 0
    6a7a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <PWM2_voidSetOcrValue>
	DC_MOTOR2_voidRotateClockwise();
    6a7e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DC_MOTOR2_voidRotateClockwise>
	DC_MOTOR3_voidRotateClockwise();
    6a82:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <DC_MOTOR3_voidRotateClockwise>
}
    6a86:	0f 90       	pop	r0
    6a88:	cf 91       	pop	r28
    6a8a:	df 91       	pop	r29
    6a8c:	08 95       	ret

00006a8e <MOVE_BACKWORD>:
void MOVE_BACKWORD(u8 Copy_u8Speed)
{
    6a8e:	df 93       	push	r29
    6a90:	cf 93       	push	r28
    6a92:	0f 92       	push	r0
    6a94:	cd b7       	in	r28, 0x3d	; 61
    6a96:	de b7       	in	r29, 0x3e	; 62
    6a98:	89 83       	std	Y+1, r24	; 0x01

	PWM2_voidSetOcrValue(Copy_u8Speed);
    6a9a:	89 81       	ldd	r24, Y+1	; 0x01
    6a9c:	88 2f       	mov	r24, r24
    6a9e:	90 e0       	ldi	r25, 0x00	; 0
    6aa0:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <PWM2_voidSetOcrValue>
	DC_MOTOR1_voidRotateAntiClockwise();
    6aa4:	0e 94 c7 0c 	call	0x198e	; 0x198e <DC_MOTOR1_voidRotateAntiClockwise>
	DC_MOTOR2_voidRotateAntiClockwise();
    6aa8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <DC_MOTOR2_voidRotateAntiClockwise>
	DC_MOTOR3_voidRotateAntiClockwise();
    6aac:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DC_MOTOR3_voidRotateAntiClockwise>
	DC_MOTOR4_voidRotateAntiClockwise();
    6ab0:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DC_MOTOR4_voidRotateAntiClockwise>
}
    6ab4:	0f 90       	pop	r0
    6ab6:	cf 91       	pop	r28
    6ab8:	df 91       	pop	r29
    6aba:	08 95       	ret

00006abc <MOVE_BACKWORD_1_perpindicular>:
void MOVE_BACKWORD_1_perpindicular(u8 Copy_u8Speed)
{
    6abc:	df 93       	push	r29
    6abe:	cf 93       	push	r28
    6ac0:	0f 92       	push	r0
    6ac2:	cd b7       	in	r28, 0x3d	; 61
    6ac4:	de b7       	in	r29, 0x3e	; 62
    6ac6:	89 83       	std	Y+1, r24	; 0x01

	PWM2_voidSetOcrValue(Copy_u8Speed);
    6ac8:	89 81       	ldd	r24, Y+1	; 0x01
    6aca:	88 2f       	mov	r24, r24
    6acc:	90 e0       	ldi	r25, 0x00	; 0
    6ace:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <PWM2_voidSetOcrValue>
	DC_MOTOR1_voidRotateAntiClockwise();
    6ad2:	0e 94 c7 0c 	call	0x198e	; 0x198e <DC_MOTOR1_voidRotateAntiClockwise>
	DC_MOTOR4_voidRotateAntiClockwise();
    6ad6:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DC_MOTOR4_voidRotateAntiClockwise>
}
    6ada:	0f 90       	pop	r0
    6adc:	cf 91       	pop	r28
    6ade:	df 91       	pop	r29
    6ae0:	08 95       	ret

00006ae2 <MOVE_FORWARD>:
void MOVE_FORWARD(u8 Copy_u8Speed)
{
    6ae2:	df 93       	push	r29
    6ae4:	cf 93       	push	r28
    6ae6:	0f 92       	push	r0
    6ae8:	cd b7       	in	r28, 0x3d	; 61
    6aea:	de b7       	in	r29, 0x3e	; 62
    6aec:	89 83       	std	Y+1, r24	; 0x01

	PWM2_voidSetOcrValue(Copy_u8Speed);
    6aee:	89 81       	ldd	r24, Y+1	; 0x01
    6af0:	88 2f       	mov	r24, r24
    6af2:	90 e0       	ldi	r25, 0x00	; 0
    6af4:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <PWM2_voidSetOcrValue>
	DC_MOTOR1_voidRotateClockwise();
    6af8:	0e 94 b6 0c 	call	0x196c	; 0x196c <DC_MOTOR1_voidRotateClockwise>
	DC_MOTOR2_voidRotateClockwise();
    6afc:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DC_MOTOR2_voidRotateClockwise>
	DC_MOTOR3_voidRotateClockwise();
    6b00:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <DC_MOTOR3_voidRotateClockwise>
	DC_MOTOR4_voidRotateClockwise();
    6b04:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <DC_MOTOR4_voidRotateClockwise>
}
    6b08:	0f 90       	pop	r0
    6b0a:	cf 91       	pop	r28
    6b0c:	df 91       	pop	r29
    6b0e:	08 95       	ret

00006b10 <MOVE_FORWARD_1_perpindicular>:
void MOVE_FORWARD_1_perpindicular(u8 Copy_u8Speed)
{
    6b10:	df 93       	push	r29
    6b12:	cf 93       	push	r28
    6b14:	0f 92       	push	r0
    6b16:	cd b7       	in	r28, 0x3d	; 61
    6b18:	de b7       	in	r29, 0x3e	; 62
    6b1a:	89 83       	std	Y+1, r24	; 0x01

	PWM2_voidSetOcrValue(Copy_u8Speed);
    6b1c:	89 81       	ldd	r24, Y+1	; 0x01
    6b1e:	88 2f       	mov	r24, r24
    6b20:	90 e0       	ldi	r25, 0x00	; 0
    6b22:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <PWM2_voidSetOcrValue>
	DC_MOTOR1_voidRotateClockwise();
    6b26:	0e 94 b6 0c 	call	0x196c	; 0x196c <DC_MOTOR1_voidRotateClockwise>
	DC_MOTOR4_voidRotateClockwise();
    6b2a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <DC_MOTOR4_voidRotateClockwise>
}
    6b2e:	0f 90       	pop	r0
    6b30:	cf 91       	pop	r28
    6b32:	df 91       	pop	r29
    6b34:	08 95       	ret

00006b36 <DC_MOTORS_Init>:
void DC_MOTORS_Init(void)
{
    6b36:	df 93       	push	r29
    6b38:	cf 93       	push	r28
    6b3a:	cd b7       	in	r28, 0x3d	; 61
    6b3c:	de b7       	in	r29, 0x3e	; 62
	DC_MOTOR1_Init();
    6b3e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DC_MOTOR1_Init>
	DC_MOTOR2_Init();
    6b42:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <DC_MOTOR2_Init>
	DC_MOTOR3_Init();
    6b46:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <DC_MOTOR3_Init>
	DC_MOTOR4_Init();
    6b4a:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <DC_MOTOR4_Init>
}
    6b4e:	cf 91       	pop	r28
    6b50:	df 91       	pop	r29
    6b52:	08 95       	ret

00006b54 <ExitParallel>:




void ExitParallel(void)
{
    6b54:	0f 93       	push	r16
    6b56:	1f 93       	push	r17
    6b58:	df 93       	push	r29
    6b5a:	cf 93       	push	r28
    6b5c:	cd b7       	in	r28, 0x3d	; 61
    6b5e:	de b7       	in	r29, 0x3e	; 62
    6b60:	c2 56       	subi	r28, 0x62	; 98
    6b62:	d0 40       	sbci	r29, 0x00	; 0
    6b64:	0f b6       	in	r0, 0x3f	; 63
    6b66:	f8 94       	cli
    6b68:	de bf       	out	0x3e, r29	; 62
    6b6a:	0f be       	out	0x3f, r0	; 63
    6b6c:	cd bf       	out	0x3d, r28	; 61

	UART_voidSendData(135);//set servo 135
    6b6e:	87 e8       	ldi	r24, 0x87	; 135
    6b70:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    6b74:	fe 01       	movw	r30, r28
    6b76:	e1 5a       	subi	r30, 0xA1	; 161
    6b78:	ff 4f       	sbci	r31, 0xFF	; 255
    6b7a:	80 e0       	ldi	r24, 0x00	; 0
    6b7c:	90 e8       	ldi	r25, 0x80	; 128
    6b7e:	ab eb       	ldi	r26, 0xBB	; 187
    6b80:	b4 e4       	ldi	r27, 0x44	; 68
    6b82:	80 83       	st	Z, r24
    6b84:	91 83       	std	Z+1, r25	; 0x01
    6b86:	a2 83       	std	Z+2, r26	; 0x02
    6b88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b8a:	8e 01       	movw	r16, r28
    6b8c:	05 5a       	subi	r16, 0xA5	; 165
    6b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    6b90:	fe 01       	movw	r30, r28
    6b92:	e1 5a       	subi	r30, 0xA1	; 161
    6b94:	ff 4f       	sbci	r31, 0xFF	; 255
    6b96:	60 81       	ld	r22, Z
    6b98:	71 81       	ldd	r23, Z+1	; 0x01
    6b9a:	82 81       	ldd	r24, Z+2	; 0x02
    6b9c:	93 81       	ldd	r25, Z+3	; 0x03
    6b9e:	20 e0       	ldi	r18, 0x00	; 0
    6ba0:	30 e0       	ldi	r19, 0x00	; 0
    6ba2:	4a ef       	ldi	r20, 0xFA	; 250
    6ba4:	54 e4       	ldi	r21, 0x44	; 68
    6ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6baa:	dc 01       	movw	r26, r24
    6bac:	cb 01       	movw	r24, r22
    6bae:	f8 01       	movw	r30, r16
    6bb0:	80 83       	st	Z, r24
    6bb2:	91 83       	std	Z+1, r25	; 0x01
    6bb4:	a2 83       	std	Z+2, r26	; 0x02
    6bb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6bb8:	fe 01       	movw	r30, r28
    6bba:	e5 5a       	subi	r30, 0xA5	; 165
    6bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    6bbe:	60 81       	ld	r22, Z
    6bc0:	71 81       	ldd	r23, Z+1	; 0x01
    6bc2:	82 81       	ldd	r24, Z+2	; 0x02
    6bc4:	93 81       	ldd	r25, Z+3	; 0x03
    6bc6:	20 e0       	ldi	r18, 0x00	; 0
    6bc8:	30 e0       	ldi	r19, 0x00	; 0
    6bca:	40 e8       	ldi	r20, 0x80	; 128
    6bcc:	5f e3       	ldi	r21, 0x3F	; 63
    6bce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6bd2:	88 23       	and	r24, r24
    6bd4:	44 f4       	brge	.+16     	; 0x6be6 <ExitParallel+0x92>
		__ticks = 1;
    6bd6:	fe 01       	movw	r30, r28
    6bd8:	e7 5a       	subi	r30, 0xA7	; 167
    6bda:	ff 4f       	sbci	r31, 0xFF	; 255
    6bdc:	81 e0       	ldi	r24, 0x01	; 1
    6bde:	90 e0       	ldi	r25, 0x00	; 0
    6be0:	91 83       	std	Z+1, r25	; 0x01
    6be2:	80 83       	st	Z, r24
    6be4:	64 c0       	rjmp	.+200    	; 0x6cae <ExitParallel+0x15a>
	else if (__tmp > 65535)
    6be6:	fe 01       	movw	r30, r28
    6be8:	e5 5a       	subi	r30, 0xA5	; 165
    6bea:	ff 4f       	sbci	r31, 0xFF	; 255
    6bec:	60 81       	ld	r22, Z
    6bee:	71 81       	ldd	r23, Z+1	; 0x01
    6bf0:	82 81       	ldd	r24, Z+2	; 0x02
    6bf2:	93 81       	ldd	r25, Z+3	; 0x03
    6bf4:	20 e0       	ldi	r18, 0x00	; 0
    6bf6:	3f ef       	ldi	r19, 0xFF	; 255
    6bf8:	4f e7       	ldi	r20, 0x7F	; 127
    6bfa:	57 e4       	ldi	r21, 0x47	; 71
    6bfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6c00:	18 16       	cp	r1, r24
    6c02:	0c f0       	brlt	.+2      	; 0x6c06 <ExitParallel+0xb2>
    6c04:	43 c0       	rjmp	.+134    	; 0x6c8c <ExitParallel+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c06:	fe 01       	movw	r30, r28
    6c08:	e1 5a       	subi	r30, 0xA1	; 161
    6c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    6c0c:	60 81       	ld	r22, Z
    6c0e:	71 81       	ldd	r23, Z+1	; 0x01
    6c10:	82 81       	ldd	r24, Z+2	; 0x02
    6c12:	93 81       	ldd	r25, Z+3	; 0x03
    6c14:	20 e0       	ldi	r18, 0x00	; 0
    6c16:	30 e0       	ldi	r19, 0x00	; 0
    6c18:	40 e2       	ldi	r20, 0x20	; 32
    6c1a:	51 e4       	ldi	r21, 0x41	; 65
    6c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c20:	dc 01       	movw	r26, r24
    6c22:	cb 01       	movw	r24, r22
    6c24:	8e 01       	movw	r16, r28
    6c26:	07 5a       	subi	r16, 0xA7	; 167
    6c28:	1f 4f       	sbci	r17, 0xFF	; 255
    6c2a:	bc 01       	movw	r22, r24
    6c2c:	cd 01       	movw	r24, r26
    6c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c32:	dc 01       	movw	r26, r24
    6c34:	cb 01       	movw	r24, r22
    6c36:	f8 01       	movw	r30, r16
    6c38:	91 83       	std	Z+1, r25	; 0x01
    6c3a:	80 83       	st	Z, r24
    6c3c:	1f c0       	rjmp	.+62     	; 0x6c7c <ExitParallel+0x128>
    6c3e:	fe 01       	movw	r30, r28
    6c40:	e9 5a       	subi	r30, 0xA9	; 169
    6c42:	ff 4f       	sbci	r31, 0xFF	; 255
    6c44:	88 ec       	ldi	r24, 0xC8	; 200
    6c46:	90 e0       	ldi	r25, 0x00	; 0
    6c48:	91 83       	std	Z+1, r25	; 0x01
    6c4a:	80 83       	st	Z, r24
    6c4c:	fe 01       	movw	r30, r28
    6c4e:	e9 5a       	subi	r30, 0xA9	; 169
    6c50:	ff 4f       	sbci	r31, 0xFF	; 255
    6c52:	80 81       	ld	r24, Z
    6c54:	91 81       	ldd	r25, Z+1	; 0x01
    6c56:	01 97       	sbiw	r24, 0x01	; 1
    6c58:	f1 f7       	brne	.-4      	; 0x6c56 <ExitParallel+0x102>
    6c5a:	fe 01       	movw	r30, r28
    6c5c:	e9 5a       	subi	r30, 0xA9	; 169
    6c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    6c60:	91 83       	std	Z+1, r25	; 0x01
    6c62:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c64:	de 01       	movw	r26, r28
    6c66:	a7 5a       	subi	r26, 0xA7	; 167
    6c68:	bf 4f       	sbci	r27, 0xFF	; 255
    6c6a:	fe 01       	movw	r30, r28
    6c6c:	e7 5a       	subi	r30, 0xA7	; 167
    6c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    6c70:	80 81       	ld	r24, Z
    6c72:	91 81       	ldd	r25, Z+1	; 0x01
    6c74:	01 97       	sbiw	r24, 0x01	; 1
    6c76:	11 96       	adiw	r26, 0x01	; 1
    6c78:	9c 93       	st	X, r25
    6c7a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c7c:	fe 01       	movw	r30, r28
    6c7e:	e7 5a       	subi	r30, 0xA7	; 167
    6c80:	ff 4f       	sbci	r31, 0xFF	; 255
    6c82:	80 81       	ld	r24, Z
    6c84:	91 81       	ldd	r25, Z+1	; 0x01
    6c86:	00 97       	sbiw	r24, 0x00	; 0
    6c88:	d1 f6       	brne	.-76     	; 0x6c3e <ExitParallel+0xea>
    6c8a:	27 c0       	rjmp	.+78     	; 0x6cda <ExitParallel+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c8c:	8e 01       	movw	r16, r28
    6c8e:	07 5a       	subi	r16, 0xA7	; 167
    6c90:	1f 4f       	sbci	r17, 0xFF	; 255
    6c92:	fe 01       	movw	r30, r28
    6c94:	e5 5a       	subi	r30, 0xA5	; 165
    6c96:	ff 4f       	sbci	r31, 0xFF	; 255
    6c98:	60 81       	ld	r22, Z
    6c9a:	71 81       	ldd	r23, Z+1	; 0x01
    6c9c:	82 81       	ldd	r24, Z+2	; 0x02
    6c9e:	93 81       	ldd	r25, Z+3	; 0x03
    6ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ca4:	dc 01       	movw	r26, r24
    6ca6:	cb 01       	movw	r24, r22
    6ca8:	f8 01       	movw	r30, r16
    6caa:	91 83       	std	Z+1, r25	; 0x01
    6cac:	80 83       	st	Z, r24
    6cae:	de 01       	movw	r26, r28
    6cb0:	ab 5a       	subi	r26, 0xAB	; 171
    6cb2:	bf 4f       	sbci	r27, 0xFF	; 255
    6cb4:	fe 01       	movw	r30, r28
    6cb6:	e7 5a       	subi	r30, 0xA7	; 167
    6cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    6cba:	80 81       	ld	r24, Z
    6cbc:	91 81       	ldd	r25, Z+1	; 0x01
    6cbe:	8d 93       	st	X+, r24
    6cc0:	9c 93       	st	X, r25
    6cc2:	fe 01       	movw	r30, r28
    6cc4:	eb 5a       	subi	r30, 0xAB	; 171
    6cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    6cc8:	80 81       	ld	r24, Z
    6cca:	91 81       	ldd	r25, Z+1	; 0x01
    6ccc:	01 97       	sbiw	r24, 0x01	; 1
    6cce:	f1 f7       	brne	.-4      	; 0x6ccc <ExitParallel+0x178>
    6cd0:	fe 01       	movw	r30, r28
    6cd2:	eb 5a       	subi	r30, 0xAB	; 171
    6cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    6cd6:	91 83       	std	Z+1, r25	; 0x01
    6cd8:	80 83       	st	Z, r24
	_delay_ms(1500);
	MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
    6cda:	86 e9       	ldi	r24, 0x96	; 150
    6cdc:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <MOVE_FORWARD>
	_delay_ms((time_of_first_move_of_parallel_parking*10));
    6ce0:	80 91 90 01 	lds	r24, 0x0190
    6ce4:	90 91 91 01 	lds	r25, 0x0191
    6ce8:	a0 91 92 01 	lds	r26, 0x0192
    6cec:	b0 91 93 01 	lds	r27, 0x0193
    6cf0:	bc 01       	movw	r22, r24
    6cf2:	cd 01       	movw	r24, r26
    6cf4:	20 e0       	ldi	r18, 0x00	; 0
    6cf6:	30 e0       	ldi	r19, 0x00	; 0
    6cf8:	40 e2       	ldi	r20, 0x20	; 32
    6cfa:	51 e4       	ldi	r21, 0x41	; 65
    6cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d00:	dc 01       	movw	r26, r24
    6d02:	cb 01       	movw	r24, r22
    6d04:	fe 01       	movw	r30, r28
    6d06:	ef 5a       	subi	r30, 0xAF	; 175
    6d08:	ff 4f       	sbci	r31, 0xFF	; 255
    6d0a:	80 83       	st	Z, r24
    6d0c:	91 83       	std	Z+1, r25	; 0x01
    6d0e:	a2 83       	std	Z+2, r26	; 0x02
    6d10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d12:	8e 01       	movw	r16, r28
    6d14:	03 5b       	subi	r16, 0xB3	; 179
    6d16:	1f 4f       	sbci	r17, 0xFF	; 255
    6d18:	fe 01       	movw	r30, r28
    6d1a:	ef 5a       	subi	r30, 0xAF	; 175
    6d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    6d1e:	60 81       	ld	r22, Z
    6d20:	71 81       	ldd	r23, Z+1	; 0x01
    6d22:	82 81       	ldd	r24, Z+2	; 0x02
    6d24:	93 81       	ldd	r25, Z+3	; 0x03
    6d26:	20 e0       	ldi	r18, 0x00	; 0
    6d28:	30 e0       	ldi	r19, 0x00	; 0
    6d2a:	4a ef       	ldi	r20, 0xFA	; 250
    6d2c:	54 e4       	ldi	r21, 0x44	; 68
    6d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d32:	dc 01       	movw	r26, r24
    6d34:	cb 01       	movw	r24, r22
    6d36:	f8 01       	movw	r30, r16
    6d38:	80 83       	st	Z, r24
    6d3a:	91 83       	std	Z+1, r25	; 0x01
    6d3c:	a2 83       	std	Z+2, r26	; 0x02
    6d3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6d40:	fe 01       	movw	r30, r28
    6d42:	e3 5b       	subi	r30, 0xB3	; 179
    6d44:	ff 4f       	sbci	r31, 0xFF	; 255
    6d46:	60 81       	ld	r22, Z
    6d48:	71 81       	ldd	r23, Z+1	; 0x01
    6d4a:	82 81       	ldd	r24, Z+2	; 0x02
    6d4c:	93 81       	ldd	r25, Z+3	; 0x03
    6d4e:	20 e0       	ldi	r18, 0x00	; 0
    6d50:	30 e0       	ldi	r19, 0x00	; 0
    6d52:	40 e8       	ldi	r20, 0x80	; 128
    6d54:	5f e3       	ldi	r21, 0x3F	; 63
    6d56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6d5a:	88 23       	and	r24, r24
    6d5c:	44 f4       	brge	.+16     	; 0x6d6e <ExitParallel+0x21a>
		__ticks = 1;
    6d5e:	fe 01       	movw	r30, r28
    6d60:	e5 5b       	subi	r30, 0xB5	; 181
    6d62:	ff 4f       	sbci	r31, 0xFF	; 255
    6d64:	81 e0       	ldi	r24, 0x01	; 1
    6d66:	90 e0       	ldi	r25, 0x00	; 0
    6d68:	91 83       	std	Z+1, r25	; 0x01
    6d6a:	80 83       	st	Z, r24
    6d6c:	64 c0       	rjmp	.+200    	; 0x6e36 <ExitParallel+0x2e2>
	else if (__tmp > 65535)
    6d6e:	fe 01       	movw	r30, r28
    6d70:	e3 5b       	subi	r30, 0xB3	; 179
    6d72:	ff 4f       	sbci	r31, 0xFF	; 255
    6d74:	60 81       	ld	r22, Z
    6d76:	71 81       	ldd	r23, Z+1	; 0x01
    6d78:	82 81       	ldd	r24, Z+2	; 0x02
    6d7a:	93 81       	ldd	r25, Z+3	; 0x03
    6d7c:	20 e0       	ldi	r18, 0x00	; 0
    6d7e:	3f ef       	ldi	r19, 0xFF	; 255
    6d80:	4f e7       	ldi	r20, 0x7F	; 127
    6d82:	57 e4       	ldi	r21, 0x47	; 71
    6d84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6d88:	18 16       	cp	r1, r24
    6d8a:	0c f0       	brlt	.+2      	; 0x6d8e <ExitParallel+0x23a>
    6d8c:	43 c0       	rjmp	.+134    	; 0x6e14 <ExitParallel+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d8e:	fe 01       	movw	r30, r28
    6d90:	ef 5a       	subi	r30, 0xAF	; 175
    6d92:	ff 4f       	sbci	r31, 0xFF	; 255
    6d94:	60 81       	ld	r22, Z
    6d96:	71 81       	ldd	r23, Z+1	; 0x01
    6d98:	82 81       	ldd	r24, Z+2	; 0x02
    6d9a:	93 81       	ldd	r25, Z+3	; 0x03
    6d9c:	20 e0       	ldi	r18, 0x00	; 0
    6d9e:	30 e0       	ldi	r19, 0x00	; 0
    6da0:	40 e2       	ldi	r20, 0x20	; 32
    6da2:	51 e4       	ldi	r21, 0x41	; 65
    6da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6da8:	dc 01       	movw	r26, r24
    6daa:	cb 01       	movw	r24, r22
    6dac:	8e 01       	movw	r16, r28
    6dae:	05 5b       	subi	r16, 0xB5	; 181
    6db0:	1f 4f       	sbci	r17, 0xFF	; 255
    6db2:	bc 01       	movw	r22, r24
    6db4:	cd 01       	movw	r24, r26
    6db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6dba:	dc 01       	movw	r26, r24
    6dbc:	cb 01       	movw	r24, r22
    6dbe:	f8 01       	movw	r30, r16
    6dc0:	91 83       	std	Z+1, r25	; 0x01
    6dc2:	80 83       	st	Z, r24
    6dc4:	1f c0       	rjmp	.+62     	; 0x6e04 <ExitParallel+0x2b0>
    6dc6:	fe 01       	movw	r30, r28
    6dc8:	e7 5b       	subi	r30, 0xB7	; 183
    6dca:	ff 4f       	sbci	r31, 0xFF	; 255
    6dcc:	88 ec       	ldi	r24, 0xC8	; 200
    6dce:	90 e0       	ldi	r25, 0x00	; 0
    6dd0:	91 83       	std	Z+1, r25	; 0x01
    6dd2:	80 83       	st	Z, r24
    6dd4:	fe 01       	movw	r30, r28
    6dd6:	e7 5b       	subi	r30, 0xB7	; 183
    6dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    6dda:	80 81       	ld	r24, Z
    6ddc:	91 81       	ldd	r25, Z+1	; 0x01
    6dde:	01 97       	sbiw	r24, 0x01	; 1
    6de0:	f1 f7       	brne	.-4      	; 0x6dde <ExitParallel+0x28a>
    6de2:	fe 01       	movw	r30, r28
    6de4:	e7 5b       	subi	r30, 0xB7	; 183
    6de6:	ff 4f       	sbci	r31, 0xFF	; 255
    6de8:	91 83       	std	Z+1, r25	; 0x01
    6dea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6dec:	de 01       	movw	r26, r28
    6dee:	a5 5b       	subi	r26, 0xB5	; 181
    6df0:	bf 4f       	sbci	r27, 0xFF	; 255
    6df2:	fe 01       	movw	r30, r28
    6df4:	e5 5b       	subi	r30, 0xB5	; 181
    6df6:	ff 4f       	sbci	r31, 0xFF	; 255
    6df8:	80 81       	ld	r24, Z
    6dfa:	91 81       	ldd	r25, Z+1	; 0x01
    6dfc:	01 97       	sbiw	r24, 0x01	; 1
    6dfe:	11 96       	adiw	r26, 0x01	; 1
    6e00:	9c 93       	st	X, r25
    6e02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e04:	fe 01       	movw	r30, r28
    6e06:	e5 5b       	subi	r30, 0xB5	; 181
    6e08:	ff 4f       	sbci	r31, 0xFF	; 255
    6e0a:	80 81       	ld	r24, Z
    6e0c:	91 81       	ldd	r25, Z+1	; 0x01
    6e0e:	00 97       	sbiw	r24, 0x00	; 0
    6e10:	d1 f6       	brne	.-76     	; 0x6dc6 <ExitParallel+0x272>
    6e12:	27 c0       	rjmp	.+78     	; 0x6e62 <ExitParallel+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e14:	8e 01       	movw	r16, r28
    6e16:	05 5b       	subi	r16, 0xB5	; 181
    6e18:	1f 4f       	sbci	r17, 0xFF	; 255
    6e1a:	fe 01       	movw	r30, r28
    6e1c:	e3 5b       	subi	r30, 0xB3	; 179
    6e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    6e20:	60 81       	ld	r22, Z
    6e22:	71 81       	ldd	r23, Z+1	; 0x01
    6e24:	82 81       	ldd	r24, Z+2	; 0x02
    6e26:	93 81       	ldd	r25, Z+3	; 0x03
    6e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e2c:	dc 01       	movw	r26, r24
    6e2e:	cb 01       	movw	r24, r22
    6e30:	f8 01       	movw	r30, r16
    6e32:	91 83       	std	Z+1, r25	; 0x01
    6e34:	80 83       	st	Z, r24
    6e36:	de 01       	movw	r26, r28
    6e38:	a9 5b       	subi	r26, 0xB9	; 185
    6e3a:	bf 4f       	sbci	r27, 0xFF	; 255
    6e3c:	fe 01       	movw	r30, r28
    6e3e:	e5 5b       	subi	r30, 0xB5	; 181
    6e40:	ff 4f       	sbci	r31, 0xFF	; 255
    6e42:	80 81       	ld	r24, Z
    6e44:	91 81       	ldd	r25, Z+1	; 0x01
    6e46:	8d 93       	st	X+, r24
    6e48:	9c 93       	st	X, r25
    6e4a:	fe 01       	movw	r30, r28
    6e4c:	e9 5b       	subi	r30, 0xB9	; 185
    6e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    6e50:	80 81       	ld	r24, Z
    6e52:	91 81       	ldd	r25, Z+1	; 0x01
    6e54:	01 97       	sbiw	r24, 0x01	; 1
    6e56:	f1 f7       	brne	.-4      	; 0x6e54 <ExitParallel+0x300>
    6e58:	fe 01       	movw	r30, r28
    6e5a:	e9 5b       	subi	r30, 0xB9	; 185
    6e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    6e5e:	91 83       	std	Z+1, r25	; 0x01
    6e60:	80 83       	st	Z, r24
	STOP_DC_MOTOR();
    6e62:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
	UART_voidSendData(0);//set servo 0
    6e66:	80 e0       	ldi	r24, 0x00	; 0
    6e68:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    6e6c:	fe 01       	movw	r30, r28
    6e6e:	ed 5b       	subi	r30, 0xBD	; 189
    6e70:	ff 4f       	sbci	r31, 0xFF	; 255
    6e72:	80 e0       	ldi	r24, 0x00	; 0
    6e74:	90 e0       	ldi	r25, 0x00	; 0
    6e76:	aa e7       	ldi	r26, 0x7A	; 122
    6e78:	b4 e4       	ldi	r27, 0x44	; 68
    6e7a:	80 83       	st	Z, r24
    6e7c:	91 83       	std	Z+1, r25	; 0x01
    6e7e:	a2 83       	std	Z+2, r26	; 0x02
    6e80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e82:	8e 01       	movw	r16, r28
    6e84:	01 5c       	subi	r16, 0xC1	; 193
    6e86:	1f 4f       	sbci	r17, 0xFF	; 255
    6e88:	fe 01       	movw	r30, r28
    6e8a:	ed 5b       	subi	r30, 0xBD	; 189
    6e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    6e8e:	60 81       	ld	r22, Z
    6e90:	71 81       	ldd	r23, Z+1	; 0x01
    6e92:	82 81       	ldd	r24, Z+2	; 0x02
    6e94:	93 81       	ldd	r25, Z+3	; 0x03
    6e96:	20 e0       	ldi	r18, 0x00	; 0
    6e98:	30 e0       	ldi	r19, 0x00	; 0
    6e9a:	4a ef       	ldi	r20, 0xFA	; 250
    6e9c:	54 e4       	ldi	r21, 0x44	; 68
    6e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ea2:	dc 01       	movw	r26, r24
    6ea4:	cb 01       	movw	r24, r22
    6ea6:	f8 01       	movw	r30, r16
    6ea8:	80 83       	st	Z, r24
    6eaa:	91 83       	std	Z+1, r25	; 0x01
    6eac:	a2 83       	std	Z+2, r26	; 0x02
    6eae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6eb0:	fe 01       	movw	r30, r28
    6eb2:	ff 96       	adiw	r30, 0x3f	; 63
    6eb4:	60 81       	ld	r22, Z
    6eb6:	71 81       	ldd	r23, Z+1	; 0x01
    6eb8:	82 81       	ldd	r24, Z+2	; 0x02
    6eba:	93 81       	ldd	r25, Z+3	; 0x03
    6ebc:	20 e0       	ldi	r18, 0x00	; 0
    6ebe:	30 e0       	ldi	r19, 0x00	; 0
    6ec0:	40 e8       	ldi	r20, 0x80	; 128
    6ec2:	5f e3       	ldi	r21, 0x3F	; 63
    6ec4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6ec8:	88 23       	and	r24, r24
    6eca:	2c f4       	brge	.+10     	; 0x6ed6 <ExitParallel+0x382>
		__ticks = 1;
    6ecc:	81 e0       	ldi	r24, 0x01	; 1
    6ece:	90 e0       	ldi	r25, 0x00	; 0
    6ed0:	9e af       	std	Y+62, r25	; 0x3e
    6ed2:	8d af       	std	Y+61, r24	; 0x3d
    6ed4:	46 c0       	rjmp	.+140    	; 0x6f62 <ExitParallel+0x40e>
	else if (__tmp > 65535)
    6ed6:	fe 01       	movw	r30, r28
    6ed8:	ff 96       	adiw	r30, 0x3f	; 63
    6eda:	60 81       	ld	r22, Z
    6edc:	71 81       	ldd	r23, Z+1	; 0x01
    6ede:	82 81       	ldd	r24, Z+2	; 0x02
    6ee0:	93 81       	ldd	r25, Z+3	; 0x03
    6ee2:	20 e0       	ldi	r18, 0x00	; 0
    6ee4:	3f ef       	ldi	r19, 0xFF	; 255
    6ee6:	4f e7       	ldi	r20, 0x7F	; 127
    6ee8:	57 e4       	ldi	r21, 0x47	; 71
    6eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6eee:	18 16       	cp	r1, r24
    6ef0:	64 f5       	brge	.+88     	; 0x6f4a <ExitParallel+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ef2:	fe 01       	movw	r30, r28
    6ef4:	ed 5b       	subi	r30, 0xBD	; 189
    6ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ef8:	60 81       	ld	r22, Z
    6efa:	71 81       	ldd	r23, Z+1	; 0x01
    6efc:	82 81       	ldd	r24, Z+2	; 0x02
    6efe:	93 81       	ldd	r25, Z+3	; 0x03
    6f00:	20 e0       	ldi	r18, 0x00	; 0
    6f02:	30 e0       	ldi	r19, 0x00	; 0
    6f04:	40 e2       	ldi	r20, 0x20	; 32
    6f06:	51 e4       	ldi	r21, 0x41	; 65
    6f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f0c:	dc 01       	movw	r26, r24
    6f0e:	cb 01       	movw	r24, r22
    6f10:	bc 01       	movw	r22, r24
    6f12:	cd 01       	movw	r24, r26
    6f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6f18:	dc 01       	movw	r26, r24
    6f1a:	cb 01       	movw	r24, r22
    6f1c:	9e af       	std	Y+62, r25	; 0x3e
    6f1e:	8d af       	std	Y+61, r24	; 0x3d
    6f20:	0f c0       	rjmp	.+30     	; 0x6f40 <ExitParallel+0x3ec>
    6f22:	88 ec       	ldi	r24, 0xC8	; 200
    6f24:	90 e0       	ldi	r25, 0x00	; 0
    6f26:	9c af       	std	Y+60, r25	; 0x3c
    6f28:	8b af       	std	Y+59, r24	; 0x3b
    6f2a:	8b ad       	ldd	r24, Y+59	; 0x3b
    6f2c:	9c ad       	ldd	r25, Y+60	; 0x3c
    6f2e:	01 97       	sbiw	r24, 0x01	; 1
    6f30:	f1 f7       	brne	.-4      	; 0x6f2e <ExitParallel+0x3da>
    6f32:	9c af       	std	Y+60, r25	; 0x3c
    6f34:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f36:	8d ad       	ldd	r24, Y+61	; 0x3d
    6f38:	9e ad       	ldd	r25, Y+62	; 0x3e
    6f3a:	01 97       	sbiw	r24, 0x01	; 1
    6f3c:	9e af       	std	Y+62, r25	; 0x3e
    6f3e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f40:	8d ad       	ldd	r24, Y+61	; 0x3d
    6f42:	9e ad       	ldd	r25, Y+62	; 0x3e
    6f44:	00 97       	sbiw	r24, 0x00	; 0
    6f46:	69 f7       	brne	.-38     	; 0x6f22 <ExitParallel+0x3ce>
    6f48:	16 c0       	rjmp	.+44     	; 0x6f76 <ExitParallel+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f4a:	fe 01       	movw	r30, r28
    6f4c:	ff 96       	adiw	r30, 0x3f	; 63
    6f4e:	60 81       	ld	r22, Z
    6f50:	71 81       	ldd	r23, Z+1	; 0x01
    6f52:	82 81       	ldd	r24, Z+2	; 0x02
    6f54:	93 81       	ldd	r25, Z+3	; 0x03
    6f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6f5a:	dc 01       	movw	r26, r24
    6f5c:	cb 01       	movw	r24, r22
    6f5e:	9e af       	std	Y+62, r25	; 0x3e
    6f60:	8d af       	std	Y+61, r24	; 0x3d
    6f62:	8d ad       	ldd	r24, Y+61	; 0x3d
    6f64:	9e ad       	ldd	r25, Y+62	; 0x3e
    6f66:	9a af       	std	Y+58, r25	; 0x3a
    6f68:	89 af       	std	Y+57, r24	; 0x39
    6f6a:	89 ad       	ldd	r24, Y+57	; 0x39
    6f6c:	9a ad       	ldd	r25, Y+58	; 0x3a
    6f6e:	01 97       	sbiw	r24, 0x01	; 1
    6f70:	f1 f7       	brne	.-4      	; 0x6f6e <ExitParallel+0x41a>
    6f72:	9a af       	std	Y+58, r25	; 0x3a
    6f74:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	UART_voidSendData(0);//set servo 0
    6f76:	80 e0       	ldi	r24, 0x00	; 0
    6f78:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    6f7c:	80 e0       	ldi	r24, 0x00	; 0
    6f7e:	90 e0       	ldi	r25, 0x00	; 0
    6f80:	aa e7       	ldi	r26, 0x7A	; 122
    6f82:	b4 e4       	ldi	r27, 0x44	; 68
    6f84:	8d ab       	std	Y+53, r24	; 0x35
    6f86:	9e ab       	std	Y+54, r25	; 0x36
    6f88:	af ab       	std	Y+55, r26	; 0x37
    6f8a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f8c:	6d a9       	ldd	r22, Y+53	; 0x35
    6f8e:	7e a9       	ldd	r23, Y+54	; 0x36
    6f90:	8f a9       	ldd	r24, Y+55	; 0x37
    6f92:	98 ad       	ldd	r25, Y+56	; 0x38
    6f94:	20 e0       	ldi	r18, 0x00	; 0
    6f96:	30 e0       	ldi	r19, 0x00	; 0
    6f98:	4a ef       	ldi	r20, 0xFA	; 250
    6f9a:	54 e4       	ldi	r21, 0x44	; 68
    6f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6fa0:	dc 01       	movw	r26, r24
    6fa2:	cb 01       	movw	r24, r22
    6fa4:	89 ab       	std	Y+49, r24	; 0x31
    6fa6:	9a ab       	std	Y+50, r25	; 0x32
    6fa8:	ab ab       	std	Y+51, r26	; 0x33
    6faa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6fac:	69 a9       	ldd	r22, Y+49	; 0x31
    6fae:	7a a9       	ldd	r23, Y+50	; 0x32
    6fb0:	8b a9       	ldd	r24, Y+51	; 0x33
    6fb2:	9c a9       	ldd	r25, Y+52	; 0x34
    6fb4:	20 e0       	ldi	r18, 0x00	; 0
    6fb6:	30 e0       	ldi	r19, 0x00	; 0
    6fb8:	40 e8       	ldi	r20, 0x80	; 128
    6fba:	5f e3       	ldi	r21, 0x3F	; 63
    6fbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6fc0:	88 23       	and	r24, r24
    6fc2:	2c f4       	brge	.+10     	; 0x6fce <ExitParallel+0x47a>
		__ticks = 1;
    6fc4:	81 e0       	ldi	r24, 0x01	; 1
    6fc6:	90 e0       	ldi	r25, 0x00	; 0
    6fc8:	98 ab       	std	Y+48, r25	; 0x30
    6fca:	8f a7       	std	Y+47, r24	; 0x2f
    6fcc:	3f c0       	rjmp	.+126    	; 0x704c <ExitParallel+0x4f8>
	else if (__tmp > 65535)
    6fce:	69 a9       	ldd	r22, Y+49	; 0x31
    6fd0:	7a a9       	ldd	r23, Y+50	; 0x32
    6fd2:	8b a9       	ldd	r24, Y+51	; 0x33
    6fd4:	9c a9       	ldd	r25, Y+52	; 0x34
    6fd6:	20 e0       	ldi	r18, 0x00	; 0
    6fd8:	3f ef       	ldi	r19, 0xFF	; 255
    6fda:	4f e7       	ldi	r20, 0x7F	; 127
    6fdc:	57 e4       	ldi	r21, 0x47	; 71
    6fde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6fe2:	18 16       	cp	r1, r24
    6fe4:	4c f5       	brge	.+82     	; 0x7038 <ExitParallel+0x4e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6fe6:	6d a9       	ldd	r22, Y+53	; 0x35
    6fe8:	7e a9       	ldd	r23, Y+54	; 0x36
    6fea:	8f a9       	ldd	r24, Y+55	; 0x37
    6fec:	98 ad       	ldd	r25, Y+56	; 0x38
    6fee:	20 e0       	ldi	r18, 0x00	; 0
    6ff0:	30 e0       	ldi	r19, 0x00	; 0
    6ff2:	40 e2       	ldi	r20, 0x20	; 32
    6ff4:	51 e4       	ldi	r21, 0x41	; 65
    6ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ffa:	dc 01       	movw	r26, r24
    6ffc:	cb 01       	movw	r24, r22
    6ffe:	bc 01       	movw	r22, r24
    7000:	cd 01       	movw	r24, r26
    7002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7006:	dc 01       	movw	r26, r24
    7008:	cb 01       	movw	r24, r22
    700a:	98 ab       	std	Y+48, r25	; 0x30
    700c:	8f a7       	std	Y+47, r24	; 0x2f
    700e:	0f c0       	rjmp	.+30     	; 0x702e <ExitParallel+0x4da>
    7010:	88 ec       	ldi	r24, 0xC8	; 200
    7012:	90 e0       	ldi	r25, 0x00	; 0
    7014:	9e a7       	std	Y+46, r25	; 0x2e
    7016:	8d a7       	std	Y+45, r24	; 0x2d
    7018:	8d a5       	ldd	r24, Y+45	; 0x2d
    701a:	9e a5       	ldd	r25, Y+46	; 0x2e
    701c:	01 97       	sbiw	r24, 0x01	; 1
    701e:	f1 f7       	brne	.-4      	; 0x701c <ExitParallel+0x4c8>
    7020:	9e a7       	std	Y+46, r25	; 0x2e
    7022:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7024:	8f a5       	ldd	r24, Y+47	; 0x2f
    7026:	98 a9       	ldd	r25, Y+48	; 0x30
    7028:	01 97       	sbiw	r24, 0x01	; 1
    702a:	98 ab       	std	Y+48, r25	; 0x30
    702c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    702e:	8f a5       	ldd	r24, Y+47	; 0x2f
    7030:	98 a9       	ldd	r25, Y+48	; 0x30
    7032:	00 97       	sbiw	r24, 0x00	; 0
    7034:	69 f7       	brne	.-38     	; 0x7010 <ExitParallel+0x4bc>
    7036:	14 c0       	rjmp	.+40     	; 0x7060 <ExitParallel+0x50c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7038:	69 a9       	ldd	r22, Y+49	; 0x31
    703a:	7a a9       	ldd	r23, Y+50	; 0x32
    703c:	8b a9       	ldd	r24, Y+51	; 0x33
    703e:	9c a9       	ldd	r25, Y+52	; 0x34
    7040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7044:	dc 01       	movw	r26, r24
    7046:	cb 01       	movw	r24, r22
    7048:	98 ab       	std	Y+48, r25	; 0x30
    704a:	8f a7       	std	Y+47, r24	; 0x2f
    704c:	8f a5       	ldd	r24, Y+47	; 0x2f
    704e:	98 a9       	ldd	r25, Y+48	; 0x30
    7050:	9c a7       	std	Y+44, r25	; 0x2c
    7052:	8b a7       	std	Y+43, r24	; 0x2b
    7054:	8b a5       	ldd	r24, Y+43	; 0x2b
    7056:	9c a5       	ldd	r25, Y+44	; 0x2c
    7058:	01 97       	sbiw	r24, 0x01	; 1
    705a:	f1 f7       	brne	.-4      	; 0x7058 <ExitParallel+0x504>
    705c:	9c a7       	std	Y+44, r25	; 0x2c
    705e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	UART_voidSendData(45);//set servo 45
    7060:	8d e2       	ldi	r24, 0x2D	; 45
    7062:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    7066:	80 e0       	ldi	r24, 0x00	; 0
    7068:	90 e8       	ldi	r25, 0x80	; 128
    706a:	ab eb       	ldi	r26, 0xBB	; 187
    706c:	b4 e4       	ldi	r27, 0x44	; 68
    706e:	8f a3       	std	Y+39, r24	; 0x27
    7070:	98 a7       	std	Y+40, r25	; 0x28
    7072:	a9 a7       	std	Y+41, r26	; 0x29
    7074:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7076:	6f a1       	ldd	r22, Y+39	; 0x27
    7078:	78 a5       	ldd	r23, Y+40	; 0x28
    707a:	89 a5       	ldd	r24, Y+41	; 0x29
    707c:	9a a5       	ldd	r25, Y+42	; 0x2a
    707e:	20 e0       	ldi	r18, 0x00	; 0
    7080:	30 e0       	ldi	r19, 0x00	; 0
    7082:	4a ef       	ldi	r20, 0xFA	; 250
    7084:	54 e4       	ldi	r21, 0x44	; 68
    7086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    708a:	dc 01       	movw	r26, r24
    708c:	cb 01       	movw	r24, r22
    708e:	8b a3       	std	Y+35, r24	; 0x23
    7090:	9c a3       	std	Y+36, r25	; 0x24
    7092:	ad a3       	std	Y+37, r26	; 0x25
    7094:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    7096:	6b a1       	ldd	r22, Y+35	; 0x23
    7098:	7c a1       	ldd	r23, Y+36	; 0x24
    709a:	8d a1       	ldd	r24, Y+37	; 0x25
    709c:	9e a1       	ldd	r25, Y+38	; 0x26
    709e:	20 e0       	ldi	r18, 0x00	; 0
    70a0:	30 e0       	ldi	r19, 0x00	; 0
    70a2:	40 e8       	ldi	r20, 0x80	; 128
    70a4:	5f e3       	ldi	r21, 0x3F	; 63
    70a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    70aa:	88 23       	and	r24, r24
    70ac:	2c f4       	brge	.+10     	; 0x70b8 <ExitParallel+0x564>
		__ticks = 1;
    70ae:	81 e0       	ldi	r24, 0x01	; 1
    70b0:	90 e0       	ldi	r25, 0x00	; 0
    70b2:	9a a3       	std	Y+34, r25	; 0x22
    70b4:	89 a3       	std	Y+33, r24	; 0x21
    70b6:	3f c0       	rjmp	.+126    	; 0x7136 <ExitParallel+0x5e2>
	else if (__tmp > 65535)
    70b8:	6b a1       	ldd	r22, Y+35	; 0x23
    70ba:	7c a1       	ldd	r23, Y+36	; 0x24
    70bc:	8d a1       	ldd	r24, Y+37	; 0x25
    70be:	9e a1       	ldd	r25, Y+38	; 0x26
    70c0:	20 e0       	ldi	r18, 0x00	; 0
    70c2:	3f ef       	ldi	r19, 0xFF	; 255
    70c4:	4f e7       	ldi	r20, 0x7F	; 127
    70c6:	57 e4       	ldi	r21, 0x47	; 71
    70c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    70cc:	18 16       	cp	r1, r24
    70ce:	4c f5       	brge	.+82     	; 0x7122 <ExitParallel+0x5ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    70d0:	6f a1       	ldd	r22, Y+39	; 0x27
    70d2:	78 a5       	ldd	r23, Y+40	; 0x28
    70d4:	89 a5       	ldd	r24, Y+41	; 0x29
    70d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    70d8:	20 e0       	ldi	r18, 0x00	; 0
    70da:	30 e0       	ldi	r19, 0x00	; 0
    70dc:	40 e2       	ldi	r20, 0x20	; 32
    70de:	51 e4       	ldi	r21, 0x41	; 65
    70e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    70e4:	dc 01       	movw	r26, r24
    70e6:	cb 01       	movw	r24, r22
    70e8:	bc 01       	movw	r22, r24
    70ea:	cd 01       	movw	r24, r26
    70ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    70f0:	dc 01       	movw	r26, r24
    70f2:	cb 01       	movw	r24, r22
    70f4:	9a a3       	std	Y+34, r25	; 0x22
    70f6:	89 a3       	std	Y+33, r24	; 0x21
    70f8:	0f c0       	rjmp	.+30     	; 0x7118 <ExitParallel+0x5c4>
    70fa:	88 ec       	ldi	r24, 0xC8	; 200
    70fc:	90 e0       	ldi	r25, 0x00	; 0
    70fe:	98 a3       	std	Y+32, r25	; 0x20
    7100:	8f 8f       	std	Y+31, r24	; 0x1f
    7102:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7104:	98 a1       	ldd	r25, Y+32	; 0x20
    7106:	01 97       	sbiw	r24, 0x01	; 1
    7108:	f1 f7       	brne	.-4      	; 0x7106 <ExitParallel+0x5b2>
    710a:	98 a3       	std	Y+32, r25	; 0x20
    710c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    710e:	89 a1       	ldd	r24, Y+33	; 0x21
    7110:	9a a1       	ldd	r25, Y+34	; 0x22
    7112:	01 97       	sbiw	r24, 0x01	; 1
    7114:	9a a3       	std	Y+34, r25	; 0x22
    7116:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7118:	89 a1       	ldd	r24, Y+33	; 0x21
    711a:	9a a1       	ldd	r25, Y+34	; 0x22
    711c:	00 97       	sbiw	r24, 0x00	; 0
    711e:	69 f7       	brne	.-38     	; 0x70fa <ExitParallel+0x5a6>
    7120:	14 c0       	rjmp	.+40     	; 0x714a <ExitParallel+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7122:	6b a1       	ldd	r22, Y+35	; 0x23
    7124:	7c a1       	ldd	r23, Y+36	; 0x24
    7126:	8d a1       	ldd	r24, Y+37	; 0x25
    7128:	9e a1       	ldd	r25, Y+38	; 0x26
    712a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    712e:	dc 01       	movw	r26, r24
    7130:	cb 01       	movw	r24, r22
    7132:	9a a3       	std	Y+34, r25	; 0x22
    7134:	89 a3       	std	Y+33, r24	; 0x21
    7136:	89 a1       	ldd	r24, Y+33	; 0x21
    7138:	9a a1       	ldd	r25, Y+34	; 0x22
    713a:	9e 8f       	std	Y+30, r25	; 0x1e
    713c:	8d 8f       	std	Y+29, r24	; 0x1d
    713e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7140:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7142:	01 97       	sbiw	r24, 0x01	; 1
    7144:	f1 f7       	brne	.-4      	; 0x7142 <ExitParallel+0x5ee>
    7146:	9e 8f       	std	Y+30, r25	; 0x1e
    7148:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1500);
	UART_voidSendData(45);//set servo 45
    714a:	8d e2       	ldi	r24, 0x2D	; 45
    714c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    7150:	80 e0       	ldi	r24, 0x00	; 0
    7152:	90 e8       	ldi	r25, 0x80	; 128
    7154:	ab eb       	ldi	r26, 0xBB	; 187
    7156:	b4 e4       	ldi	r27, 0x44	; 68
    7158:	89 8f       	std	Y+25, r24	; 0x19
    715a:	9a 8f       	std	Y+26, r25	; 0x1a
    715c:	ab 8f       	std	Y+27, r26	; 0x1b
    715e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7160:	69 8d       	ldd	r22, Y+25	; 0x19
    7162:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7164:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7166:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7168:	20 e0       	ldi	r18, 0x00	; 0
    716a:	30 e0       	ldi	r19, 0x00	; 0
    716c:	4a ef       	ldi	r20, 0xFA	; 250
    716e:	54 e4       	ldi	r21, 0x44	; 68
    7170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7174:	dc 01       	movw	r26, r24
    7176:	cb 01       	movw	r24, r22
    7178:	8d 8b       	std	Y+21, r24	; 0x15
    717a:	9e 8b       	std	Y+22, r25	; 0x16
    717c:	af 8b       	std	Y+23, r26	; 0x17
    717e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7180:	6d 89       	ldd	r22, Y+21	; 0x15
    7182:	7e 89       	ldd	r23, Y+22	; 0x16
    7184:	8f 89       	ldd	r24, Y+23	; 0x17
    7186:	98 8d       	ldd	r25, Y+24	; 0x18
    7188:	20 e0       	ldi	r18, 0x00	; 0
    718a:	30 e0       	ldi	r19, 0x00	; 0
    718c:	40 e8       	ldi	r20, 0x80	; 128
    718e:	5f e3       	ldi	r21, 0x3F	; 63
    7190:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7194:	88 23       	and	r24, r24
    7196:	2c f4       	brge	.+10     	; 0x71a2 <ExitParallel+0x64e>
		__ticks = 1;
    7198:	81 e0       	ldi	r24, 0x01	; 1
    719a:	90 e0       	ldi	r25, 0x00	; 0
    719c:	9c 8b       	std	Y+20, r25	; 0x14
    719e:	8b 8b       	std	Y+19, r24	; 0x13
    71a0:	3f c0       	rjmp	.+126    	; 0x7220 <ExitParallel+0x6cc>
	else if (__tmp > 65535)
    71a2:	6d 89       	ldd	r22, Y+21	; 0x15
    71a4:	7e 89       	ldd	r23, Y+22	; 0x16
    71a6:	8f 89       	ldd	r24, Y+23	; 0x17
    71a8:	98 8d       	ldd	r25, Y+24	; 0x18
    71aa:	20 e0       	ldi	r18, 0x00	; 0
    71ac:	3f ef       	ldi	r19, 0xFF	; 255
    71ae:	4f e7       	ldi	r20, 0x7F	; 127
    71b0:	57 e4       	ldi	r21, 0x47	; 71
    71b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    71b6:	18 16       	cp	r1, r24
    71b8:	4c f5       	brge	.+82     	; 0x720c <ExitParallel+0x6b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    71ba:	69 8d       	ldd	r22, Y+25	; 0x19
    71bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    71be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    71c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    71c2:	20 e0       	ldi	r18, 0x00	; 0
    71c4:	30 e0       	ldi	r19, 0x00	; 0
    71c6:	40 e2       	ldi	r20, 0x20	; 32
    71c8:	51 e4       	ldi	r21, 0x41	; 65
    71ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    71ce:	dc 01       	movw	r26, r24
    71d0:	cb 01       	movw	r24, r22
    71d2:	bc 01       	movw	r22, r24
    71d4:	cd 01       	movw	r24, r26
    71d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71da:	dc 01       	movw	r26, r24
    71dc:	cb 01       	movw	r24, r22
    71de:	9c 8b       	std	Y+20, r25	; 0x14
    71e0:	8b 8b       	std	Y+19, r24	; 0x13
    71e2:	0f c0       	rjmp	.+30     	; 0x7202 <ExitParallel+0x6ae>
    71e4:	88 ec       	ldi	r24, 0xC8	; 200
    71e6:	90 e0       	ldi	r25, 0x00	; 0
    71e8:	9a 8b       	std	Y+18, r25	; 0x12
    71ea:	89 8b       	std	Y+17, r24	; 0x11
    71ec:	89 89       	ldd	r24, Y+17	; 0x11
    71ee:	9a 89       	ldd	r25, Y+18	; 0x12
    71f0:	01 97       	sbiw	r24, 0x01	; 1
    71f2:	f1 f7       	brne	.-4      	; 0x71f0 <ExitParallel+0x69c>
    71f4:	9a 8b       	std	Y+18, r25	; 0x12
    71f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    71f8:	8b 89       	ldd	r24, Y+19	; 0x13
    71fa:	9c 89       	ldd	r25, Y+20	; 0x14
    71fc:	01 97       	sbiw	r24, 0x01	; 1
    71fe:	9c 8b       	std	Y+20, r25	; 0x14
    7200:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7202:	8b 89       	ldd	r24, Y+19	; 0x13
    7204:	9c 89       	ldd	r25, Y+20	; 0x14
    7206:	00 97       	sbiw	r24, 0x00	; 0
    7208:	69 f7       	brne	.-38     	; 0x71e4 <ExitParallel+0x690>
    720a:	14 c0       	rjmp	.+40     	; 0x7234 <ExitParallel+0x6e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    720c:	6d 89       	ldd	r22, Y+21	; 0x15
    720e:	7e 89       	ldd	r23, Y+22	; 0x16
    7210:	8f 89       	ldd	r24, Y+23	; 0x17
    7212:	98 8d       	ldd	r25, Y+24	; 0x18
    7214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7218:	dc 01       	movw	r26, r24
    721a:	cb 01       	movw	r24, r22
    721c:	9c 8b       	std	Y+20, r25	; 0x14
    721e:	8b 8b       	std	Y+19, r24	; 0x13
    7220:	8b 89       	ldd	r24, Y+19	; 0x13
    7222:	9c 89       	ldd	r25, Y+20	; 0x14
    7224:	98 8b       	std	Y+16, r25	; 0x10
    7226:	8f 87       	std	Y+15, r24	; 0x0f
    7228:	8f 85       	ldd	r24, Y+15	; 0x0f
    722a:	98 89       	ldd	r25, Y+16	; 0x10
    722c:	01 97       	sbiw	r24, 0x01	; 1
    722e:	f1 f7       	brne	.-4      	; 0x722c <ExitParallel+0x6d8>
    7230:	98 8b       	std	Y+16, r25	; 0x10
    7232:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1500);
	MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
    7234:	86 e9       	ldi	r24, 0x96	; 150
    7236:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <MOVE_FORWARD>
	_delay_ms((time_of_first_move_of_parallel_parking*10));//equation done time_of_first_move_of_parallel_parking
    723a:	80 91 90 01 	lds	r24, 0x0190
    723e:	90 91 91 01 	lds	r25, 0x0191
    7242:	a0 91 92 01 	lds	r26, 0x0192
    7246:	b0 91 93 01 	lds	r27, 0x0193
    724a:	bc 01       	movw	r22, r24
    724c:	cd 01       	movw	r24, r26
    724e:	20 e0       	ldi	r18, 0x00	; 0
    7250:	30 e0       	ldi	r19, 0x00	; 0
    7252:	40 e2       	ldi	r20, 0x20	; 32
    7254:	51 e4       	ldi	r21, 0x41	; 65
    7256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    725a:	dc 01       	movw	r26, r24
    725c:	cb 01       	movw	r24, r22
    725e:	8b 87       	std	Y+11, r24	; 0x0b
    7260:	9c 87       	std	Y+12, r25	; 0x0c
    7262:	ad 87       	std	Y+13, r26	; 0x0d
    7264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7266:	6b 85       	ldd	r22, Y+11	; 0x0b
    7268:	7c 85       	ldd	r23, Y+12	; 0x0c
    726a:	8d 85       	ldd	r24, Y+13	; 0x0d
    726c:	9e 85       	ldd	r25, Y+14	; 0x0e
    726e:	20 e0       	ldi	r18, 0x00	; 0
    7270:	30 e0       	ldi	r19, 0x00	; 0
    7272:	4a ef       	ldi	r20, 0xFA	; 250
    7274:	54 e4       	ldi	r21, 0x44	; 68
    7276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    727a:	dc 01       	movw	r26, r24
    727c:	cb 01       	movw	r24, r22
    727e:	8f 83       	std	Y+7, r24	; 0x07
    7280:	98 87       	std	Y+8, r25	; 0x08
    7282:	a9 87       	std	Y+9, r26	; 0x09
    7284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7286:	6f 81       	ldd	r22, Y+7	; 0x07
    7288:	78 85       	ldd	r23, Y+8	; 0x08
    728a:	89 85       	ldd	r24, Y+9	; 0x09
    728c:	9a 85       	ldd	r25, Y+10	; 0x0a
    728e:	20 e0       	ldi	r18, 0x00	; 0
    7290:	30 e0       	ldi	r19, 0x00	; 0
    7292:	40 e8       	ldi	r20, 0x80	; 128
    7294:	5f e3       	ldi	r21, 0x3F	; 63
    7296:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    729a:	88 23       	and	r24, r24
    729c:	2c f4       	brge	.+10     	; 0x72a8 <ExitParallel+0x754>
		__ticks = 1;
    729e:	81 e0       	ldi	r24, 0x01	; 1
    72a0:	90 e0       	ldi	r25, 0x00	; 0
    72a2:	9e 83       	std	Y+6, r25	; 0x06
    72a4:	8d 83       	std	Y+5, r24	; 0x05
    72a6:	3f c0       	rjmp	.+126    	; 0x7326 <ExitParallel+0x7d2>
	else if (__tmp > 65535)
    72a8:	6f 81       	ldd	r22, Y+7	; 0x07
    72aa:	78 85       	ldd	r23, Y+8	; 0x08
    72ac:	89 85       	ldd	r24, Y+9	; 0x09
    72ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    72b0:	20 e0       	ldi	r18, 0x00	; 0
    72b2:	3f ef       	ldi	r19, 0xFF	; 255
    72b4:	4f e7       	ldi	r20, 0x7F	; 127
    72b6:	57 e4       	ldi	r21, 0x47	; 71
    72b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    72bc:	18 16       	cp	r1, r24
    72be:	4c f5       	brge	.+82     	; 0x7312 <ExitParallel+0x7be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    72c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    72c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    72c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    72c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    72c8:	20 e0       	ldi	r18, 0x00	; 0
    72ca:	30 e0       	ldi	r19, 0x00	; 0
    72cc:	40 e2       	ldi	r20, 0x20	; 32
    72ce:	51 e4       	ldi	r21, 0x41	; 65
    72d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    72d4:	dc 01       	movw	r26, r24
    72d6:	cb 01       	movw	r24, r22
    72d8:	bc 01       	movw	r22, r24
    72da:	cd 01       	movw	r24, r26
    72dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72e0:	dc 01       	movw	r26, r24
    72e2:	cb 01       	movw	r24, r22
    72e4:	9e 83       	std	Y+6, r25	; 0x06
    72e6:	8d 83       	std	Y+5, r24	; 0x05
    72e8:	0f c0       	rjmp	.+30     	; 0x7308 <ExitParallel+0x7b4>
    72ea:	88 ec       	ldi	r24, 0xC8	; 200
    72ec:	90 e0       	ldi	r25, 0x00	; 0
    72ee:	9c 83       	std	Y+4, r25	; 0x04
    72f0:	8b 83       	std	Y+3, r24	; 0x03
    72f2:	8b 81       	ldd	r24, Y+3	; 0x03
    72f4:	9c 81       	ldd	r25, Y+4	; 0x04
    72f6:	01 97       	sbiw	r24, 0x01	; 1
    72f8:	f1 f7       	brne	.-4      	; 0x72f6 <ExitParallel+0x7a2>
    72fa:	9c 83       	std	Y+4, r25	; 0x04
    72fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    72fe:	8d 81       	ldd	r24, Y+5	; 0x05
    7300:	9e 81       	ldd	r25, Y+6	; 0x06
    7302:	01 97       	sbiw	r24, 0x01	; 1
    7304:	9e 83       	std	Y+6, r25	; 0x06
    7306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7308:	8d 81       	ldd	r24, Y+5	; 0x05
    730a:	9e 81       	ldd	r25, Y+6	; 0x06
    730c:	00 97       	sbiw	r24, 0x00	; 0
    730e:	69 f7       	brne	.-38     	; 0x72ea <ExitParallel+0x796>
    7310:	14 c0       	rjmp	.+40     	; 0x733a <ExitParallel+0x7e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7312:	6f 81       	ldd	r22, Y+7	; 0x07
    7314:	78 85       	ldd	r23, Y+8	; 0x08
    7316:	89 85       	ldd	r24, Y+9	; 0x09
    7318:	9a 85       	ldd	r25, Y+10	; 0x0a
    731a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    731e:	dc 01       	movw	r26, r24
    7320:	cb 01       	movw	r24, r22
    7322:	9e 83       	std	Y+6, r25	; 0x06
    7324:	8d 83       	std	Y+5, r24	; 0x05
    7326:	8d 81       	ldd	r24, Y+5	; 0x05
    7328:	9e 81       	ldd	r25, Y+6	; 0x06
    732a:	9a 83       	std	Y+2, r25	; 0x02
    732c:	89 83       	std	Y+1, r24	; 0x01
    732e:	89 81       	ldd	r24, Y+1	; 0x01
    7330:	9a 81       	ldd	r25, Y+2	; 0x02
    7332:	01 97       	sbiw	r24, 0x01	; 1
    7334:	f1 f7       	brne	.-4      	; 0x7332 <ExitParallel+0x7de>
    7336:	9a 83       	std	Y+2, r25	; 0x02
    7338:	89 83       	std	Y+1, r24	; 0x01
	STOP_DC_MOTOR();
    733a:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <STOP_DC_MOTOR>
	UART_voidSendData(0);//set servo 0
    733e:	80 e0       	ldi	r24, 0x00	; 0
    7340:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
}
    7344:	ce 59       	subi	r28, 0x9E	; 158
    7346:	df 4f       	sbci	r29, 0xFF	; 255
    7348:	0f b6       	in	r0, 0x3f	; 63
    734a:	f8 94       	cli
    734c:	de bf       	out	0x3e, r29	; 62
    734e:	0f be       	out	0x3f, r0	; 63
    7350:	cd bf       	out	0x3d, r28	; 61
    7352:	cf 91       	pop	r28
    7354:	df 91       	pop	r29
    7356:	1f 91       	pop	r17
    7358:	0f 91       	pop	r16
    735a:	08 95       	ret

0000735c <__udivmodhi4>:
    735c:	aa 1b       	sub	r26, r26
    735e:	bb 1b       	sub	r27, r27
    7360:	51 e1       	ldi	r21, 0x11	; 17
    7362:	07 c0       	rjmp	.+14     	; 0x7372 <__udivmodhi4_ep>

00007364 <__udivmodhi4_loop>:
    7364:	aa 1f       	adc	r26, r26
    7366:	bb 1f       	adc	r27, r27
    7368:	a6 17       	cp	r26, r22
    736a:	b7 07       	cpc	r27, r23
    736c:	10 f0       	brcs	.+4      	; 0x7372 <__udivmodhi4_ep>
    736e:	a6 1b       	sub	r26, r22
    7370:	b7 0b       	sbc	r27, r23

00007372 <__udivmodhi4_ep>:
    7372:	88 1f       	adc	r24, r24
    7374:	99 1f       	adc	r25, r25
    7376:	5a 95       	dec	r21
    7378:	a9 f7       	brne	.-22     	; 0x7364 <__udivmodhi4_loop>
    737a:	80 95       	com	r24
    737c:	90 95       	com	r25
    737e:	bc 01       	movw	r22, r24
    7380:	cd 01       	movw	r24, r26
    7382:	08 95       	ret

00007384 <__prologue_saves__>:
    7384:	2f 92       	push	r2
    7386:	3f 92       	push	r3
    7388:	4f 92       	push	r4
    738a:	5f 92       	push	r5
    738c:	6f 92       	push	r6
    738e:	7f 92       	push	r7
    7390:	8f 92       	push	r8
    7392:	9f 92       	push	r9
    7394:	af 92       	push	r10
    7396:	bf 92       	push	r11
    7398:	cf 92       	push	r12
    739a:	df 92       	push	r13
    739c:	ef 92       	push	r14
    739e:	ff 92       	push	r15
    73a0:	0f 93       	push	r16
    73a2:	1f 93       	push	r17
    73a4:	cf 93       	push	r28
    73a6:	df 93       	push	r29
    73a8:	cd b7       	in	r28, 0x3d	; 61
    73aa:	de b7       	in	r29, 0x3e	; 62
    73ac:	ca 1b       	sub	r28, r26
    73ae:	db 0b       	sbc	r29, r27
    73b0:	0f b6       	in	r0, 0x3f	; 63
    73b2:	f8 94       	cli
    73b4:	de bf       	out	0x3e, r29	; 62
    73b6:	0f be       	out	0x3f, r0	; 63
    73b8:	cd bf       	out	0x3d, r28	; 61
    73ba:	09 94       	ijmp

000073bc <__epilogue_restores__>:
    73bc:	2a 88       	ldd	r2, Y+18	; 0x12
    73be:	39 88       	ldd	r3, Y+17	; 0x11
    73c0:	48 88       	ldd	r4, Y+16	; 0x10
    73c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    73c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    73c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    73c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    73ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    73cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    73ce:	b9 84       	ldd	r11, Y+9	; 0x09
    73d0:	c8 84       	ldd	r12, Y+8	; 0x08
    73d2:	df 80       	ldd	r13, Y+7	; 0x07
    73d4:	ee 80       	ldd	r14, Y+6	; 0x06
    73d6:	fd 80       	ldd	r15, Y+5	; 0x05
    73d8:	0c 81       	ldd	r16, Y+4	; 0x04
    73da:	1b 81       	ldd	r17, Y+3	; 0x03
    73dc:	aa 81       	ldd	r26, Y+2	; 0x02
    73de:	b9 81       	ldd	r27, Y+1	; 0x01
    73e0:	ce 0f       	add	r28, r30
    73e2:	d1 1d       	adc	r29, r1
    73e4:	0f b6       	in	r0, 0x3f	; 63
    73e6:	f8 94       	cli
    73e8:	de bf       	out	0x3e, r29	; 62
    73ea:	0f be       	out	0x3f, r0	; 63
    73ec:	cd bf       	out	0x3d, r28	; 61
    73ee:	ed 01       	movw	r28, r26
    73f0:	08 95       	ret

000073f2 <_exit>:
    73f2:	f8 94       	cli

000073f4 <__stop_program>:
    73f4:	ff cf       	rjmp	.-2      	; 0x73f4 <__stop_program>
