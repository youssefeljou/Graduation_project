
grade_project_version_with_functions.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004c4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00004c4a  00004cde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000059  0080016c  0080016c  00004dea  2**0
                  ALLOC
  3 .stab         00004248  00000000  00000000  00004dec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018d9  00000000  00000000  00009034  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a90d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000aaad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ac9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d0aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f608  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000fabe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001042c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	fc e4       	ldi	r31, 0x4C	; 76
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3c       	cpi	r26, 0xC5	; 197
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 54 13 	call	0x26a8	; 0x26a8 <main>
      8a:	0c 94 23 26 	jmp	0x4c46	; 0x4c46 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ec 25 	jmp	0x4bd8	; 0x4bd8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 08 26 	jmp	0x4c10	; 0x4c10 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f8 25 	jmp	0x4bf0	; 0x4bf0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 14 26 	jmp	0x4c28	; 0x4c28 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f8 25 	jmp	0x4bf0	; 0x4bf0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 14 26 	jmp	0x4c28	; 0x4c28 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ec 25 	jmp	0x4bd8	; 0x4bd8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 08 26 	jmp	0x4c10	; 0x4c10 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f4 25 	jmp	0x4be8	; 0x4be8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 10 26 	jmp	0x4c20	; 0x4c20 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f8 25 	jmp	0x4bf0	; 0x4bf0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 14 26 	jmp	0x4c28	; 0x4c28 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f8 25 	jmp	0x4bf0	; 0x4bf0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 14 26 	jmp	0x4c28	; 0x4c28 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f8 25 	jmp	0x4bf0	; 0x4bf0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 14 26 	jmp	0x4c28	; 0x4c28 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fc 25 	jmp	0x4bf8	; 0x4bf8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 f4 25 	jmp	0x4be8	; 0x4be8 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 10 26 	jmp	0x4c20	; 0x4c20 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_voidSetPinDirection>:




void DIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	27 97       	sbiw	r28, 0x07	; 7
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	6a 83       	std	Y+2, r22	; 0x02
     e46:	4b 83       	std	Y+3, r20	; 0x03

	if (Copy_u8Direction==DIO_u8INPUT)
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	88 23       	and	r24, r24
     e4c:	09 f0       	breq	.+2      	; 0xe50 <DIO_voidSetPinDirection+0x22>
     e4e:	75 c0       	rjmp	.+234    	; 0xf3a <DIO_voidSetPinDirection+0x10c>
	{
		switch(Copy_u8Port)
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	3f 83       	std	Y+7, r19	; 0x07
     e58:	2e 83       	std	Y+6, r18	; 0x06
     e5a:	8e 81       	ldd	r24, Y+6	; 0x06
     e5c:	9f 81       	ldd	r25, Y+7	; 0x07
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	91 05       	cpc	r25, r1
     e62:	61 f1       	breq	.+88     	; 0xebc <DIO_voidSetPinDirection+0x8e>
     e64:	2e 81       	ldd	r18, Y+6	; 0x06
     e66:	3f 81       	ldd	r19, Y+7	; 0x07
     e68:	23 30       	cpi	r18, 0x03	; 3
     e6a:	31 05       	cpc	r19, r1
     e6c:	34 f4       	brge	.+12     	; 0xe7a <DIO_voidSetPinDirection+0x4c>
     e6e:	8e 81       	ldd	r24, Y+6	; 0x06
     e70:	9f 81       	ldd	r25, Y+7	; 0x07
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	91 05       	cpc	r25, r1
     e76:	69 f0       	breq	.+26     	; 0xe92 <DIO_voidSetPinDirection+0x64>
     e78:	d3 c0       	rjmp	.+422    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
     e7a:	2e 81       	ldd	r18, Y+6	; 0x06
     e7c:	3f 81       	ldd	r19, Y+7	; 0x07
     e7e:	23 30       	cpi	r18, 0x03	; 3
     e80:	31 05       	cpc	r19, r1
     e82:	89 f1       	breq	.+98     	; 0xee6 <DIO_voidSetPinDirection+0xb8>
     e84:	8e 81       	ldd	r24, Y+6	; 0x06
     e86:	9f 81       	ldd	r25, Y+7	; 0x07
     e88:	84 30       	cpi	r24, 0x04	; 4
     e8a:	91 05       	cpc	r25, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <DIO_voidSetPinDirection+0x62>
     e8e:	40 c0       	rjmp	.+128    	; 0xf10 <DIO_voidSetPinDirection+0xe2>
     e90:	c7 c0       	rjmp	.+398    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		{
		case DIO_u8PORTA : CLR_BIT(DDRA , Copy_u8Pin); break;
     e92:	aa e3       	ldi	r26, 0x3A	; 58
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	ea e3       	ldi	r30, 0x3A	; 58
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_voidSetPinDirection+0x82>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_voidSetPinDirection+0x7e>
     eb4:	80 95       	com	r24
     eb6:	84 23       	and	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	b2 c0       	rjmp	.+356    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTB : CLR_BIT(DDRB , Copy_u8Pin); break;
     ebc:	a7 e3       	ldi	r26, 0x37	; 55
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e7 e3       	ldi	r30, 0x37	; 55
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_voidSetPinDirection+0xac>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO_voidSetPinDirection+0xa8>
     ede:	80 95       	com	r24
     ee0:	84 23       	and	r24, r20
     ee2:	8c 93       	st	X, r24
     ee4:	9d c0       	rjmp	.+314    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTC : CLR_BIT(DDRC , Copy_u8Pin); break;
     ee6:	a4 e3       	ldi	r26, 0x34	; 52
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e4 e3       	ldi	r30, 0x34	; 52
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_voidSetPinDirection+0xd6>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_voidSetPinDirection+0xd2>
     f08:	80 95       	com	r24
     f0a:	84 23       	and	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	88 c0       	rjmp	.+272    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTD : CLR_BIT(DDRD , Copy_u8Pin); break;
     f10:	a1 e3       	ldi	r26, 0x31	; 49
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e1 e3       	ldi	r30, 0x31	; 49
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_voidSetPinDirection+0x100>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_voidSetPinDirection+0xfc>
     f32:	80 95       	com	r24
     f34:	84 23       	and	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	73 c0       	rjmp	.+230    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		}
	}
	else if(Copy_u8Direction==DIO_u8OUTPUT)
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	09 f0       	breq	.+2      	; 0xf42 <DIO_voidSetPinDirection+0x114>
     f40:	6f c0       	rjmp	.+222    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
	{
		switch(Copy_u8Port)
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	3d 83       	std	Y+5, r19	; 0x05
     f4a:	2c 83       	std	Y+4, r18	; 0x04
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	9d 81       	ldd	r25, Y+5	; 0x05
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	91 05       	cpc	r25, r1
     f54:	51 f1       	breq	.+84     	; 0xfaa <DIO_voidSetPinDirection+0x17c>
     f56:	2c 81       	ldd	r18, Y+4	; 0x04
     f58:	3d 81       	ldd	r19, Y+5	; 0x05
     f5a:	23 30       	cpi	r18, 0x03	; 3
     f5c:	31 05       	cpc	r19, r1
     f5e:	34 f4       	brge	.+12     	; 0xf6c <DIO_voidSetPinDirection+0x13e>
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	91 05       	cpc	r25, r1
     f68:	61 f0       	breq	.+24     	; 0xf82 <DIO_voidSetPinDirection+0x154>
     f6a:	5a c0       	rjmp	.+180    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
     f6c:	2c 81       	ldd	r18, Y+4	; 0x04
     f6e:	3d 81       	ldd	r19, Y+5	; 0x05
     f70:	23 30       	cpi	r18, 0x03	; 3
     f72:	31 05       	cpc	r19, r1
     f74:	71 f1       	breq	.+92     	; 0xfd2 <DIO_voidSetPinDirection+0x1a4>
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	9d 81       	ldd	r25, Y+5	; 0x05
     f7a:	84 30       	cpi	r24, 0x04	; 4
     f7c:	91 05       	cpc	r25, r1
     f7e:	e9 f1       	breq	.+122    	; 0xffa <DIO_voidSetPinDirection+0x1cc>
     f80:	4f c0       	rjmp	.+158    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		{
		case DIO_u8PORTA : SET_BIT(DDRA , Copy_u8Pin); break;
     f82:	aa e3       	ldi	r26, 0x3A	; 58
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	ea e3       	ldi	r30, 0x3A	; 58
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_voidSetPinDirection+0x172>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_voidSetPinDirection+0x16e>
     fa4:	84 2b       	or	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	3b c0       	rjmp	.+118    	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTB : SET_BIT(DDRB , Copy_u8Pin); break;
     faa:	a7 e3       	ldi	r26, 0x37	; 55
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e7 e3       	ldi	r30, 0x37	; 55
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_voidSetPinDirection+0x19a>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_voidSetPinDirection+0x196>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	27 c0       	rjmp	.+78     	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTC : SET_BIT(DDRC , Copy_u8Pin); break;
     fd2:	a4 e3       	ldi	r26, 0x34	; 52
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e4 e3       	ldi	r30, 0x34	; 52
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_voidSetPinDirection+0x1c2>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <DIO_voidSetPinDirection+0x1be>
     ff4:	84 2b       	or	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	13 c0       	rjmp	.+38     	; 0x1020 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTD : SET_BIT(DDRD , Copy_u8Pin); break;
     ffa:	a1 e3       	ldi	r26, 0x31	; 49
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e1 e3       	ldi	r30, 0x31	; 49
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_voidSetPinDirection+0x1ea>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_voidSetPinDirection+0x1e6>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
		}
	}
}
    1020:	27 96       	adiw	r28, 0x07	; 7
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <DIO_voidSetPinValue>:




void DIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	27 97       	sbiw	r28, 0x07	; 7
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	6a 83       	std	Y+2, r22	; 0x02
    104a:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Value==DIO_u8LOW)
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	88 23       	and	r24, r24
    1050:	09 f0       	breq	.+2      	; 0x1054 <DIO_voidSetPinValue+0x22>
    1052:	75 c0       	rjmp	.+234    	; 0x113e <DIO_voidSetPinValue+0x10c>
	{
		switch(Copy_u8Port)
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	3f 83       	std	Y+7, r19	; 0x07
    105c:	2e 83       	std	Y+6, r18	; 0x06
    105e:	8e 81       	ldd	r24, Y+6	; 0x06
    1060:	9f 81       	ldd	r25, Y+7	; 0x07
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	91 05       	cpc	r25, r1
    1066:	61 f1       	breq	.+88     	; 0x10c0 <DIO_voidSetPinValue+0x8e>
    1068:	2e 81       	ldd	r18, Y+6	; 0x06
    106a:	3f 81       	ldd	r19, Y+7	; 0x07
    106c:	23 30       	cpi	r18, 0x03	; 3
    106e:	31 05       	cpc	r19, r1
    1070:	34 f4       	brge	.+12     	; 0x107e <DIO_voidSetPinValue+0x4c>
    1072:	8e 81       	ldd	r24, Y+6	; 0x06
    1074:	9f 81       	ldd	r25, Y+7	; 0x07
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	91 05       	cpc	r25, r1
    107a:	69 f0       	breq	.+26     	; 0x1096 <DIO_voidSetPinValue+0x64>
    107c:	d3 c0       	rjmp	.+422    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
    107e:	2e 81       	ldd	r18, Y+6	; 0x06
    1080:	3f 81       	ldd	r19, Y+7	; 0x07
    1082:	23 30       	cpi	r18, 0x03	; 3
    1084:	31 05       	cpc	r19, r1
    1086:	89 f1       	breq	.+98     	; 0x10ea <DIO_voidSetPinValue+0xb8>
    1088:	8e 81       	ldd	r24, Y+6	; 0x06
    108a:	9f 81       	ldd	r25, Y+7	; 0x07
    108c:	84 30       	cpi	r24, 0x04	; 4
    108e:	91 05       	cpc	r25, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <DIO_voidSetPinValue+0x62>
    1092:	40 c0       	rjmp	.+128    	; 0x1114 <DIO_voidSetPinValue+0xe2>
    1094:	c7 c0       	rjmp	.+398    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		{
		case DIO_u8PORTA : CLR_BIT(PORTA , Copy_u8Pin); break;
    1096:	ab e3       	ldi	r26, 0x3B	; 59
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	eb e3       	ldi	r30, 0x3B	; 59
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_voidSetPinValue+0x82>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_voidSetPinValue+0x7e>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	b2 c0       	rjmp	.+356    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTB : CLR_BIT(PORTB , Copy_u8Pin); break;
    10c0:	a8 e3       	ldi	r26, 0x38	; 56
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e8 e3       	ldi	r30, 0x38	; 56
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_voidSetPinValue+0xac>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_voidSetPinValue+0xa8>
    10e2:	80 95       	com	r24
    10e4:	84 23       	and	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	9d c0       	rjmp	.+314    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTC : CLR_BIT(PORTC , Copy_u8Pin); break;
    10ea:	a5 e3       	ldi	r26, 0x35	; 53
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e5 e3       	ldi	r30, 0x35	; 53
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_voidSetPinValue+0xd6>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_voidSetPinValue+0xd2>
    110c:	80 95       	com	r24
    110e:	84 23       	and	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	88 c0       	rjmp	.+272    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTD : CLR_BIT(PORTD , Copy_u8Pin); break;
    1114:	a2 e3       	ldi	r26, 0x32	; 50
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e2 e3       	ldi	r30, 0x32	; 50
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_voidSetPinValue+0x100>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_voidSetPinValue+0xfc>
    1136:	80 95       	com	r24
    1138:	84 23       	and	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	73 c0       	rjmp	.+230    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		}
	}
	else if(Copy_u8Value==DIO_u8HIGH)
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	09 f0       	breq	.+2      	; 0x1146 <DIO_voidSetPinValue+0x114>
    1144:	6f c0       	rjmp	.+222    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
	{
		switch(Copy_u8Port)
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	3d 83       	std	Y+5, r19	; 0x05
    114e:	2c 83       	std	Y+4, r18	; 0x04
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	9d 81       	ldd	r25, Y+5	; 0x05
    1154:	82 30       	cpi	r24, 0x02	; 2
    1156:	91 05       	cpc	r25, r1
    1158:	51 f1       	breq	.+84     	; 0x11ae <DIO_voidSetPinValue+0x17c>
    115a:	2c 81       	ldd	r18, Y+4	; 0x04
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	23 30       	cpi	r18, 0x03	; 3
    1160:	31 05       	cpc	r19, r1
    1162:	34 f4       	brge	.+12     	; 0x1170 <DIO_voidSetPinValue+0x13e>
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	9d 81       	ldd	r25, Y+5	; 0x05
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	61 f0       	breq	.+24     	; 0x1186 <DIO_voidSetPinValue+0x154>
    116e:	5a c0       	rjmp	.+180    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
    1170:	2c 81       	ldd	r18, Y+4	; 0x04
    1172:	3d 81       	ldd	r19, Y+5	; 0x05
    1174:	23 30       	cpi	r18, 0x03	; 3
    1176:	31 05       	cpc	r19, r1
    1178:	71 f1       	breq	.+92     	; 0x11d6 <DIO_voidSetPinValue+0x1a4>
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	84 30       	cpi	r24, 0x04	; 4
    1180:	91 05       	cpc	r25, r1
    1182:	e9 f1       	breq	.+122    	; 0x11fe <DIO_voidSetPinValue+0x1cc>
    1184:	4f c0       	rjmp	.+158    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		{
		case DIO_u8PORTA : SET_BIT(PORTA , Copy_u8Pin); break;
    1186:	ab e3       	ldi	r26, 0x3B	; 59
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	eb e3       	ldi	r30, 0x3B	; 59
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_voidSetPinValue+0x172>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_voidSetPinValue+0x16e>
    11a8:	84 2b       	or	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	3b c0       	rjmp	.+118    	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTB : SET_BIT(PORTB , Copy_u8Pin); break;
    11ae:	a8 e3       	ldi	r26, 0x38	; 56
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e8 e3       	ldi	r30, 0x38	; 56
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_voidSetPinValue+0x19a>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_voidSetPinValue+0x196>
    11d0:	84 2b       	or	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	27 c0       	rjmp	.+78     	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTC : SET_BIT(PORTC , Copy_u8Pin); break;
    11d6:	a5 e3       	ldi	r26, 0x35	; 53
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e5 e3       	ldi	r30, 0x35	; 53
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_voidSetPinValue+0x1c2>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_voidSetPinValue+0x1be>
    11f8:	84 2b       	or	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	13 c0       	rjmp	.+38     	; 0x1224 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTD : SET_BIT(PORTD , Copy_u8Pin); break;
    11fe:	a2 e3       	ldi	r26, 0x32	; 50
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e2 e3       	ldi	r30, 0x32	; 50
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_voidSetPinValue+0x1ea>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_voidSetPinValue+0x1e6>
    1220:	84 2b       	or	r24, r20
    1222:	8c 93       	st	X, r24
		}
	}
}
    1224:	27 96       	adiw	r28, 0x07	; 7
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <DIO_voidSetPortDirection>:




void DIO_voidSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	00 d0       	rcall	.+0      	; 0x123c <DIO_voidSetPortDirection+0x6>
    123c:	00 d0       	rcall	.+0      	; 0x123e <DIO_voidSetPortDirection+0x8>
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	3c 83       	std	Y+4, r19	; 0x04
    124e:	2b 83       	std	Y+3, r18	; 0x03
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	82 30       	cpi	r24, 0x02	; 2
    1256:	91 05       	cpc	r25, r1
    1258:	d9 f0       	breq	.+54     	; 0x1290 <DIO_voidSetPortDirection+0x5a>
    125a:	2b 81       	ldd	r18, Y+3	; 0x03
    125c:	3c 81       	ldd	r19, Y+4	; 0x04
    125e:	23 30       	cpi	r18, 0x03	; 3
    1260:	31 05       	cpc	r19, r1
    1262:	34 f4       	brge	.+12     	; 0x1270 <DIO_voidSetPortDirection+0x3a>
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	9c 81       	ldd	r25, Y+4	; 0x04
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	91 05       	cpc	r25, r1
    126c:	61 f0       	breq	.+24     	; 0x1286 <DIO_voidSetPortDirection+0x50>
    126e:	1e c0       	rjmp	.+60     	; 0x12ac <DIO_voidSetPortDirection+0x76>
    1270:	2b 81       	ldd	r18, Y+3	; 0x03
    1272:	3c 81       	ldd	r19, Y+4	; 0x04
    1274:	23 30       	cpi	r18, 0x03	; 3
    1276:	31 05       	cpc	r19, r1
    1278:	81 f0       	breq	.+32     	; 0x129a <DIO_voidSetPortDirection+0x64>
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	84 30       	cpi	r24, 0x04	; 4
    1280:	91 05       	cpc	r25, r1
    1282:	81 f0       	breq	.+32     	; 0x12a4 <DIO_voidSetPortDirection+0x6e>
    1284:	13 c0       	rjmp	.+38     	; 0x12ac <DIO_voidSetPortDirection+0x76>
	{
	case DIO_u8PORTA : DDRA=Copy_u8Direction; break;
    1286:	ea e3       	ldi	r30, 0x3A	; 58
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	80 83       	st	Z, r24
    128e:	0e c0       	rjmp	.+28     	; 0x12ac <DIO_voidSetPortDirection+0x76>
	case DIO_u8PORTB : DDRB=Copy_u8Direction; break;
    1290:	e7 e3       	ldi	r30, 0x37	; 55
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	80 83       	st	Z, r24
    1298:	09 c0       	rjmp	.+18     	; 0x12ac <DIO_voidSetPortDirection+0x76>
	case DIO_u8PORTC : DDRC=Copy_u8Direction; break;
    129a:	e4 e3       	ldi	r30, 0x34	; 52
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	80 83       	st	Z, r24
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <DIO_voidSetPortDirection+0x76>
	case DIO_u8PORTD : DDRD=Copy_u8Direction; break;
    12a4:	e1 e3       	ldi	r30, 0x31	; 49
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	80 83       	st	Z, r24

	}
}
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <DIO_voidSetPortValue>:




void DIO_voidSetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <DIO_voidSetPortValue+0x6>
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <DIO_voidSetPortValue+0x8>
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3c 83       	std	Y+4, r19	; 0x04
    12d2:	2b 83       	std	Y+3, r18	; 0x03
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	91 05       	cpc	r25, r1
    12dc:	d9 f0       	breq	.+54     	; 0x1314 <DIO_voidSetPortValue+0x5a>
    12de:	2b 81       	ldd	r18, Y+3	; 0x03
    12e0:	3c 81       	ldd	r19, Y+4	; 0x04
    12e2:	23 30       	cpi	r18, 0x03	; 3
    12e4:	31 05       	cpc	r19, r1
    12e6:	34 f4       	brge	.+12     	; 0x12f4 <DIO_voidSetPortValue+0x3a>
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	91 05       	cpc	r25, r1
    12f0:	61 f0       	breq	.+24     	; 0x130a <DIO_voidSetPortValue+0x50>
    12f2:	1e c0       	rjmp	.+60     	; 0x1330 <DIO_voidSetPortValue+0x76>
    12f4:	2b 81       	ldd	r18, Y+3	; 0x03
    12f6:	3c 81       	ldd	r19, Y+4	; 0x04
    12f8:	23 30       	cpi	r18, 0x03	; 3
    12fa:	31 05       	cpc	r19, r1
    12fc:	81 f0       	breq	.+32     	; 0x131e <DIO_voidSetPortValue+0x64>
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	84 30       	cpi	r24, 0x04	; 4
    1304:	91 05       	cpc	r25, r1
    1306:	81 f0       	breq	.+32     	; 0x1328 <DIO_voidSetPortValue+0x6e>
    1308:	13 c0       	rjmp	.+38     	; 0x1330 <DIO_voidSetPortValue+0x76>
	{
	case DIO_u8PORTA : PORTA=Copy_u8Value; break;
    130a:	eb e3       	ldi	r30, 0x3B	; 59
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	80 83       	st	Z, r24
    1312:	0e c0       	rjmp	.+28     	; 0x1330 <DIO_voidSetPortValue+0x76>
	case DIO_u8PORTB : PORTB=Copy_u8Value; break;
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	80 83       	st	Z, r24
    131c:	09 c0       	rjmp	.+18     	; 0x1330 <DIO_voidSetPortValue+0x76>
	case DIO_u8PORTC : PORTC=Copy_u8Value; break;
    131e:	e5 e3       	ldi	r30, 0x35	; 53
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	80 83       	st	Z, r24
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <DIO_voidSetPortValue+0x76>
	case DIO_u8PORTD : PORTD=Copy_u8Value; break;
    1328:	e2 e3       	ldi	r30, 0x32	; 50
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	80 83       	st	Z, r24

	}
}
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <DIO_u8GetPinValue>:




u8 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <DIO_u8GetPinValue+0x6>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <DIO_u8GetPinValue+0x8>
    1346:	0f 92       	push	r0
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result;
	switch(Copy_u8Port)
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	3d 83       	std	Y+5, r19	; 0x05
    1358:	2c 83       	std	Y+4, r18	; 0x04
    135a:	4c 81       	ldd	r20, Y+4	; 0x04
    135c:	5d 81       	ldd	r21, Y+5	; 0x05
    135e:	42 30       	cpi	r20, 0x02	; 2
    1360:	51 05       	cpc	r21, r1
    1362:	41 f1       	breq	.+80     	; 0x13b4 <DIO_u8GetPinValue+0x76>
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	91 05       	cpc	r25, r1
    136c:	34 f4       	brge	.+12     	; 0x137a <DIO_u8GetPinValue+0x3c>
    136e:	2c 81       	ldd	r18, Y+4	; 0x04
    1370:	3d 81       	ldd	r19, Y+5	; 0x05
    1372:	21 30       	cpi	r18, 0x01	; 1
    1374:	31 05       	cpc	r19, r1
    1376:	61 f0       	breq	.+24     	; 0x1390 <DIO_u8GetPinValue+0x52>
    1378:	52 c0       	rjmp	.+164    	; 0x141e <DIO_u8GetPinValue+0xe0>
    137a:	4c 81       	ldd	r20, Y+4	; 0x04
    137c:	5d 81       	ldd	r21, Y+5	; 0x05
    137e:	43 30       	cpi	r20, 0x03	; 3
    1380:	51 05       	cpc	r21, r1
    1382:	51 f1       	breq	.+84     	; 0x13d8 <DIO_u8GetPinValue+0x9a>
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	9d 81       	ldd	r25, Y+5	; 0x05
    1388:	84 30       	cpi	r24, 0x04	; 4
    138a:	91 05       	cpc	r25, r1
    138c:	b9 f1       	breq	.+110    	; 0x13fc <DIO_u8GetPinValue+0xbe>
    138e:	47 c0       	rjmp	.+142    	; 0x141e <DIO_u8GetPinValue+0xe0>
	{
	case DIO_u8PORTA : Local_u8Result = GET_BIT(PINA , Copy_u8Pin); break;
    1390:	e9 e3       	ldi	r30, 0x39	; 57
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a9 01       	movw	r20, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_u8GetPinValue+0x6a>
    13a4:	55 95       	asr	r21
    13a6:	47 95       	ror	r20
    13a8:	8a 95       	dec	r24
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_u8GetPinValue+0x66>
    13ac:	ca 01       	movw	r24, r20
    13ae:	81 70       	andi	r24, 0x01	; 1
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	35 c0       	rjmp	.+106    	; 0x141e <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTB : Local_u8Result = GET_BIT(PINB , Copy_u8Pin); break;
    13b4:	e6 e3       	ldi	r30, 0x36	; 54
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	88 2f       	mov	r24, r24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	a9 01       	movw	r20, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_u8GetPinValue+0x8e>
    13c8:	55 95       	asr	r21
    13ca:	47 95       	ror	r20
    13cc:	8a 95       	dec	r24
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_u8GetPinValue+0x8a>
    13d0:	ca 01       	movw	r24, r20
    13d2:	81 70       	andi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	23 c0       	rjmp	.+70     	; 0x141e <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTC : Local_u8Result = GET_BIT(PINC , Copy_u8Pin); break;
    13d8:	e3 e3       	ldi	r30, 0x33	; 51
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a9 01       	movw	r20, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_u8GetPinValue+0xb2>
    13ec:	55 95       	asr	r21
    13ee:	47 95       	ror	r20
    13f0:	8a 95       	dec	r24
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_u8GetPinValue+0xae>
    13f4:	ca 01       	movw	r24, r20
    13f6:	81 70       	andi	r24, 0x01	; 1
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	11 c0       	rjmp	.+34     	; 0x141e <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTD : Local_u8Result = GET_BIT(PIND , Copy_u8Pin); break;
    13fc:	e0 e3       	ldi	r30, 0x30	; 48
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	a9 01       	movw	r20, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <DIO_u8GetPinValue+0xd6>
    1410:	55 95       	asr	r21
    1412:	47 95       	ror	r20
    1414:	8a 95       	dec	r24
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <DIO_u8GetPinValue+0xd2>
    1418:	ca 01       	movw	r24, r20
    141a:	81 70       	andi	r24, 0x01	; 1
    141c:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8Result;
    141e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <GIE_voidEnable>:
#include "GIE_interface.h"
#include "GIE_register.h"


void GIE_voidEnable(void)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , DIO_PIN7_ID);
    1438:	af e5       	ldi	r26, 0x5F	; 95
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	ef e5       	ldi	r30, 0x5F	; 95
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	80 68       	ori	r24, 0x80	; 128
    1444:	8c 93       	st	X, r24
}
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <GIE_voidDisable>:


void GIE_voidDisable(void)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , DIO_PIN7_ID);
    1454:	af e5       	ldi	r26, 0x5F	; 95
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	ef e5       	ldi	r30, 0x5F	; 95
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	8f 77       	andi	r24, 0x7F	; 127
    1460:	8c 93       	st	X, r24
}
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <PWM0_voidInit>:
#include "DIO_register.h"
#include <avr/io.h>
#include <avr/interrupt.h>
/*DEFINE  (MODE,PRESCALER) IN REGIESTER TCCR0*/
void PWM0_voidInit(u8 duty_cycle)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	00 d0       	rcall	.+0      	; 0x146e <PWM0_voidInit+0x6>
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	8a 83       	std	Y+2, r24	; 0x02
	u8 timer_value=((u16)(duty_cycle*255)/100);
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	48 2f       	mov	r20, r24
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	ca 01       	movw	r24, r20
    147c:	9c 01       	movw	r18, r24
    147e:	22 0f       	add	r18, r18
    1480:	33 1f       	adc	r19, r19
    1482:	c9 01       	movw	r24, r18
    1484:	96 95       	lsr	r25
    1486:	98 2f       	mov	r25, r24
    1488:	88 27       	eor	r24, r24
    148a:	97 95       	ror	r25
    148c:	87 95       	ror	r24
    148e:	82 1b       	sub	r24, r18
    1490:	93 0b       	sbc	r25, r19
    1492:	84 0f       	add	r24, r20
    1494:	95 1f       	adc	r25, r21
    1496:	24 e6       	ldi	r18, 0x64	; 100
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	b9 01       	movw	r22, r18
    149c:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__udivmodhi4>
    14a0:	cb 01       	movw	r24, r22
    14a2:	89 83       	std	Y+1, r24	; 0x01
	/*select the FASTPWM  mode */

	CLR_BIT(TCCR0,TCNT0);
    14a4:	a3 e5       	ldi	r26, 0x53	; 83
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e3 e5       	ldi	r30, 0x53	; 83
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	e2 e5       	ldi	r30, 0x52	; 82
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <PWM0_voidInit+0x5c>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	2a 95       	dec	r18
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <PWM0_voidInit+0x58>
    14c8:	80 95       	com	r24
    14ca:	84 23       	and	r24, r20
    14cc:	8c 93       	st	X, r24

	SET_BIT(TCCR0,WGM00);
    14ce:	a3 e5       	ldi	r26, 0x53	; 83
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e3 e5       	ldi	r30, 0x53	; 83
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	80 64       	ori	r24, 0x40	; 64
    14da:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    14dc:	a3 e5       	ldi	r26, 0x53	; 83
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e3 e5       	ldi	r30, 0x53	; 83
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	88 60       	ori	r24, 0x08	; 8
    14e8:	8c 93       	st	X, r24


	/*Clear OC0 on compare match, set OC0 at TOP (non inverted)*/
	SET_BIT(TCCR0,COM01);
    14ea:	a3 e5       	ldi	r26, 0x53	; 83
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e3 e5       	ldi	r30, 0x53	; 83
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 62       	ori	r24, 0x20	; 32
    14f6:	8c 93       	st	X, r24



	/*select the PRESACLER divided by 256*/

	SET_BIT(TCCR0,CS02);
    14f8:	a3 e5       	ldi	r26, 0x53	; 83
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e3 e5       	ldi	r30, 0x53	; 83
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	84 60       	ori	r24, 0x04	; 4
    1504:	8c 93       	st	X, r24

	DIO_voidSetPinDirection(DIO_u8PORTB, DIO_PIN3_ID, DIO_u8OUTPUT);
    1506:	82 e0       	ldi	r24, 0x02	; 2
    1508:	63 e0       	ldi	r22, 0x03	; 3
    150a:	41 e0       	ldi	r20, 0x01	; 1
    150c:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>

	OCR0=timer_value;
    1510:	ec e5       	ldi	r30, 0x5C	; 92
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	80 83       	st	Z, r24
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <PWM2_voidInit>:
#include "DIO_config.h"


/*DEFINE  (MODE,PRESCALER) IN REGIESTER TCCR2*/
void PWM2_voidInit(void)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
	/*select the FASTPWM  mode */

	SET_BIT(TCCR2 , WGM20);
    152a:	a5 e4       	ldi	r26, 0x45	; 69
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e5 e4       	ldi	r30, 0x45	; 69
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	80 64       	ori	r24, 0x40	; 64
    1536:	8c 93       	st	X, r24
	SET_BIT(TCCR2 , WGM21);
    1538:	a5 e4       	ldi	r26, 0x45	; 69
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e5 e4       	ldi	r30, 0x45	; 69
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	88 60       	ori	r24, 0x08	; 8
    1544:	8c 93       	st	X, r24

	/*select the PRESCALER divided by 1024 */

	SET_BIT(TCCR2,CS20);
    1546:	a5 e4       	ldi	r26, 0x45	; 69
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e5 e4       	ldi	r30, 0x45	; 69
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	81 60       	ori	r24, 0x01	; 1
    1552:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS21);
    1554:	a5 e4       	ldi	r26, 0x45	; 69
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e5 e4       	ldi	r30, 0x45	; 69
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8d 7f       	andi	r24, 0xFD	; 253
    1560:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS22);
    1562:	a5 e4       	ldi	r26, 0x45	; 69
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e5 e4       	ldi	r30, 0x45	; 69
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	84 60       	ori	r24, 0x04	; 4
    156e:	8c 93       	st	X, r24

   /* Set the Compare Match Value */
   OCR2 = TIMER2_OCRVAL;
    1570:	e3 e4       	ldi	r30, 0x43	; 67
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 e4       	ldi	r24, 0x40	; 64
    1576:	80 83       	st	Z, r24

/* Clear on Compare Match, Set at Top for OC0 Pin */
    SET_BIT(TCCR2 , COM21);
    1578:	a5 e4       	ldi	r26, 0x45	; 69
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e5 e4       	ldi	r30, 0x45	; 69
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	80 62       	ori	r24, 0x20	; 32
    1584:	8c 93       	st	X, r24
    CLR_BIT(TCCR2 , COM20);
    1586:	a5 e4       	ldi	r26, 0x45	; 69
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e5 e4       	ldi	r30, 0x45	; 69
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	8f 7e       	andi	r24, 0xEF	; 239
    1592:	8c 93       	st	X, r24
	DIO_voidSetPinDirection(DIO_u8PORTD, DIO_PIN7_ID, DIO_PORT_OUTPUT);
    1594:	84 e0       	ldi	r24, 0x04	; 4
    1596:	67 e0       	ldi	r22, 0x07	; 7
    1598:	4f ef       	ldi	r20, 0xFF	; 255
    159a:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
}
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <PWM2_voidSetOcrValue>:


void PWM2_voidSetOcrValue(u16 Copy_u16OcrValue)
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <PWM2_voidSetOcrValue+0x6>
    15aa:	0f 92       	push	r0
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	9b 83       	std	Y+3, r25	; 0x03
    15b2:	8a 83       	std	Y+2, r24	; 0x02

	u8 timer_value ;
	timer_value =((u16)(Copy_u16OcrValue*255)/100);
    15b4:	4a 81       	ldd	r20, Y+2	; 0x02
    15b6:	5b 81       	ldd	r21, Y+3	; 0x03
    15b8:	ca 01       	movw	r24, r20
    15ba:	9c 01       	movw	r18, r24
    15bc:	22 0f       	add	r18, r18
    15be:	33 1f       	adc	r19, r19
    15c0:	c9 01       	movw	r24, r18
    15c2:	96 95       	lsr	r25
    15c4:	98 2f       	mov	r25, r24
    15c6:	88 27       	eor	r24, r24
    15c8:	97 95       	ror	r25
    15ca:	87 95       	ror	r24
    15cc:	82 1b       	sub	r24, r18
    15ce:	93 0b       	sbc	r25, r19
    15d0:	84 0f       	add	r24, r20
    15d2:	95 1f       	adc	r25, r21
    15d4:	24 e6       	ldi	r18, 0x64	; 100
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	b9 01       	movw	r22, r18
    15da:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__udivmodhi4>
    15de:	cb 01       	movw	r24, r22
    15e0:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(TCCR2,TCNT2);
    15e2:	a5 e4       	ldi	r26, 0x45	; 69
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e5 e4       	ldi	r30, 0x45	; 69
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	e4 e4       	ldi	r30, 0x44	; 68
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <PWM2_voidSetOcrValue+0x60>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <PWM2_voidSetOcrValue+0x5c>
    1608:	80 95       	com	r24
    160a:	84 23       	and	r24, r20
    160c:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,7);
    160e:	a5 e4       	ldi	r26, 0x45	; 69
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e5 e4       	ldi	r30, 0x45	; 69
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	8f 77       	andi	r24, 0x7F	; 127
    161a:	8c 93       	st	X, r24
	TCCR2 |= (1 << WGM20) | (1 << WGM21) | (1 << COM21) | (1 << CS22);
    161c:	a5 e4       	ldi	r26, 0x45	; 69
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e5 e4       	ldi	r30, 0x45	; 69
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	8c 66       	ori	r24, 0x6C	; 108
    1628:	8c 93       	st	X, r24
    OCR2=Copy_u16OcrValue;
    162a:	e3 e4       	ldi	r30, 0x43	; 67
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	80 83       	st	Z, r24

}
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <UART_voidInit>:
#include "UART_private.h"
#include "UART_regiester.h"


void UART_voidInit(void)
{    /*variable =register name */
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	0f 92       	push	r0
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
	u8 Local_UCSRC=0b10000110;
    1648:	86 e8       	ldi	r24, 0x86	; 134
    164a:	89 83       	std	Y+1, r24	; 0x01

	/*disable DOUPLE SPEED */
	CLR_BIT( UCSRA,1);
    164c:	ab e2       	ldi	r26, 0x2B	; 43
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	eb e2       	ldi	r30, 0x2B	; 43
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8d 7f       	andi	r24, 0xFD	; 253
    1658:	8c 93       	st	X, r24

	/* Set character size */
	CLR_BIT(UCSRB,2);
    165a:	aa e2       	ldi	r26, 0x2A	; 42
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	ea e2       	ldi	r30, 0x2A	; 42
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	8b 7f       	andi	r24, 0xFB	; 251
    1666:	8c 93       	st	X, r24
	SET_BIT(Local_UCSRC,2);
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	84 60       	ori	r24, 0x04	; 4
    166c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_UCSRC,1);
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	82 60       	ori	r24, 0x02	; 2
    1672:	89 83       	std	Y+1, r24	; 0x01

	/*register select(UCSRC register */
	SET_BIT(Local_UCSRC,7);
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	80 68       	ori	r24, 0x80	; 128
    1678:	89 83       	std	Y+1, r24	; 0x01

	/*Asynchronous mode */
	CLR_BIT(Local_UCSRC,6);
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	8f 7b       	andi	r24, 0xBF	; 191
    167e:	89 83       	std	Y+1, r24	; 0x01

	/*Disable Parity bit (no parity)*/
	CLR_BIT(Local_UCSRC,5);
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	8f 7d       	andi	r24, 0xDF	; 223
    1684:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_UCSRC,4);
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	8f 7e       	andi	r24, 0xEF	; 239
    168a:	89 83       	std	Y+1, r24	; 0x01

	/*stop bit (2bit)*/
	SET_BIT(Local_UCSRC,3);
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	88 60       	ori	r24, 0x08	; 8
    1690:	89 83       	std	Y+1, r24	; 0x01

	/*Assign The Value to the UCSRC Register*/
	UCSRC=Local_UCSRC;
    1692:	e0 e4       	ldi	r30, 0x40	; 64
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	80 83       	st	Z, r24

	/*Set THE Baud rate to 9600 bps*/
	UBRRL=51;
    169a:	e9 e2       	ldi	r30, 0x29	; 41
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	83 e3       	ldi	r24, 0x33	; 51
    16a0:	80 83       	st	Z, r24

	/*Enable receiver  */

	UART_voidReceiverEnable();
    16a2:	0e 94 89 0b 	call	0x1712	; 0x1712 <UART_voidReceiverEnable>

    /*Enable Transmitter  */

	UART_voidTransmitterEnable();
    16a6:	0e 94 a5 0b 	call	0x174a	; 0x174a <UART_voidTransmitterEnable>

}
    16aa:	0f 90       	pop	r0
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <UART_voidSendData>:
void UART_voidSendData(u8 Copy_u8Data)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	0f 92       	push	r0
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <UART_voidSendData+0x10>
	/*wait until the register be empty */

  while ((GET_BIT(UCSRA , 5)) !=1)
{
	  asm("NOP");
    16c0:	00 00       	nop
}
void UART_voidSendData(u8 Copy_u8Data)
{
	/*wait until the register be empty */

  while ((GET_BIT(UCSRA , 5)) !=1)
    16c2:	eb e2       	ldi	r30, 0x2B	; 43
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	82 95       	swap	r24
    16ca:	86 95       	lsr	r24
    16cc:	87 70       	andi	r24, 0x07	; 7
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	81 70       	andi	r24, 0x01	; 1
    16d4:	90 70       	andi	r25, 0x00	; 0
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	99 f3       	breq	.-26     	; 0x16c0 <UART_voidSendData+0xe>
{
	  asm("NOP");

}
  /*Select Data*/
  UDR=Copy_u8Data;
    16da:	ec e2       	ldi	r30, 0x2C	; 44
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	80 83       	st	Z, r24

}
    16e2:	0f 90       	pop	r0
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <UART_u8ReceiveData>:
u8   UART_u8ReceiveData(void)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <UART_u8ReceiveData+0xc>

	/*wait until the Receiving is completed */

	  while ((GET_BIT(UCSRA,7)) !=1)
	{
		  asm("NOP");
    16f4:	00 00       	nop
u8   UART_u8ReceiveData(void)
{

	/*wait until the Receiving is completed */

	  while ((GET_BIT(UCSRA,7)) !=1)
    16f6:	eb e2       	ldi	r30, 0x2B	; 43
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	88 1f       	adc	r24, r24
    16fe:	88 27       	eor	r24, r24
    1700:	88 1f       	adc	r24, r24
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	b9 f7       	brne	.-18     	; 0x16f4 <UART_u8ReceiveData+0xa>
	{
		  asm("NOP");

	}
	  /*read data */
	  return UDR;
    1706:	ec e2       	ldi	r30, 0x2C	; 44
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z

}
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <UART_voidReceiverEnable>:
void UART_voidReceiverEnable(void)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,4);
    171a:	aa e2       	ldi	r26, 0x2A	; 42
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	ea e2       	ldi	r30, 0x2A	; 42
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	80 61       	ori	r24, 0x10	; 16
    1726:	8c 93       	st	X, r24
}
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <UART_voidReceiverDisable>:
void UART_voidReceiverDisable(void)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,4);
    1736:	aa e2       	ldi	r26, 0x2A	; 42
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	ea e2       	ldi	r30, 0x2A	; 42
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	8f 7e       	andi	r24, 0xEF	; 239
    1742:	8c 93       	st	X, r24
}
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <UART_voidTransmitterEnable>:
void UART_voidTransmitterEnable(void)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,3);
    1752:	aa e2       	ldi	r26, 0x2A	; 42
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ea e2       	ldi	r30, 0x2A	; 42
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	88 60       	ori	r24, 0x08	; 8
    175e:	8c 93       	st	X, r24
}
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <UART_voidTransmitterDisable>:
void UART_voidTransmitterDisable(void)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,3);
    176e:	aa e2       	ldi	r26, 0x2A	; 42
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ea e2       	ldi	r30, 0x2A	; 42
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	87 7f       	andi	r24, 0xF7	; 247
    177a:	8c 93       	st	X, r24

}
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1782:	1f 92       	push	r1
    1784:	0f 92       	push	r0
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	0f 92       	push	r0
    178a:	11 24       	eor	r1, r1
    178c:	2f 93       	push	r18
    178e:	3f 93       	push	r19
    1790:	4f 93       	push	r20
    1792:	5f 93       	push	r21
    1794:	6f 93       	push	r22
    1796:	7f 93       	push	r23
    1798:	8f 93       	push	r24
    179a:	9f 93       	push	r25
    179c:	af 93       	push	r26
    179e:	bf 93       	push	r27
    17a0:	ef 93       	push	r30
    17a2:	ff 93       	push	r31
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    17ac:	80 91 6c 01 	lds	r24, 0x016C
    17b0:	90 91 6d 01 	lds	r25, 0x016D
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	29 f0       	breq	.+10     	; 0x17c2 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    17b8:	e0 91 6c 01 	lds	r30, 0x016C
    17bc:	f0 91 6d 01 	lds	r31, 0x016D
    17c0:	09 95       	icall
	}
}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	ff 91       	pop	r31
    17c8:	ef 91       	pop	r30
    17ca:	bf 91       	pop	r27
    17cc:	af 91       	pop	r26
    17ce:	9f 91       	pop	r25
    17d0:	8f 91       	pop	r24
    17d2:	7f 91       	pop	r23
    17d4:	6f 91       	pop	r22
    17d6:	5f 91       	pop	r21
    17d8:	4f 91       	pop	r20
    17da:	3f 91       	pop	r19
    17dc:	2f 91       	pop	r18
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	1f 90       	pop	r1
    17e6:	18 95       	reti

000017e8 <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <Icu_init+0x6>
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	9a 83       	std	Y+2, r25	; 0x02
    17f4:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    17f6:	a1 e3       	ldi	r26, 0x31	; 49
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e1 e3       	ldi	r30, 0x31	; 49
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	8f 7b       	andi	r24, 0xBF	; 191
    1802:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1804:	ef e4       	ldi	r30, 0x4F	; 79
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	8c e0       	ldi	r24, 0x0C	; 12
    180a:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    180c:	ae e4       	ldi	r26, 0x4E	; 78
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	ee e4       	ldi	r30, 0x4E	; 78
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	98 2f       	mov	r25, r24
    1818:	98 7f       	andi	r25, 0xF8	; 248
    181a:	e9 81       	ldd	r30, Y+1	; 0x01
    181c:	fa 81       	ldd	r31, Y+2	; 0x02
    181e:	80 81       	ld	r24, Z
    1820:	89 2b       	or	r24, r25
    1822:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    1824:	ae e4       	ldi	r26, 0x4E	; 78
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ee e4       	ldi	r30, 0x4E	; 78
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	28 2f       	mov	r18, r24
    1830:	2f 7b       	andi	r18, 0xBF	; 191
    1832:	e9 81       	ldd	r30, Y+1	; 0x01
    1834:	fa 81       	ldd	r31, Y+2	; 0x02
    1836:	81 81       	ldd	r24, Z+1	; 0x01
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	00 24       	eor	r0, r0
    183e:	96 95       	lsr	r25
    1840:	87 95       	ror	r24
    1842:	07 94       	ror	r0
    1844:	96 95       	lsr	r25
    1846:	87 95       	ror	r24
    1848:	07 94       	ror	r0
    184a:	98 2f       	mov	r25, r24
    184c:	80 2d       	mov	r24, r0
    184e:	82 2b       	or	r24, r18
    1850:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    1852:	ec e4       	ldi	r30, 0x4C	; 76
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	11 82       	std	Z+1, r1	; 0x01
    1858:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    185a:	e6 e4       	ldi	r30, 0x46	; 70
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	11 82       	std	Z+1, r1	; 0x01
    1860:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    1862:	a9 e5       	ldi	r26, 0x59	; 89
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e9 e5       	ldi	r30, 0x59	; 89
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	80 62       	ori	r24, 0x20	; 32
    186e:	8c 93       	st	X, r24
}
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	00 d0       	rcall	.+0      	; 0x1880 <Icu_setCallBack+0x6>
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	9a 81       	ldd	r25, Y+2	; 0x02
    188c:	90 93 6d 01 	sts	0x016D, r25
    1890:	80 93 6c 01 	sts	0x016C, r24
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	0f 92       	push	r0
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    18aa:	ae e4       	ldi	r26, 0x4E	; 78
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	ee e4       	ldi	r30, 0x4E	; 78
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	28 2f       	mov	r18, r24
    18b6:	2f 7b       	andi	r18, 0xBF	; 191
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	88 2f       	mov	r24, r24
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	00 24       	eor	r0, r0
    18c0:	96 95       	lsr	r25
    18c2:	87 95       	ror	r24
    18c4:	07 94       	ror	r0
    18c6:	96 95       	lsr	r25
    18c8:	87 95       	ror	r24
    18ca:	07 94       	ror	r0
    18cc:	98 2f       	mov	r25, r24
    18ce:	80 2d       	mov	r24, r0
    18d0:	82 2b       	or	r24, r18
    18d2:	8c 93       	st	X, r24
}
    18d4:	0f 90       	pop	r0
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
u16 Icu_getInputCaptureValue(void)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    18e4:	e6 e4       	ldi	r30, 0x46	; 70
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
}
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    18fa:	ec e4       	ldi	r30, 0x4C	; 76
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	11 82       	std	Z+1, r1	; 0x01
    1900:	10 82       	st	Z, r1
}
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <Icu_DeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_DeInit(void)
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1910:	ef e4       	ldi	r30, 0x4F	; 79
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	10 82       	st	Z, r1
	TCCR1B = 0;
    1916:	ee e4       	ldi	r30, 0x4E	; 78
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	10 82       	st	Z, r1
	TCNT1 = 0;
    191c:	ec e4       	ldi	r30, 0x4C	; 76
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	11 82       	std	Z+1, r1	; 0x01
    1922:	10 82       	st	Z, r1
	ICR1 = 0;
    1924:	e6 e4       	ldi	r30, 0x46	; 70
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	11 82       	std	Z+1, r1	; 0x01
    192a:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    192c:	a9 e5       	ldi	r26, 0x59	; 89
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e9 e5       	ldi	r30, 0x59	; 89
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	8f 7d       	andi	r24, 0xDF	; 223
    1938:	8c 93       	st	X, r24
}
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <DC_MOTOR1_Init>:
#include "DC_MOTOR_Interface.h"

//MOTOR 1 Functions 

void DC_MOTOR1_Init(void)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR1_PIN0,DIO_u8OUTPUT);
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR1_PIN1,DIO_u8OUTPUT);
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	61 e0       	ldi	r22, 0x01	; 1
    1956:	41 e0       	ldi	r20, 0x01	; 1
    1958:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTD,DIO_PIN7_ID,DIO_u8OUTPUT);/*PWM2 PIN IN MC (OC2) */
    195c:	84 e0       	ldi	r24, 0x04	; 4
    195e:	67 e0       	ldi	r22, 0x07	; 7
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
}
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <DC_MOTOR1_voidRotateClockwise>:

void DC_MOTOR1_voidRotateClockwise(void)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR1_PIN0 , DIO_u8LOW);
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR1_PIN1 , DIO_u8HIGH);
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	61 e0       	ldi	r22, 0x01	; 1
    1982:	41 e0       	ldi	r20, 0x01	; 1
    1984:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>


}
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <DC_MOTOR1_voidRotateAntiClockwise>:
void DC_MOTOR1_voidRotateAntiClockwise(void)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR1_PIN1 , DIO_u8LOW);
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	61 e0       	ldi	r22, 0x01	; 1
    199a:	40 e0       	ldi	r20, 0x00	; 0
    199c:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR1_PIN0 , DIO_u8HIGH);
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	41 e0       	ldi	r20, 0x01	; 1
    19a6:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>


}
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <DC_MOTOR1_voidStop>:
void DC_MOTOR1_voidStop(void)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR1_PIN0 , DIO_u8LOW);
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR1_PIN1 , DIO_u8LOW);
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	61 e0       	ldi	r22, 0x01	; 1
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

}
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <DC_MOTOR2_Init>:

//MOTOR 2 Functions 

void DC_MOTOR2_Init(void)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR2_PIN2,DIO_u8OUTPUT);
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	64 e0       	ldi	r22, 0x04	; 4
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR2_PIN3,DIO_u8OUTPUT);
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	65 e0       	ldi	r22, 0x05	; 5
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTD,DIO_PIN7_ID,DIO_u8OUTPUT);/*PWM2 PIN IN MC (OC2) */
    19ee:	84 e0       	ldi	r24, 0x04	; 4
    19f0:	67 e0       	ldi	r22, 0x07	; 7
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>

}
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <DC_MOTOR2_voidRotateClockwise>:

void DC_MOTOR2_voidRotateClockwise(void)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR2_PIN2 , DIO_u8LOW);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	64 e0       	ldi	r22, 0x04	; 4
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR2_PIN3 , DIO_u8HIGH);
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	65 e0       	ldi	r22, 0x05	; 5
    1a14:	41 e0       	ldi	r20, 0x01	; 1
    1a16:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>


}
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <DC_MOTOR2_voidRotateAntiClockwise>:
void DC_MOTOR2_voidRotateAntiClockwise(void)
{
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR2_PIN3 , DIO_u8LOW);
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	65 e0       	ldi	r22, 0x05	; 5
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR2_PIN2 , DIO_u8HIGH);
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	64 e0       	ldi	r22, 0x04	; 4
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>




}
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <DC_MOTOR2_voidStop>:
void DC_MOTOR2_voidStop(void)
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR2_PIN2 , DIO_u8LOW);
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	64 e0       	ldi	r22, 0x04	; 4
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR2_PIN3 , DIO_u8LOW);
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	65 e0       	ldi	r22, 0x05	; 5
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

}
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <DC_MOTOR3_Init>:
//MOTOR 3 Functions 

void DC_MOTOR3_Init(void)
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR3_PIN4 ,DIO_u8OUTPUT);
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	64 e0       	ldi	r22, 0x04	; 4
    1a70:	41 e0       	ldi	r20, 0x01	; 1
    1a72:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR3_PIN5,DIO_u8OUTPUT);
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	65 e0       	ldi	r22, 0x05	; 5
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTD,DIO_PIN7_ID,DIO_u8OUTPUT);/*PWM2 PIN IN MC (OC2) */
    1a80:	84 e0       	ldi	r24, 0x04	; 4
    1a82:	67 e0       	ldi	r22, 0x07	; 7
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>

}
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <DC_MOTOR3_voidRotateClockwise>:

void DC_MOTOR3_voidRotateClockwise(void)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR3_PIN4 , DIO_u8LOW);
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	64 e0       	ldi	r22, 0x04	; 4
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR3_PIN5 , DIO_u8HIGH);
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	65 e0       	ldi	r22, 0x05	; 5
    1aa6:	41 e0       	ldi	r20, 0x01	; 1
    1aa8:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>


}
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <DC_MOTOR3_voidRotateAntiClockwise>:
void DC_MOTOR3_voidRotateAntiClockwise(void)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR3_PIN5 , DIO_u8LOW);
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	65 e0       	ldi	r22, 0x05	; 5
    1abe:	40 e0       	ldi	r20, 0x00	; 0
    1ac0:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR3_PIN4 , DIO_u8HIGH);
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	64 e0       	ldi	r22, 0x04	; 4
    1ac8:	41 e0       	ldi	r20, 0x01	; 1
    1aca:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>


}
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <DC_MOTOR3_voidStop>:
void DC_MOTOR3_voidStop(void)
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR3_PIN4 , DIO_u8LOW);
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	64 e0       	ldi	r22, 0x04	; 4
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR3_PIN5 , DIO_u8LOW);
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	65 e0       	ldi	r22, 0x05	; 5
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

}
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <DC_MOTOR4_Init>:

//MOTOR 4 Functions 

void DC_MOTOR4_Init(void)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR4_PIN6 ,DIO_u8OUTPUT);
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	41 e0       	ldi	r20, 0x01	; 1
    1b04:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTA,DC_MOTOR4_PIN7,DIO_u8OUTPUT);
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	41 e0       	ldi	r20, 0x01	; 1
    1b0e:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTD,DIO_PIN7_ID,DIO_u8OUTPUT);/*PWM2 PIN IN MC (OC2) */
    1b12:	84 e0       	ldi	r24, 0x04	; 4
    1b14:	67 e0       	ldi	r22, 0x07	; 7
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>

}
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <DC_MOTOR4_voidRotateClockwise>:

void DC_MOTOR4_voidRotateClockwise(void)
{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR4_PIN6 , DIO_u8LOW);
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	40 e0       	ldi	r20, 0x00	; 0
    1b30:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR4_PIN7 , DIO_u8HIGH);
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>


}
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <DC_MOTOR4_voidRotateAntiClockwise>:
void DC_MOTOR4_voidRotateAntiClockwise(void)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR4_PIN7 , DIO_u8LOW);
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	61 e0       	ldi	r22, 0x01	; 1
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR4_PIN6 , DIO_u8HIGH);
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	41 e0       	ldi	r20, 0x01	; 1
    1b5c:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>


}
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <DC_MOTOR4_voidStop>:
void DC_MOTOR4_voidStop(void)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR4_PIN6 , DIO_u8LOW);
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT , DC_MOTOR4_PIN7 , DIO_u8LOW);
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

}
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <Set_Angle_Servo_motor_3>:
#include "../MCAL/PWM0_interface.h"
#include "../LIB/STD_TYPES.h"

void Set_Angle_Servo_motor_3(u8 angle)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	0f 92       	push	r0
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	89 83       	std	Y+1, r24	; 0x01
	if (angle == 0)
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	88 23       	and	r24, r24
    1b98:	21 f4       	brne	.+8      	; 0x1ba2 <Set_Angle_Servo_motor_3+0x1a>
	{
		PWM0_voidInit(19);
    1b9a:	83 e1       	ldi	r24, 0x13	; 19
    1b9c:	0e 94 34 0a 	call	0x1468	; 0x1468 <PWM0_voidInit>
    1ba0:	06 c0       	rjmp	.+12     	; 0x1bae <Set_Angle_Servo_motor_3+0x26>
	}
	else if(angle ==90)
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	8a 35       	cpi	r24, 0x5A	; 90
    1ba6:	19 f4       	brne	.+6      	; 0x1bae <Set_Angle_Servo_motor_3+0x26>
	{
		PWM0_voidInit(7.8);
    1ba8:	87 e0       	ldi	r24, 0x07	; 7
    1baa:	0e 94 34 0a 	call	0x1468	; 0x1468 <PWM0_voidInit>
	}
}
    1bae:	0f 90       	pop	r0
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <Ultrasonic_edgeProcessing>:
u8 g_edgeCount3 = 0;
u16 g_timeHigh=0;
u16 g_timeHigh2=0;
u16 g_timeHigh3=0;
void Ultrasonic_edgeProcessing(void)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62

	g_edgeCount++;
    1bbe:	80 91 7a 01 	lds	r24, 0x017A
    1bc2:	8f 5f       	subi	r24, 0xFF	; 255
    1bc4:	80 93 7a 01 	sts	0x017A, r24
	if(g_edgeCount == 1)
    1bc8:	80 91 7a 01 	lds	r24, 0x017A
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	31 f4       	brne	.+12     	; 0x1bdc <Ultrasonic_edgeProcessing+0x26>
	{
		Icu_clearTimerValue();
    1bd0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(FALLING);
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	0e 94 4f 0c 	call	0x189e	; 0x189e <Icu_setEdgeDetectionType>
    1bda:	0f c0       	rjmp	.+30     	; 0x1bfa <Ultrasonic_edgeProcessing+0x44>
	}
	else if(g_edgeCount == 2)
    1bdc:	80 91 7a 01 	lds	r24, 0x017A
    1be0:	82 30       	cpi	r24, 0x02	; 2
    1be2:	59 f4       	brne	.+22     	; 0x1bfa <Ultrasonic_edgeProcessing+0x44>
	{
		g_timeHigh = Icu_getInputCaptureValue();
    1be4:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Icu_getInputCaptureValue>
    1be8:	90 93 7e 01 	sts	0x017E, r25
    1bec:	80 93 7d 01 	sts	0x017D, r24
		Icu_setEdgeDetectionType(RISING);
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	0e 94 4f 0c 	call	0x189e	; 0x189e <Icu_setEdgeDetectionType>
		g_edgeCount=0;
    1bf6:	10 92 7a 01 	sts	0x017A, r1
	}

}
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <Ultrasonic_edgeProcessing2>:

void Ultrasonic_edgeProcessing2(void)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62

	g_edgeCount2++;
    1c08:	80 91 7b 01 	lds	r24, 0x017B
    1c0c:	8f 5f       	subi	r24, 0xFF	; 255
    1c0e:	80 93 7b 01 	sts	0x017B, r24
	if(g_edgeCount2 == 1)
    1c12:	80 91 7b 01 	lds	r24, 0x017B
    1c16:	81 30       	cpi	r24, 0x01	; 1
    1c18:	31 f4       	brne	.+12     	; 0x1c26 <Ultrasonic_edgeProcessing2+0x26>
	{
		Icu_clearTimerValue();
    1c1a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(FALLING);
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	0e 94 4f 0c 	call	0x189e	; 0x189e <Icu_setEdgeDetectionType>
    1c24:	0f c0       	rjmp	.+30     	; 0x1c44 <Ultrasonic_edgeProcessing2+0x44>
	}
	else if(g_edgeCount2 == 2)
    1c26:	80 91 7b 01 	lds	r24, 0x017B
    1c2a:	82 30       	cpi	r24, 0x02	; 2
    1c2c:	59 f4       	brne	.+22     	; 0x1c44 <Ultrasonic_edgeProcessing2+0x44>
	{
		g_timeHigh2 = Icu_getInputCaptureValue();
    1c2e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Icu_getInputCaptureValue>
    1c32:	90 93 80 01 	sts	0x0180, r25
    1c36:	80 93 7f 01 	sts	0x017F, r24
		Icu_setEdgeDetectionType(RISING);
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	0e 94 4f 0c 	call	0x189e	; 0x189e <Icu_setEdgeDetectionType>
		g_edgeCount2=0;
    1c40:	10 92 7b 01 	sts	0x017B, r1
	}

}
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <Ultrasonic_edgeProcessing3>:
void Ultrasonic_edgeProcessing3(void)
{
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62

	g_edgeCount3++;
    1c52:	80 91 7c 01 	lds	r24, 0x017C
    1c56:	8f 5f       	subi	r24, 0xFF	; 255
    1c58:	80 93 7c 01 	sts	0x017C, r24
	if(g_edgeCount3 == 1)
    1c5c:	80 91 7c 01 	lds	r24, 0x017C
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	31 f4       	brne	.+12     	; 0x1c70 <Ultrasonic_edgeProcessing3+0x26>
	{
		Icu_clearTimerValue();
    1c64:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(FALLING);
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	0e 94 4f 0c 	call	0x189e	; 0x189e <Icu_setEdgeDetectionType>
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <Ultrasonic_edgeProcessing3+0x44>
	}
	else if(g_edgeCount3 == 2)
    1c70:	80 91 7c 01 	lds	r24, 0x017C
    1c74:	82 30       	cpi	r24, 0x02	; 2
    1c76:	59 f4       	brne	.+22     	; 0x1c8e <Ultrasonic_edgeProcessing3+0x44>
	{
		g_timeHigh3 = Icu_getInputCaptureValue();
    1c78:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Icu_getInputCaptureValue>
    1c7c:	90 93 82 01 	sts	0x0182, r25
    1c80:	80 93 81 01 	sts	0x0181, r24
		Icu_setEdgeDetectionType(RISING);
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	0e 94 4f 0c 	call	0x189e	; 0x189e <Icu_setEdgeDetectionType>
		g_edgeCount3=0;
    1c8a:	10 92 7c 01 	sts	0x017C, r1
	}

}
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <Ultrasonic_init>:

void Ultrasonic_init(void)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	0f 92       	push	r0
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
	/* Create configuration structure for ICU driver */
	Icu_Clock Icu_Config_ultrasonic = {F_CPU_8,RISING};
    1c9e:	82 e0       	ldi	r24, 0x02	; 2
    1ca0:	89 83       	std	Y+1, r24	; 0x01
	Icu_setCallBack(Ultrasonic_edgeProcessing);
    1ca2:	8b ed       	ldi	r24, 0xDB	; 219
    1ca4:	9d e0       	ldi	r25, 0x0D	; 13
    1ca6:	0e 94 3d 0c 	call	0x187a	; 0x187a <Icu_setCallBack>
	Icu_init(&Icu_Config_ultrasonic);
    1caa:	ce 01       	movw	r24, r28
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <Icu_init>
	DIO_voidSetPinDirection(TRIG_PORT_ID, TRIG_PIN_ID, DIO_u8OUTPUT);
    1cb2:	82 e0       	ldi	r24, 0x02	; 2
    1cb4:	64 e0       	ldi	r22, 0x04	; 4
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(TRIG_PORT_ID, TRIG_PIN_ID,DIO_u8LOW);
    1cbc:	82 e0       	ldi	r24, 0x02	; 2
    1cbe:	64 e0       	ldi	r22, 0x04	; 4
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

}
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <Ultrasonic2_init>:
void Ultrasonic2_init(void)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	0f 92       	push	r0
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
	/* Create configuration structure for ICU driver */
	Icu_Clock Icu_Config_ultrasonic2 = {F_CPU_8,RISING};
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	89 83       	std	Y+1, r24	; 0x01
	Icu_setCallBack(Ultrasonic_edgeProcessing2);
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	9e e0       	ldi	r25, 0x0E	; 14
    1ce0:	0e 94 3d 0c 	call	0x187a	; 0x187a <Icu_setCallBack>
	Icu_init(&Icu_Config_ultrasonic2);
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	01 96       	adiw	r24, 0x01	; 1
    1ce8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <Icu_init>
	DIO_voidSetPinDirection(TRIG2_PORT_ID, TRIG2_PIN_ID, DIO_u8OUTPUT);
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	65 e0       	ldi	r22, 0x05	; 5
    1cf0:	41 e0       	ldi	r20, 0x01	; 1
    1cf2:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(TRIG2_PORT_ID, TRIG2_PIN_ID,DIO_u8LOW);
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	65 e0       	ldi	r22, 0x05	; 5
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

}
    1d00:	0f 90       	pop	r0
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <Ultrasonic3_init>:
void Ultrasonic3_init(void)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	0f 92       	push	r0
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
	/* Create configuration structure for ICU driver */
	Icu_Clock Icu_Config_ultrasonic3 = {F_CPU_8,RISING};
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	89 83       	std	Y+1, r24	; 0x01
	Icu_setCallBack(Ultrasonic_edgeProcessing3);
    1d16:	85 e2       	ldi	r24, 0x25	; 37
    1d18:	9e e0       	ldi	r25, 0x0E	; 14
    1d1a:	0e 94 3d 0c 	call	0x187a	; 0x187a <Icu_setCallBack>
	Icu_init(&Icu_Config_ultrasonic3);
    1d1e:	ce 01       	movw	r24, r28
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <Icu_init>
	DIO_voidSetPinDirection(TRIG3_PORT_ID, TRIG3_PIN_ID, DIO_u8OUTPUT);
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	66 e0       	ldi	r22, 0x06	; 6
    1d2a:	41 e0       	ldi	r20, 0x01	; 1
    1d2c:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(TRIG3_PORT_ID, TRIG3_PIN_ID,DIO_u8LOW);
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	66 e0       	ldi	r22, 0x06	; 6
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

}
    1d3a:	0f 90       	pop	r0
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <Ultrasonic_Trigger>:

void Ultrasonic_Trigger(void)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	68 97       	sbiw	r28, 0x18	; 24
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(TRIG_PORT_ID, TRIG_PIN_ID,DIO_u8HIGH);
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	64 e0       	ldi	r22, 0x04	; 4
    1d5a:	41 e0       	ldi	r20, 0x01	; 1
    1d5c:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a0 e2       	ldi	r26, 0x20	; 32
    1d66:	b1 e4       	ldi	r27, 0x41	; 65
    1d68:	8d 8b       	std	Y+21, r24	; 0x15
    1d6a:	9e 8b       	std	Y+22, r25	; 0x16
    1d6c:	af 8b       	std	Y+23, r26	; 0x17
    1d6e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d70:	6d 89       	ldd	r22, Y+21	; 0x15
    1d72:	7e 89       	ldd	r23, Y+22	; 0x16
    1d74:	8f 89       	ldd	r24, Y+23	; 0x17
    1d76:	98 8d       	ldd	r25, Y+24	; 0x18
    1d78:	2b ea       	ldi	r18, 0xAB	; 171
    1d7a:	3a ea       	ldi	r19, 0xAA	; 170
    1d7c:	4a e2       	ldi	r20, 0x2A	; 42
    1d7e:	50 e4       	ldi	r21, 0x40	; 64
    1d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	89 8b       	std	Y+17, r24	; 0x11
    1d8a:	9a 8b       	std	Y+18, r25	; 0x12
    1d8c:	ab 8b       	std	Y+19, r26	; 0x13
    1d8e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d90:	69 89       	ldd	r22, Y+17	; 0x11
    1d92:	7a 89       	ldd	r23, Y+18	; 0x12
    1d94:	8b 89       	ldd	r24, Y+19	; 0x13
    1d96:	9c 89       	ldd	r25, Y+20	; 0x14
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e8       	ldi	r20, 0x80	; 128
    1d9e:	5f e3       	ldi	r21, 0x3F	; 63
    1da0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da4:	88 23       	and	r24, r24
    1da6:	1c f4       	brge	.+6      	; 0x1dae <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	88 8b       	std	Y+16, r24	; 0x10
    1dac:	91 c0       	rjmp	.+290    	; 0x1ed0 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    1dae:	69 89       	ldd	r22, Y+17	; 0x11
    1db0:	7a 89       	ldd	r23, Y+18	; 0x12
    1db2:	8b 89       	ldd	r24, Y+19	; 0x13
    1db4:	9c 89       	ldd	r25, Y+20	; 0x14
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	4f e7       	ldi	r20, 0x7F	; 127
    1dbc:	53 e4       	ldi	r21, 0x43	; 67
    1dbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dc2:	18 16       	cp	r1, r24
    1dc4:	0c f0       	brlt	.+2      	; 0x1dc8 <Ultrasonic_Trigger+0x86>
    1dc6:	7b c0       	rjmp	.+246    	; 0x1ebe <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dca:	7e 89       	ldd	r23, Y+22	; 0x16
    1dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dce:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	4a e7       	ldi	r20, 0x7A	; 122
    1dd6:	54 e4       	ldi	r21, 0x44	; 68
    1dd8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	8c 87       	std	Y+12, r24	; 0x0c
    1de2:	9d 87       	std	Y+13, r25	; 0x0d
    1de4:	ae 87       	std	Y+14, r26	; 0x0e
    1de6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dea:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dec:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dee:	9f 85       	ldd	r25, Y+15	; 0x0f
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a ef       	ldi	r20, 0xFA	; 250
    1df6:	54 e4       	ldi	r21, 0x44	; 68
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	88 87       	std	Y+8, r24	; 0x08
    1e02:	99 87       	std	Y+9, r25	; 0x09
    1e04:	aa 87       	std	Y+10, r26	; 0x0a
    1e06:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e08:	68 85       	ldd	r22, Y+8	; 0x08
    1e0a:	79 85       	ldd	r23, Y+9	; 0x09
    1e0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	2c f4       	brge	.+10     	; 0x1e2a <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9f 83       	std	Y+7, r25	; 0x07
    1e26:	8e 83       	std	Y+6, r24	; 0x06
    1e28:	3f c0       	rjmp	.+126    	; 0x1ea8 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    1e2a:	68 85       	ldd	r22, Y+8	; 0x08
    1e2c:	79 85       	ldd	r23, Y+9	; 0x09
    1e2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	4f e7       	ldi	r20, 0x7F	; 127
    1e38:	57 e4       	ldi	r21, 0x47	; 71
    1e3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	4c f5       	brge	.+82     	; 0x1e94 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e42:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e44:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e46:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e48:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e2       	ldi	r20, 0x20	; 32
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9f 83       	std	Y+7, r25	; 0x07
    1e68:	8e 83       	std	Y+6, r24	; 0x06
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <Ultrasonic_Trigger+0x148>
    1e6c:	88 ec       	ldi	r24, 0xC8	; 200
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9d 83       	std	Y+5, r25	; 0x05
    1e72:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e74:	8c 81       	ldd	r24, Y+4	; 0x04
    1e76:	9d 81       	ldd	r25, Y+5	; 0x05
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <Ultrasonic_Trigger+0x136>
    1e7c:	9d 83       	std	Y+5, r25	; 0x05
    1e7e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e80:	8e 81       	ldd	r24, Y+6	; 0x06
    1e82:	9f 81       	ldd	r25, Y+7	; 0x07
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	9f 83       	std	Y+7, r25	; 0x07
    1e88:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f7       	brne	.-38     	; 0x1e6c <Ultrasonic_Trigger+0x12a>
    1e92:	24 c0       	rjmp	.+72     	; 0x1edc <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e94:	68 85       	ldd	r22, Y+8	; 0x08
    1e96:	79 85       	ldd	r23, Y+9	; 0x09
    1e98:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9f 83       	std	Y+7, r25	; 0x07
    1ea6:	8e 83       	std	Y+6, r24	; 0x06
    1ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eaa:	9f 81       	ldd	r25, Y+7	; 0x07
    1eac:	9b 83       	std	Y+3, r25	; 0x03
    1eae:	8a 83       	std	Y+2, r24	; 0x02
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <Ultrasonic_Trigger+0x172>
    1eb8:	9b 83       	std	Y+3, r25	; 0x03
    1eba:	8a 83       	std	Y+2, r24	; 0x02
    1ebc:	0f c0       	rjmp	.+30     	; 0x1edc <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ebe:	69 89       	ldd	r22, Y+17	; 0x11
    1ec0:	7a 89       	ldd	r23, Y+18	; 0x12
    1ec2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	88 8b       	std	Y+16, r24	; 0x10
    1ed0:	88 89       	ldd	r24, Y+16	; 0x10
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	8a 95       	dec	r24
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <Ultrasonic_Trigger+0x194>
    1eda:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(TRIG_PORT_ID, TRIG_PIN_ID,DIO_u8LOW);
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	64 e0       	ldi	r22, 0x04	; 4
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
}
    1ee6:	68 96       	adiw	r28, 0x18	; 24
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <Ultrasonic2_Trigger>:

void Ultrasonic2_Trigger(void)
{
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	68 97       	sbiw	r28, 0x18	; 24
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(TRIG2_PORT_ID, TRIG2_PIN_ID,DIO_u8HIGH);
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	65 e0       	ldi	r22, 0x05	; 5
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	a0 e2       	ldi	r26, 0x20	; 32
    1f1c:	b1 e4       	ldi	r27, 0x41	; 65
    1f1e:	8d 8b       	std	Y+21, r24	; 0x15
    1f20:	9e 8b       	std	Y+22, r25	; 0x16
    1f22:	af 8b       	std	Y+23, r26	; 0x17
    1f24:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f26:	6d 89       	ldd	r22, Y+21	; 0x15
    1f28:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2e:	2b ea       	ldi	r18, 0xAB	; 171
    1f30:	3a ea       	ldi	r19, 0xAA	; 170
    1f32:	4a e2       	ldi	r20, 0x2A	; 42
    1f34:	50 e4       	ldi	r21, 0x40	; 64
    1f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	89 8b       	std	Y+17, r24	; 0x11
    1f40:	9a 8b       	std	Y+18, r25	; 0x12
    1f42:	ab 8b       	std	Y+19, r26	; 0x13
    1f44:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f46:	69 89       	ldd	r22, Y+17	; 0x11
    1f48:	7a 89       	ldd	r23, Y+18	; 0x12
    1f4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e8       	ldi	r20, 0x80	; 128
    1f54:	5f e3       	ldi	r21, 0x3F	; 63
    1f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f5a:	88 23       	and	r24, r24
    1f5c:	1c f4       	brge	.+6      	; 0x1f64 <Ultrasonic2_Trigger+0x6c>
		__ticks = 1;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	88 8b       	std	Y+16, r24	; 0x10
    1f62:	91 c0       	rjmp	.+290    	; 0x2086 <Ultrasonic2_Trigger+0x18e>
	else if (__tmp > 255)
    1f64:	69 89       	ldd	r22, Y+17	; 0x11
    1f66:	7a 89       	ldd	r23, Y+18	; 0x12
    1f68:	8b 89       	ldd	r24, Y+19	; 0x13
    1f6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4f e7       	ldi	r20, 0x7F	; 127
    1f72:	53 e4       	ldi	r21, 0x43	; 67
    1f74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f78:	18 16       	cp	r1, r24
    1f7a:	0c f0       	brlt	.+2      	; 0x1f7e <Ultrasonic2_Trigger+0x86>
    1f7c:	7b c0       	rjmp	.+246    	; 0x2074 <Ultrasonic2_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1f7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f80:	7e 89       	ldd	r23, Y+22	; 0x16
    1f82:	8f 89       	ldd	r24, Y+23	; 0x17
    1f84:	98 8d       	ldd	r25, Y+24	; 0x18
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	4a e7       	ldi	r20, 0x7A	; 122
    1f8c:	54 e4       	ldi	r21, 0x44	; 68
    1f8e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	8c 87       	std	Y+12, r24	; 0x0c
    1f98:	9d 87       	std	Y+13, r25	; 0x0d
    1f9a:	ae 87       	std	Y+14, r26	; 0x0e
    1f9c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fa0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fa2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fa4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a ef       	ldi	r20, 0xFA	; 250
    1fac:	54 e4       	ldi	r21, 0x44	; 68
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	88 87       	std	Y+8, r24	; 0x08
    1fb8:	99 87       	std	Y+9, r25	; 0x09
    1fba:	aa 87       	std	Y+10, r26	; 0x0a
    1fbc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1fbe:	68 85       	ldd	r22, Y+8	; 0x08
    1fc0:	79 85       	ldd	r23, Y+9	; 0x09
    1fc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e8       	ldi	r20, 0x80	; 128
    1fcc:	5f e3       	ldi	r21, 0x3F	; 63
    1fce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	2c f4       	brge	.+10     	; 0x1fe0 <Ultrasonic2_Trigger+0xe8>
		__ticks = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9f 83       	std	Y+7, r25	; 0x07
    1fdc:	8e 83       	std	Y+6, r24	; 0x06
    1fde:	3f c0       	rjmp	.+126    	; 0x205e <Ultrasonic2_Trigger+0x166>
	else if (__tmp > 65535)
    1fe0:	68 85       	ldd	r22, Y+8	; 0x08
    1fe2:	79 85       	ldd	r23, Y+9	; 0x09
    1fe4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fe6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	3f ef       	ldi	r19, 0xFF	; 255
    1fec:	4f e7       	ldi	r20, 0x7F	; 127
    1fee:	57 e4       	ldi	r21, 0x47	; 71
    1ff0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ff4:	18 16       	cp	r1, r24
    1ff6:	4c f5       	brge	.+82     	; 0x204a <Ultrasonic2_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ffa:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ffc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ffe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e2       	ldi	r20, 0x20	; 32
    2006:	51 e4       	ldi	r21, 0x41	; 65
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9f 83       	std	Y+7, r25	; 0x07
    201e:	8e 83       	std	Y+6, r24	; 0x06
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <Ultrasonic2_Trigger+0x148>
    2022:	88 ec       	ldi	r24, 0xC8	; 200
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9d 83       	std	Y+5, r25	; 0x05
    2028:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    202a:	8c 81       	ldd	r24, Y+4	; 0x04
    202c:	9d 81       	ldd	r25, Y+5	; 0x05
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <Ultrasonic2_Trigger+0x136>
    2032:	9d 83       	std	Y+5, r25	; 0x05
    2034:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2036:	8e 81       	ldd	r24, Y+6	; 0x06
    2038:	9f 81       	ldd	r25, Y+7	; 0x07
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	9f 83       	std	Y+7, r25	; 0x07
    203e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2040:	8e 81       	ldd	r24, Y+6	; 0x06
    2042:	9f 81       	ldd	r25, Y+7	; 0x07
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	69 f7       	brne	.-38     	; 0x2022 <Ultrasonic2_Trigger+0x12a>
    2048:	24 c0       	rjmp	.+72     	; 0x2092 <Ultrasonic2_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204a:	68 85       	ldd	r22, Y+8	; 0x08
    204c:	79 85       	ldd	r23, Y+9	; 0x09
    204e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2050:	9b 85       	ldd	r25, Y+11	; 0x0b
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9f 83       	std	Y+7, r25	; 0x07
    205c:	8e 83       	std	Y+6, r24	; 0x06
    205e:	8e 81       	ldd	r24, Y+6	; 0x06
    2060:	9f 81       	ldd	r25, Y+7	; 0x07
    2062:	9b 83       	std	Y+3, r25	; 0x03
    2064:	8a 83       	std	Y+2, r24	; 0x02
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	9b 81       	ldd	r25, Y+3	; 0x03
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <Ultrasonic2_Trigger+0x172>
    206e:	9b 83       	std	Y+3, r25	; 0x03
    2070:	8a 83       	std	Y+2, r24	; 0x02
    2072:	0f c0       	rjmp	.+30     	; 0x2092 <Ultrasonic2_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2074:	69 89       	ldd	r22, Y+17	; 0x11
    2076:	7a 89       	ldd	r23, Y+18	; 0x12
    2078:	8b 89       	ldd	r24, Y+19	; 0x13
    207a:	9c 89       	ldd	r25, Y+20	; 0x14
    207c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	88 8b       	std	Y+16, r24	; 0x10
    2086:	88 89       	ldd	r24, Y+16	; 0x10
    2088:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	8a 95       	dec	r24
    208e:	f1 f7       	brne	.-4      	; 0x208c <Ultrasonic2_Trigger+0x194>
    2090:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(TRIG2_PORT_ID, TRIG2_PIN_ID,DIO_u8LOW);
    2092:	82 e0       	ldi	r24, 0x02	; 2
    2094:	65 e0       	ldi	r22, 0x05	; 5
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
}
    209c:	68 96       	adiw	r28, 0x18	; 24
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <Ultrasonic3_Trigger>:
void Ultrasonic3_Trigger(void)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	68 97       	sbiw	r28, 0x18	; 24
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(TRIG3_PORT_ID, TRIG3_PIN_ID,DIO_u8HIGH);
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	66 e0       	ldi	r22, 0x06	; 6
    20c6:	41 e0       	ldi	r20, 0x01	; 1
    20c8:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a0 e2       	ldi	r26, 0x20	; 32
    20d2:	b1 e4       	ldi	r27, 0x41	; 65
    20d4:	8d 8b       	std	Y+21, r24	; 0x15
    20d6:	9e 8b       	std	Y+22, r25	; 0x16
    20d8:	af 8b       	std	Y+23, r26	; 0x17
    20da:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20dc:	6d 89       	ldd	r22, Y+21	; 0x15
    20de:	7e 89       	ldd	r23, Y+22	; 0x16
    20e0:	8f 89       	ldd	r24, Y+23	; 0x17
    20e2:	98 8d       	ldd	r25, Y+24	; 0x18
    20e4:	2b ea       	ldi	r18, 0xAB	; 171
    20e6:	3a ea       	ldi	r19, 0xAA	; 170
    20e8:	4a e2       	ldi	r20, 0x2A	; 42
    20ea:	50 e4       	ldi	r21, 0x40	; 64
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	89 8b       	std	Y+17, r24	; 0x11
    20f6:	9a 8b       	std	Y+18, r25	; 0x12
    20f8:	ab 8b       	std	Y+19, r26	; 0x13
    20fa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20fc:	69 89       	ldd	r22, Y+17	; 0x11
    20fe:	7a 89       	ldd	r23, Y+18	; 0x12
    2100:	8b 89       	ldd	r24, Y+19	; 0x13
    2102:	9c 89       	ldd	r25, Y+20	; 0x14
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2110:	88 23       	and	r24, r24
    2112:	1c f4       	brge	.+6      	; 0x211a <Ultrasonic3_Trigger+0x6c>
		__ticks = 1;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	88 8b       	std	Y+16, r24	; 0x10
    2118:	91 c0       	rjmp	.+290    	; 0x223c <Ultrasonic3_Trigger+0x18e>
	else if (__tmp > 255)
    211a:	69 89       	ldd	r22, Y+17	; 0x11
    211c:	7a 89       	ldd	r23, Y+18	; 0x12
    211e:	8b 89       	ldd	r24, Y+19	; 0x13
    2120:	9c 89       	ldd	r25, Y+20	; 0x14
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	4f e7       	ldi	r20, 0x7F	; 127
    2128:	53 e4       	ldi	r21, 0x43	; 67
    212a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    212e:	18 16       	cp	r1, r24
    2130:	0c f0       	brlt	.+2      	; 0x2134 <Ultrasonic3_Trigger+0x86>
    2132:	7b c0       	rjmp	.+246    	; 0x222a <Ultrasonic3_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2134:	6d 89       	ldd	r22, Y+21	; 0x15
    2136:	7e 89       	ldd	r23, Y+22	; 0x16
    2138:	8f 89       	ldd	r24, Y+23	; 0x17
    213a:	98 8d       	ldd	r25, Y+24	; 0x18
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	4a e7       	ldi	r20, 0x7A	; 122
    2142:	54 e4       	ldi	r21, 0x44	; 68
    2144:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	8c 87       	std	Y+12, r24	; 0x0c
    214e:	9d 87       	std	Y+13, r25	; 0x0d
    2150:	ae 87       	std	Y+14, r26	; 0x0e
    2152:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2154:	6c 85       	ldd	r22, Y+12	; 0x0c
    2156:	7d 85       	ldd	r23, Y+13	; 0x0d
    2158:	8e 85       	ldd	r24, Y+14	; 0x0e
    215a:	9f 85       	ldd	r25, Y+15	; 0x0f
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	4a ef       	ldi	r20, 0xFA	; 250
    2162:	54 e4       	ldi	r21, 0x44	; 68
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	88 87       	std	Y+8, r24	; 0x08
    216e:	99 87       	std	Y+9, r25	; 0x09
    2170:	aa 87       	std	Y+10, r26	; 0x0a
    2172:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2174:	68 85       	ldd	r22, Y+8	; 0x08
    2176:	79 85       	ldd	r23, Y+9	; 0x09
    2178:	8a 85       	ldd	r24, Y+10	; 0x0a
    217a:	9b 85       	ldd	r25, Y+11	; 0x0b
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e8       	ldi	r20, 0x80	; 128
    2182:	5f e3       	ldi	r21, 0x3F	; 63
    2184:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2188:	88 23       	and	r24, r24
    218a:	2c f4       	brge	.+10     	; 0x2196 <Ultrasonic3_Trigger+0xe8>
		__ticks = 1;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9f 83       	std	Y+7, r25	; 0x07
    2192:	8e 83       	std	Y+6, r24	; 0x06
    2194:	3f c0       	rjmp	.+126    	; 0x2214 <Ultrasonic3_Trigger+0x166>
	else if (__tmp > 65535)
    2196:	68 85       	ldd	r22, Y+8	; 0x08
    2198:	79 85       	ldd	r23, Y+9	; 0x09
    219a:	8a 85       	ldd	r24, Y+10	; 0x0a
    219c:	9b 85       	ldd	r25, Y+11	; 0x0b
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	3f ef       	ldi	r19, 0xFF	; 255
    21a2:	4f e7       	ldi	r20, 0x7F	; 127
    21a4:	57 e4       	ldi	r21, 0x47	; 71
    21a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21aa:	18 16       	cp	r1, r24
    21ac:	4c f5       	brge	.+82     	; 0x2200 <Ultrasonic3_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    21b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    21b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    21b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e2       	ldi	r20, 0x20	; 32
    21bc:	51 e4       	ldi	r21, 0x41	; 65
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9f 83       	std	Y+7, r25	; 0x07
    21d4:	8e 83       	std	Y+6, r24	; 0x06
    21d6:	0f c0       	rjmp	.+30     	; 0x21f6 <Ultrasonic3_Trigger+0x148>
    21d8:	88 ec       	ldi	r24, 0xC8	; 200
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9d 83       	std	Y+5, r25	; 0x05
    21de:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21e0:	8c 81       	ldd	r24, Y+4	; 0x04
    21e2:	9d 81       	ldd	r25, Y+5	; 0x05
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <Ultrasonic3_Trigger+0x136>
    21e8:	9d 83       	std	Y+5, r25	; 0x05
    21ea:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ec:	8e 81       	ldd	r24, Y+6	; 0x06
    21ee:	9f 81       	ldd	r25, Y+7	; 0x07
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	9f 83       	std	Y+7, r25	; 0x07
    21f4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f6:	8e 81       	ldd	r24, Y+6	; 0x06
    21f8:	9f 81       	ldd	r25, Y+7	; 0x07
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	69 f7       	brne	.-38     	; 0x21d8 <Ultrasonic3_Trigger+0x12a>
    21fe:	24 c0       	rjmp	.+72     	; 0x2248 <Ultrasonic3_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2200:	68 85       	ldd	r22, Y+8	; 0x08
    2202:	79 85       	ldd	r23, Y+9	; 0x09
    2204:	8a 85       	ldd	r24, Y+10	; 0x0a
    2206:	9b 85       	ldd	r25, Y+11	; 0x0b
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9f 83       	std	Y+7, r25	; 0x07
    2212:	8e 83       	std	Y+6, r24	; 0x06
    2214:	8e 81       	ldd	r24, Y+6	; 0x06
    2216:	9f 81       	ldd	r25, Y+7	; 0x07
    2218:	9b 83       	std	Y+3, r25	; 0x03
    221a:	8a 83       	std	Y+2, r24	; 0x02
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	9b 81       	ldd	r25, Y+3	; 0x03
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <Ultrasonic3_Trigger+0x172>
    2224:	9b 83       	std	Y+3, r25	; 0x03
    2226:	8a 83       	std	Y+2, r24	; 0x02
    2228:	0f c0       	rjmp	.+30     	; 0x2248 <Ultrasonic3_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    222a:	69 89       	ldd	r22, Y+17	; 0x11
    222c:	7a 89       	ldd	r23, Y+18	; 0x12
    222e:	8b 89       	ldd	r24, Y+19	; 0x13
    2230:	9c 89       	ldd	r25, Y+20	; 0x14
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	88 8b       	std	Y+16, r24	; 0x10
    223c:	88 89       	ldd	r24, Y+16	; 0x10
    223e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	8a 95       	dec	r24
    2244:	f1 f7       	brne	.-4      	; 0x2242 <Ultrasonic3_Trigger+0x194>
    2246:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(TRIG3_PORT_ID, TRIG3_PIN_ID,DIO_u8LOW);
    2248:	82 e0       	ldi	r24, 0x02	; 2
    224a:	66 e0       	ldi	r22, 0x06	; 6
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
}
    2252:	68 96       	adiw	r28, 0x18	; 24
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <Ultrasonic_readDistance>:

 u16 Ultrasonic_readDistance(void)
 {
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	2e 97       	sbiw	r28, 0x0e	; 14
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61

	 Ultrasonic_Trigger();
    2278:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Ultrasonic_Trigger>
= 0.017 x (TIMER value) cm
= (TIMER value) / 58.8 cm
Note TIMER VALUE is the pulse width time calculated by the ICU
*/

	 distance=(float)((g_timeHigh/57.5));
    227c:	80 91 7d 01 	lds	r24, 0x017D
    2280:	90 91 7e 01 	lds	r25, 0x017E
    2284:	cc 01       	movw	r24, r24
    2286:	a0 e0       	ldi	r26, 0x00	; 0
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	46 e6       	ldi	r20, 0x66	; 102
    22a0:	52 e4       	ldi	r21, 0x42	; 66
    22a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	80 93 6e 01 	sts	0x016E, r24
    22ae:	90 93 6f 01 	sts	0x016F, r25
    22b2:	a0 93 70 01 	sts	0x0170, r26
    22b6:	b0 93 71 01 	sts	0x0171, r27
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a8 e4       	ldi	r26, 0x48	; 72
    22c0:	b2 e4       	ldi	r27, 0x42	; 66
    22c2:	8b 87       	std	Y+11, r24	; 0x0b
    22c4:	9c 87       	std	Y+12, r25	; 0x0c
    22c6:	ad 87       	std	Y+13, r26	; 0x0d
    22c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    22cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	4a ef       	ldi	r20, 0xFA	; 250
    22d8:	54 e4       	ldi	r21, 0x44	; 68
    22da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	8f 83       	std	Y+7, r24	; 0x07
    22e4:	98 87       	std	Y+8, r25	; 0x08
    22e6:	a9 87       	std	Y+9, r26	; 0x09
    22e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ea:	6f 81       	ldd	r22, Y+7	; 0x07
    22ec:	78 85       	ldd	r23, Y+8	; 0x08
    22ee:	89 85       	ldd	r24, Y+9	; 0x09
    22f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	2c f4       	brge	.+10     	; 0x230c <Ultrasonic_readDistance+0xa8>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9e 83       	std	Y+6, r25	; 0x06
    2308:	8d 83       	std	Y+5, r24	; 0x05
    230a:	3f c0       	rjmp	.+126    	; 0x238a <Ultrasonic_readDistance+0x126>
	else if (__tmp > 65535)
    230c:	6f 81       	ldd	r22, Y+7	; 0x07
    230e:	78 85       	ldd	r23, Y+8	; 0x08
    2310:	89 85       	ldd	r24, Y+9	; 0x09
    2312:	9a 85       	ldd	r25, Y+10	; 0x0a
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2320:	18 16       	cp	r1, r24
    2322:	4c f5       	brge	.+82     	; 0x2376 <Ultrasonic_readDistance+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2324:	6b 85       	ldd	r22, Y+11	; 0x0b
    2326:	7c 85       	ldd	r23, Y+12	; 0x0c
    2328:	8d 85       	ldd	r24, Y+13	; 0x0d
    232a:	9e 85       	ldd	r25, Y+14	; 0x0e
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9e 83       	std	Y+6, r25	; 0x06
    234a:	8d 83       	std	Y+5, r24	; 0x05
    234c:	0f c0       	rjmp	.+30     	; 0x236c <Ultrasonic_readDistance+0x108>
    234e:	88 ec       	ldi	r24, 0xC8	; 200
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9c 83       	std	Y+4, r25	; 0x04
    2354:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	9c 81       	ldd	r25, Y+4	; 0x04
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <Ultrasonic_readDistance+0xf6>
    235e:	9c 83       	std	Y+4, r25	; 0x04
    2360:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	9e 81       	ldd	r25, Y+6	; 0x06
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9e 83       	std	Y+6, r25	; 0x06
    236a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	9e 81       	ldd	r25, Y+6	; 0x06
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	69 f7       	brne	.-38     	; 0x234e <Ultrasonic_readDistance+0xea>
    2374:	14 c0       	rjmp	.+40     	; 0x239e <Ultrasonic_readDistance+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
    238a:	8d 81       	ldd	r24, Y+5	; 0x05
    238c:	9e 81       	ldd	r25, Y+6	; 0x06
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <Ultrasonic_readDistance+0x132>
    239a:	9a 83       	std	Y+2, r25	; 0x02
    239c:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(50);
	 Icu_DeInit();
    239e:	0e 94 84 0c 	call	0x1908	; 0x1908 <Icu_DeInit>
	 return distance;
    23a2:	80 91 6e 01 	lds	r24, 0x016E
    23a6:	90 91 6f 01 	lds	r25, 0x016F
    23aa:	a0 91 70 01 	lds	r26, 0x0170
    23ae:	b0 91 71 01 	lds	r27, 0x0171
    23b2:	bc 01       	movw	r22, r24
    23b4:	cd 01       	movw	r24, r26
    23b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22

 }
    23be:	2e 96       	adiw	r28, 0x0e	; 14
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	f8 94       	cli
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <Ultrasonic2_readDistance>:

 u16 Ultrasonic2_readDistance(void)
  {
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	2e 97       	sbiw	r28, 0x0e	; 14
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61

 	 Ultrasonic2_Trigger();
    23e4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <Ultrasonic2_Trigger>
 = 0.017 x (TIMER value) cm
 = (TIMER value) / 58.8 cm
 Note TIMER VALUE is the pulse width time calculated by the ICU
 */

 	 distance2=(float)((g_timeHigh2/57.5));
    23e8:	80 91 7f 01 	lds	r24, 0x017F
    23ec:	90 91 80 01 	lds	r25, 0x0180
    23f0:	cc 01       	movw	r24, r24
    23f2:	a0 e0       	ldi	r26, 0x00	; 0
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	bc 01       	movw	r22, r24
    23f8:	cd 01       	movw	r24, r26
    23fa:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	bc 01       	movw	r22, r24
    2404:	cd 01       	movw	r24, r26
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	46 e6       	ldi	r20, 0x66	; 102
    240c:	52 e4       	ldi	r21, 0x42	; 66
    240e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	80 93 72 01 	sts	0x0172, r24
    241a:	90 93 73 01 	sts	0x0173, r25
    241e:	a0 93 74 01 	sts	0x0174, r26
    2422:	b0 93 75 01 	sts	0x0175, r27
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a8 e4       	ldi	r26, 0x48	; 72
    242c:	b2 e4       	ldi	r27, 0x42	; 66
    242e:	8b 87       	std	Y+11, r24	; 0x0b
    2430:	9c 87       	std	Y+12, r25	; 0x0c
    2432:	ad 87       	std	Y+13, r26	; 0x0d
    2434:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2436:	6b 85       	ldd	r22, Y+11	; 0x0b
    2438:	7c 85       	ldd	r23, Y+12	; 0x0c
    243a:	8d 85       	ldd	r24, Y+13	; 0x0d
    243c:	9e 85       	ldd	r25, Y+14	; 0x0e
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	4a ef       	ldi	r20, 0xFA	; 250
    2444:	54 e4       	ldi	r21, 0x44	; 68
    2446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	8f 83       	std	Y+7, r24	; 0x07
    2450:	98 87       	std	Y+8, r25	; 0x08
    2452:	a9 87       	std	Y+9, r26	; 0x09
    2454:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2456:	6f 81       	ldd	r22, Y+7	; 0x07
    2458:	78 85       	ldd	r23, Y+8	; 0x08
    245a:	89 85       	ldd	r24, Y+9	; 0x09
    245c:	9a 85       	ldd	r25, Y+10	; 0x0a
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e8       	ldi	r20, 0x80	; 128
    2464:	5f e3       	ldi	r21, 0x3F	; 63
    2466:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    246a:	88 23       	and	r24, r24
    246c:	2c f4       	brge	.+10     	; 0x2478 <Ultrasonic2_readDistance+0xa8>
		__ticks = 1;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	9e 83       	std	Y+6, r25	; 0x06
    2474:	8d 83       	std	Y+5, r24	; 0x05
    2476:	3f c0       	rjmp	.+126    	; 0x24f6 <Ultrasonic2_readDistance+0x126>
	else if (__tmp > 65535)
    2478:	6f 81       	ldd	r22, Y+7	; 0x07
    247a:	78 85       	ldd	r23, Y+8	; 0x08
    247c:	89 85       	ldd	r24, Y+9	; 0x09
    247e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	3f ef       	ldi	r19, 0xFF	; 255
    2484:	4f e7       	ldi	r20, 0x7F	; 127
    2486:	57 e4       	ldi	r21, 0x47	; 71
    2488:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    248c:	18 16       	cp	r1, r24
    248e:	4c f5       	brge	.+82     	; 0x24e2 <Ultrasonic2_readDistance+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2490:	6b 85       	ldd	r22, Y+11	; 0x0b
    2492:	7c 85       	ldd	r23, Y+12	; 0x0c
    2494:	8d 85       	ldd	r24, Y+13	; 0x0d
    2496:	9e 85       	ldd	r25, Y+14	; 0x0e
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e2       	ldi	r20, 0x20	; 32
    249e:	51 e4       	ldi	r21, 0x41	; 65
    24a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	bc 01       	movw	r22, r24
    24aa:	cd 01       	movw	r24, r26
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9e 83       	std	Y+6, r25	; 0x06
    24b6:	8d 83       	std	Y+5, r24	; 0x05
    24b8:	0f c0       	rjmp	.+30     	; 0x24d8 <Ultrasonic2_readDistance+0x108>
    24ba:	88 ec       	ldi	r24, 0xC8	; 200
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	9c 83       	std	Y+4, r25	; 0x04
    24c0:	8b 83       	std	Y+3, r24	; 0x03
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	9c 81       	ldd	r25, Y+4	; 0x04
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <Ultrasonic2_readDistance+0xf6>
    24ca:	9c 83       	std	Y+4, r25	; 0x04
    24cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ce:	8d 81       	ldd	r24, Y+5	; 0x05
    24d0:	9e 81       	ldd	r25, Y+6	; 0x06
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	9e 83       	std	Y+6, r25	; 0x06
    24d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	69 f7       	brne	.-38     	; 0x24ba <Ultrasonic2_readDistance+0xea>
    24e0:	14 c0       	rjmp	.+40     	; 0x250a <Ultrasonic2_readDistance+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e2:	6f 81       	ldd	r22, Y+7	; 0x07
    24e4:	78 85       	ldd	r23, Y+8	; 0x08
    24e6:	89 85       	ldd	r24, Y+9	; 0x09
    24e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	9e 83       	std	Y+6, r25	; 0x06
    24f4:	8d 83       	std	Y+5, r24	; 0x05
    24f6:	8d 81       	ldd	r24, Y+5	; 0x05
    24f8:	9e 81       	ldd	r25, Y+6	; 0x06
    24fa:	9a 83       	std	Y+2, r25	; 0x02
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	9a 81       	ldd	r25, Y+2	; 0x02
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <Ultrasonic2_readDistance+0x132>
    2506:	9a 83       	std	Y+2, r25	; 0x02
    2508:	89 83       	std	Y+1, r24	; 0x01
 	 _delay_ms(50);
 	Icu_DeInit();
    250a:	0e 94 84 0c 	call	0x1908	; 0x1908 <Icu_DeInit>
 	 return distance2;
    250e:	80 91 72 01 	lds	r24, 0x0172
    2512:	90 91 73 01 	lds	r25, 0x0173
    2516:	a0 91 74 01 	lds	r26, 0x0174
    251a:	b0 91 75 01 	lds	r27, 0x0175
    251e:	bc 01       	movw	r22, r24
    2520:	cd 01       	movw	r24, r26
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22

  }
    252a:	2e 96       	adiw	r28, 0x0e	; 14
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <Ultrasonic3_readDistance>:


 u16 Ultrasonic3_readDistance(void)
  {
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	2e 97       	sbiw	r28, 0x0e	; 14
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61

 	 Ultrasonic3_Trigger();
    2550:	0e 94 57 10 	call	0x20ae	; 0x20ae <Ultrasonic3_Trigger>
 = 0.017 x (TIMER value) cm
 = (TIMER value) / 58.8 cm
 Note TIMER VALUE is the pulse width time calculated by the ICU
 */

 	 distance3=(float)((g_timeHigh3/57.5));
    2554:	80 91 81 01 	lds	r24, 0x0181
    2558:	90 91 82 01 	lds	r25, 0x0182
    255c:	cc 01       	movw	r24, r24
    255e:	a0 e0       	ldi	r26, 0x00	; 0
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	bc 01       	movw	r22, r24
    2564:	cd 01       	movw	r24, r26
    2566:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	bc 01       	movw	r22, r24
    2570:	cd 01       	movw	r24, r26
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	46 e6       	ldi	r20, 0x66	; 102
    2578:	52 e4       	ldi	r21, 0x42	; 66
    257a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	80 93 76 01 	sts	0x0176, r24
    2586:	90 93 77 01 	sts	0x0177, r25
    258a:	a0 93 78 01 	sts	0x0178, r26
    258e:	b0 93 79 01 	sts	0x0179, r27
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a8 e4       	ldi	r26, 0x48	; 72
    2598:	b2 e4       	ldi	r27, 0x42	; 66
    259a:	8b 87       	std	Y+11, r24	; 0x0b
    259c:	9c 87       	std	Y+12, r25	; 0x0c
    259e:	ad 87       	std	Y+13, r26	; 0x0d
    25a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	4a ef       	ldi	r20, 0xFA	; 250
    25b0:	54 e4       	ldi	r21, 0x44	; 68
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	8f 83       	std	Y+7, r24	; 0x07
    25bc:	98 87       	std	Y+8, r25	; 0x08
    25be:	a9 87       	std	Y+9, r26	; 0x09
    25c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25c2:	6f 81       	ldd	r22, Y+7	; 0x07
    25c4:	78 85       	ldd	r23, Y+8	; 0x08
    25c6:	89 85       	ldd	r24, Y+9	; 0x09
    25c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	2c f4       	brge	.+10     	; 0x25e4 <Ultrasonic3_readDistance+0xa8>
		__ticks = 1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
    25e2:	3f c0       	rjmp	.+126    	; 0x2662 <Ultrasonic3_readDistance+0x126>
	else if (__tmp > 65535)
    25e4:	6f 81       	ldd	r22, Y+7	; 0x07
    25e6:	78 85       	ldd	r23, Y+8	; 0x08
    25e8:	89 85       	ldd	r24, Y+9	; 0x09
    25ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	3f ef       	ldi	r19, 0xFF	; 255
    25f0:	4f e7       	ldi	r20, 0x7F	; 127
    25f2:	57 e4       	ldi	r21, 0x47	; 71
    25f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25f8:	18 16       	cp	r1, r24
    25fa:	4c f5       	brge	.+82     	; 0x264e <Ultrasonic3_readDistance+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2600:	8d 85       	ldd	r24, Y+13	; 0x0d
    2602:	9e 85       	ldd	r25, Y+14	; 0x0e
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e2       	ldi	r20, 0x20	; 32
    260a:	51 e4       	ldi	r21, 0x41	; 65
    260c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9e 83       	std	Y+6, r25	; 0x06
    2622:	8d 83       	std	Y+5, r24	; 0x05
    2624:	0f c0       	rjmp	.+30     	; 0x2644 <Ultrasonic3_readDistance+0x108>
    2626:	88 ec       	ldi	r24, 0xC8	; 200
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9c 83       	std	Y+4, r25	; 0x04
    262c:	8b 83       	std	Y+3, r24	; 0x03
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	9c 81       	ldd	r25, Y+4	; 0x04
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <Ultrasonic3_readDistance+0xf6>
    2636:	9c 83       	std	Y+4, r25	; 0x04
    2638:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	9e 81       	ldd	r25, Y+6	; 0x06
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2644:	8d 81       	ldd	r24, Y+5	; 0x05
    2646:	9e 81       	ldd	r25, Y+6	; 0x06
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	69 f7       	brne	.-38     	; 0x2626 <Ultrasonic3_readDistance+0xea>
    264c:	14 c0       	rjmp	.+40     	; 0x2676 <Ultrasonic3_readDistance+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264e:	6f 81       	ldd	r22, Y+7	; 0x07
    2650:	78 85       	ldd	r23, Y+8	; 0x08
    2652:	89 85       	ldd	r24, Y+9	; 0x09
    2654:	9a 85       	ldd	r25, Y+10	; 0x0a
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	8d 81       	ldd	r24, Y+5	; 0x05
    2664:	9e 81       	ldd	r25, Y+6	; 0x06
    2666:	9a 83       	std	Y+2, r25	; 0x02
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	9a 81       	ldd	r25, Y+2	; 0x02
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <Ultrasonic3_readDistance+0x132>
    2672:	9a 83       	std	Y+2, r25	; 0x02
    2674:	89 83       	std	Y+1, r24	; 0x01
 	 _delay_ms(50);
 	Icu_DeInit();
    2676:	0e 94 84 0c 	call	0x1908	; 0x1908 <Icu_DeInit>
 	 return distance3;
    267a:	80 91 76 01 	lds	r24, 0x0176
    267e:	90 91 77 01 	lds	r25, 0x0177
    2682:	a0 91 78 01 	lds	r26, 0x0178
    2686:	b0 91 79 01 	lds	r27, 0x0179
    268a:	bc 01       	movw	r22, r24
    268c:	cd 01       	movw	r24, r26
    268e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22

  }
    2696:	2e 96       	adiw	r28, 0x0e	; 14
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <main>:
void Parallel_Parking(void);
void ExitParallel(void);

/***	our main function and start of calling	***/
int main()
{
    26a8:	ef 92       	push	r14
    26aa:	ff 92       	push	r15
    26ac:	0f 93       	push	r16
    26ae:	1f 93       	push	r17
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
	/***	initialisation of uart communication master to master	***/
	UART_voidInit();
    26b8:	0e 94 1f 0b 	call	0x163e	; 0x163e <UART_voidInit>
	UART_voidReceiverEnable();
    26bc:	0e 94 89 0b 	call	0x1712	; 0x1712 <UART_voidReceiverEnable>
	UART_voidTransmitterEnable();
    26c0:	0e 94 a5 0b 	call	0x174a	; 0x174a <UART_voidTransmitterEnable>
	//D0 set it input to recieve data (Rx)
	DIO_voidSetPinDirection(DIO_u8PORTD,0,DIO_u8INPUT);
    26c4:	84 e0       	ldi	r24, 0x04	; 4
    26c6:	60 e0       	ldi	r22, 0x00	; 0
    26c8:	40 e0       	ldi	r20, 0x00	; 0
    26ca:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	//D1 set it output to send data (Tx)
	DIO_voidSetPinDirection(DIO_u8PORTD,1,DIO_u8OUTPUT);
    26ce:	84 e0       	ldi	r24, 0x04	; 4
    26d0:	61 e0       	ldi	r22, 0x01	; 1
    26d2:	41 e0       	ldi	r20, 0x01	; 1
    26d4:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>

	/*DEFINE PORT && PINS FOR EACH MOTOR (PORT A &PINS (0,1,4,5) && define PWM2 pin7) */
	DC_MOTORS_Init();
    26d8:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <DC_MOTORS_Init>

	/*INITALIZE THE PIN OF GLOBAL INTERRUPT ENABLE  */
	GIE_voidEnable();
    26dc:	0e 94 18 0a 	call	0x1430	; 0x1430 <GIE_voidEnable>

	/*DEFINE PORT && PIN FOR TWO BUTTON (PORT A,PIN 2,3,6)*/
	DIO_voidSetPinDirection(DIO_u8PORTA,DIO_PIN2_ID, DIO_u8INPUT);
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	62 e0       	ldi	r22, 0x02	; 2
    26e4:	40 e0       	ldi	r20, 0x00	; 0
    26e6:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTA,DIO_PIN3_ID, DIO_u8INPUT);
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	63 e0       	ldi	r22, 0x03	; 3
    26ee:	40 e0       	ldi	r20, 0x00	; 0
    26f0:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTA,DIO_PIN6_ID, DIO_u8INPUT);
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	66 e0       	ldi	r22, 0x06	; 6
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>

	/*DEFINE  (MODE,PRESCALER) IN REGIESTER TCCR2*/
	PWM2_voidInit();
    26fe:	0e 94 91 0a 	call	0x1522	; 0x1522 <PWM2_voidInit>

	//time that will take to detect length of the car only
	time_of_lengh_of_car=(lenght*10/REAL_SPEED_OF_MOTOR);
    2702:	80 91 6a 01 	lds	r24, 0x016A
    2706:	90 91 6b 01 	lds	r25, 0x016B
    270a:	9c 01       	movw	r18, r24
    270c:	22 0f       	add	r18, r18
    270e:	33 1f       	adc	r19, r19
    2710:	c9 01       	movw	r24, r18
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	88 0f       	add	r24, r24
    2718:	99 1f       	adc	r25, r25
    271a:	82 0f       	add	r24, r18
    271c:	93 1f       	adc	r25, r19
    271e:	28 e2       	ldi	r18, 0x28	; 40
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	b9 01       	movw	r22, r18
    2724:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__udivmodhi4>
    2728:	cb 01       	movw	r24, r22
    272a:	90 93 97 01 	sts	0x0197, r25
    272e:	80 93 96 01 	sts	0x0196, r24

	//calculate distance i want to park and print it
	DistanceForParking =(lenght +(lenght/4));
    2732:	80 91 6a 01 	lds	r24, 0x016A
    2736:	90 91 6b 01 	lds	r25, 0x016B
    273a:	9c 01       	movw	r18, r24
    273c:	36 95       	lsr	r19
    273e:	27 95       	ror	r18
    2740:	36 95       	lsr	r19
    2742:	27 95       	ror	r18
    2744:	80 91 6a 01 	lds	r24, 0x016A
    2748:	90 91 6b 01 	lds	r25, 0x016B
    274c:	82 0f       	add	r24, r18
    274e:	93 1f       	adc	r25, r19
    2750:	90 93 b2 01 	sts	0x01B2, r25
    2754:	80 93 b1 01 	sts	0x01B1, r24

	//calculate time that i will take for detecting the distance that i will park on it
	TimeForParking=((DistanceForParking*10/REAL_SPEED_OF_MOTOR))*10;
    2758:	80 91 b1 01 	lds	r24, 0x01B1
    275c:	90 91 b2 01 	lds	r25, 0x01B2
    2760:	9c 01       	movw	r18, r24
    2762:	22 0f       	add	r18, r18
    2764:	33 1f       	adc	r19, r19
    2766:	c9 01       	movw	r24, r18
    2768:	88 0f       	add	r24, r24
    276a:	99 1f       	adc	r25, r25
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	82 0f       	add	r24, r18
    2772:	93 1f       	adc	r25, r19
    2774:	28 e2       	ldi	r18, 0x28	; 40
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	b9 01       	movw	r22, r18
    277a:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__udivmodhi4>
    277e:	cb 01       	movw	r24, r22
    2780:	9c 01       	movw	r18, r24
    2782:	22 0f       	add	r18, r18
    2784:	33 1f       	adc	r19, r19
    2786:	c9 01       	movw	r24, r18
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	82 0f       	add	r24, r18
    2792:	93 1f       	adc	r25, r19
    2794:	90 93 8b 01 	sts	0x018B, r25
    2798:	80 93 8a 01 	sts	0x018A, r24

	//5 is the number for checking of sensor in operation
	TimeToCheckParking=TimeForParking/5;
    279c:	80 91 8a 01 	lds	r24, 0x018A
    27a0:	90 91 8b 01 	lds	r25, 0x018B
    27a4:	25 e0       	ldi	r18, 0x05	; 5
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	b9 01       	movw	r22, r18
    27aa:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__udivmodhi4>
    27ae:	cb 01       	movw	r24, r22
    27b0:	90 93 9f 01 	sts	0x019F, r25
    27b4:	80 93 9e 01 	sts	0x019E, r24

	//equation to calculate distance between sensor and sidewalk
	Distance_Away =Width +(Width/3);
    27b8:	80 91 68 01 	lds	r24, 0x0168
    27bc:	90 91 69 01 	lds	r25, 0x0169
    27c0:	23 e0       	ldi	r18, 0x03	; 3
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	b9 01       	movw	r22, r18
    27c6:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__udivmodhi4>
    27ca:	cb 01       	movw	r24, r22
    27cc:	9c 01       	movw	r18, r24
    27ce:	80 91 68 01 	lds	r24, 0x0168
    27d2:	90 91 69 01 	lds	r25, 0x0169
    27d6:	82 0f       	add	r24, r18
    27d8:	93 1f       	adc	r25, r19
    27da:	90 93 91 01 	sts	0x0191, r25
    27de:	80 93 90 01 	sts	0x0190, r24

	//calculate time that i will take while moving back to park
	timedMoveBack =((TimeForParking-time_of_lengh_of_car)*100/2);
    27e2:	20 91 8a 01 	lds	r18, 0x018A
    27e6:	30 91 8b 01 	lds	r19, 0x018B
    27ea:	80 91 96 01 	lds	r24, 0x0196
    27ee:	90 91 97 01 	lds	r25, 0x0197
    27f2:	28 1b       	sub	r18, r24
    27f4:	39 0b       	sbc	r19, r25
    27f6:	84 e6       	ldi	r24, 0x64	; 100
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	ac 01       	movw	r20, r24
    27fc:	24 9f       	mul	r18, r20
    27fe:	c0 01       	movw	r24, r0
    2800:	25 9f       	mul	r18, r21
    2802:	90 0d       	add	r25, r0
    2804:	34 9f       	mul	r19, r20
    2806:	90 0d       	add	r25, r0
    2808:	11 24       	eor	r1, r1
    280a:	96 95       	lsr	r25
    280c:	87 95       	ror	r24
    280e:	90 93 b8 01 	sts	0x01B8, r25
    2812:	80 93 b7 01 	sts	0x01B7, r24

	/***	our equation of parking and exit of parking	***/
	time_of_extra_space_for_parking_after_check=((f32)((lenght*300)/4)/REAL_SPEED_OF_MOTOR);//750
    2816:	20 91 6a 01 	lds	r18, 0x016A
    281a:	30 91 6b 01 	lds	r19, 0x016B
    281e:	8c e2       	ldi	r24, 0x2C	; 44
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	ac 01       	movw	r20, r24
    2824:	24 9f       	mul	r18, r20
    2826:	c0 01       	movw	r24, r0
    2828:	25 9f       	mul	r18, r21
    282a:	90 0d       	add	r25, r0
    282c:	34 9f       	mul	r19, r20
    282e:	90 0d       	add	r25, r0
    2830:	11 24       	eor	r1, r1
    2832:	96 95       	lsr	r25
    2834:	87 95       	ror	r24
    2836:	96 95       	lsr	r25
    2838:	87 95       	ror	r24
    283a:	cc 01       	movw	r24, r24
    283c:	a0 e0       	ldi	r26, 0x00	; 0
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	bc 01       	movw	r22, r24
    2842:	cd 01       	movw	r24, r26
    2844:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	bc 01       	movw	r22, r24
    284e:	cd 01       	movw	r24, r26
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e2       	ldi	r20, 0x20	; 32
    2856:	52 e4       	ldi	r21, 0x42	; 66
    2858:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	80 93 a0 01 	sts	0x01A0, r24
    2864:	90 93 a1 01 	sts	0x01A1, r25
    2868:	a0 93 a2 01 	sts	0x01A2, r26
    286c:	b0 93 a3 01 	sts	0x01A3, r27
	time_of_first_move_of_parallel_parking=((f32)((lenght+((f32)2*lenght/5))*100)/REAL_SPEED_OF_MOTOR);//1400
    2870:	80 91 6a 01 	lds	r24, 0x016A
    2874:	90 91 6b 01 	lds	r25, 0x016B
    2878:	cc 01       	movw	r24, r24
    287a:	a0 e0       	ldi	r26, 0x00	; 0
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2886:	7b 01       	movw	r14, r22
    2888:	8c 01       	movw	r16, r24
    288a:	80 91 6a 01 	lds	r24, 0x016A
    288e:	90 91 6b 01 	lds	r25, 0x016B
    2892:	cc 01       	movw	r24, r24
    2894:	a0 e0       	ldi	r26, 0x00	; 0
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    28a0:	9b 01       	movw	r18, r22
    28a2:	ac 01       	movw	r20, r24
    28a4:	ca 01       	movw	r24, r20
    28a6:	b9 01       	movw	r22, r18
    28a8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	bc 01       	movw	r22, r24
    28b2:	cd 01       	movw	r24, r26
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 ea       	ldi	r20, 0xA0	; 160
    28ba:	50 e4       	ldi	r21, 0x40	; 64
    28bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9c 01       	movw	r18, r24
    28c6:	ad 01       	movw	r20, r26
    28c8:	c8 01       	movw	r24, r16
    28ca:	b7 01       	movw	r22, r14
    28cc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	48 ec       	ldi	r20, 0xC8	; 200
    28de:	52 e4       	ldi	r21, 0x42	; 66
    28e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	bc 01       	movw	r22, r24
    28ea:	cd 01       	movw	r24, r26
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e2       	ldi	r20, 0x20	; 32
    28f2:	52 e4       	ldi	r21, 0x42	; 66
    28f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	80 93 8c 01 	sts	0x018C, r24
    2900:	90 93 8d 01 	sts	0x018D, r25
    2904:	a0 93 8e 01 	sts	0x018E, r26
    2908:	b0 93 8f 01 	sts	0x018F, r27
	time_of_second_move_of_parallel_parking=((f32)((lenght+(lenght/10))*100)/REAL_SPEED_OF_MOTOR);//1100
    290c:	80 91 6a 01 	lds	r24, 0x016A
    2910:	90 91 6b 01 	lds	r25, 0x016B
    2914:	2a e0       	ldi	r18, 0x0A	; 10
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	b9 01       	movw	r22, r18
    291a:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__udivmodhi4>
    291e:	cb 01       	movw	r24, r22
    2920:	9c 01       	movw	r18, r24
    2922:	80 91 6a 01 	lds	r24, 0x016A
    2926:	90 91 6b 01 	lds	r25, 0x016B
    292a:	28 0f       	add	r18, r24
    292c:	39 1f       	adc	r19, r25
    292e:	84 e6       	ldi	r24, 0x64	; 100
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	ac 01       	movw	r20, r24
    2934:	24 9f       	mul	r18, r20
    2936:	c0 01       	movw	r24, r0
    2938:	25 9f       	mul	r18, r21
    293a:	90 0d       	add	r25, r0
    293c:	34 9f       	mul	r19, r20
    293e:	90 0d       	add	r25, r0
    2940:	11 24       	eor	r1, r1
    2942:	cc 01       	movw	r24, r24
    2944:	a0 e0       	ldi	r26, 0x00	; 0
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	bc 01       	movw	r22, r24
    2956:	cd 01       	movw	r24, r26
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e2       	ldi	r20, 0x20	; 32
    295e:	52 e4       	ldi	r21, 0x42	; 66
    2960:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	80 93 a8 01 	sts	0x01A8, r24
    296c:	90 93 a9 01 	sts	0x01A9, r25
    2970:	a0 93 aa 01 	sts	0x01AA, r26
    2974:	b0 93 ab 01 	sts	0x01AB, r27
	time_of_third_move_of_parallel_parking=((f32)((2*lenght+(2*lenght/10))*100)/REAL_SPEED_OF_MOTOR);//2200
    2978:	80 91 6a 01 	lds	r24, 0x016A
    297c:	90 91 6b 01 	lds	r25, 0x016B
    2980:	fc 01       	movw	r30, r24
    2982:	ee 0f       	add	r30, r30
    2984:	ff 1f       	adc	r31, r31
    2986:	80 91 6a 01 	lds	r24, 0x016A
    298a:	90 91 6b 01 	lds	r25, 0x016B
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	2a e0       	ldi	r18, 0x0A	; 10
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	b9 01       	movw	r22, r18
    2998:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__udivmodhi4>
    299c:	cb 01       	movw	r24, r22
    299e:	9f 01       	movw	r18, r30
    29a0:	28 0f       	add	r18, r24
    29a2:	39 1f       	adc	r19, r25
    29a4:	84 e6       	ldi	r24, 0x64	; 100
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	ac 01       	movw	r20, r24
    29aa:	24 9f       	mul	r18, r20
    29ac:	c0 01       	movw	r24, r0
    29ae:	25 9f       	mul	r18, r21
    29b0:	90 0d       	add	r25, r0
    29b2:	34 9f       	mul	r19, r20
    29b4:	90 0d       	add	r25, r0
    29b6:	11 24       	eor	r1, r1
    29b8:	cc 01       	movw	r24, r24
    29ba:	a0 e0       	ldi	r26, 0x00	; 0
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	bc 01       	movw	r22, r24
    29c0:	cd 01       	movw	r24, r26
    29c2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	bc 01       	movw	r22, r24
    29cc:	cd 01       	movw	r24, r26
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e2       	ldi	r20, 0x20	; 32
    29d4:	52 e4       	ldi	r21, 0x42	; 66
    29d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	80 93 a4 01 	sts	0x01A4, r24
    29e2:	90 93 a5 01 	sts	0x01A5, r25
    29e6:	a0 93 a6 01 	sts	0x01A6, r26
    29ea:	b0 93 a7 01 	sts	0x01A7, r27
	time_of_fourth_move_of_parallel_parking=((f32)(lenght*50)/REAL_SPEED_OF_MOTOR);//500
    29ee:	20 91 6a 01 	lds	r18, 0x016A
    29f2:	30 91 6b 01 	lds	r19, 0x016B
    29f6:	82 e3       	ldi	r24, 0x32	; 50
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	ac 01       	movw	r20, r24
    29fc:	24 9f       	mul	r18, r20
    29fe:	c0 01       	movw	r24, r0
    2a00:	25 9f       	mul	r18, r21
    2a02:	90 0d       	add	r25, r0
    2a04:	34 9f       	mul	r19, r20
    2a06:	90 0d       	add	r25, r0
    2a08:	11 24       	eor	r1, r1
    2a0a:	cc 01       	movw	r24, r24
    2a0c:	a0 e0       	ldi	r26, 0x00	; 0
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	bc 01       	movw	r22, r24
    2a12:	cd 01       	movw	r24, r26
    2a14:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e2       	ldi	r20, 0x20	; 32
    2a26:	52 e4       	ldi	r21, 0x42	; 66
    2a28:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	80 93 86 01 	sts	0x0186, r24
    2a34:	90 93 87 01 	sts	0x0187, r25
    2a38:	a0 93 88 01 	sts	0x0188, r26
    2a3c:	b0 93 89 01 	sts	0x0189, r27
	time_of_first_move_of_parallel_exit=((f32)((lenght+((f32)2*lenght/4.44444444444444))*100)/REAL_SPEED_OF_MOTOR);//1450
    2a40:	80 91 6a 01 	lds	r24, 0x016A
    2a44:	90 91 6b 01 	lds	r25, 0x016B
    2a48:	cc 01       	movw	r24, r24
    2a4a:	a0 e0       	ldi	r26, 0x00	; 0
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a56:	7b 01       	movw	r14, r22
    2a58:	8c 01       	movw	r16, r24
    2a5a:	80 91 6a 01 	lds	r24, 0x016A
    2a5e:	90 91 6b 01 	lds	r25, 0x016B
    2a62:	cc 01       	movw	r24, r24
    2a64:	a0 e0       	ldi	r26, 0x00	; 0
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a70:	9b 01       	movw	r18, r22
    2a72:	ac 01       	movw	r20, r24
    2a74:	ca 01       	movw	r24, r20
    2a76:	b9 01       	movw	r22, r18
    2a78:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	bc 01       	movw	r22, r24
    2a82:	cd 01       	movw	r24, r26
    2a84:	24 ee       	ldi	r18, 0xE4	; 228
    2a86:	38 e3       	ldi	r19, 0x38	; 56
    2a88:	4e e8       	ldi	r20, 0x8E	; 142
    2a8a:	50 e4       	ldi	r21, 0x40	; 64
    2a8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	9c 01       	movw	r18, r24
    2a96:	ad 01       	movw	r20, r26
    2a98:	c8 01       	movw	r24, r16
    2a9a:	b7 01       	movw	r22, r14
    2a9c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	bc 01       	movw	r22, r24
    2aa6:	cd 01       	movw	r24, r26
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	48 ec       	ldi	r20, 0xC8	; 200
    2aae:	52 e4       	ldi	r21, 0x42	; 66
    2ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	bc 01       	movw	r22, r24
    2aba:	cd 01       	movw	r24, r26
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	52 e4       	ldi	r21, 0x42	; 66
    2ac4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	80 93 bb 01 	sts	0x01BB, r24
    2ad0:	90 93 bc 01 	sts	0x01BC, r25
    2ad4:	a0 93 bd 01 	sts	0x01BD, r26
    2ad8:	b0 93 be 01 	sts	0x01BE, r27
	time_of_second_move_of_parallel_exit=((f32)((lenght+((f32)lenght/5))*100)/REAL_SPEED_OF_MOTOR);//1200
    2adc:	80 91 6a 01 	lds	r24, 0x016A
    2ae0:	90 91 6b 01 	lds	r25, 0x016B
    2ae4:	cc 01       	movw	r24, r24
    2ae6:	a0 e0       	ldi	r26, 0x00	; 0
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	bc 01       	movw	r22, r24
    2aec:	cd 01       	movw	r24, r26
    2aee:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2af2:	7b 01       	movw	r14, r22
    2af4:	8c 01       	movw	r16, r24
    2af6:	80 91 6a 01 	lds	r24, 0x016A
    2afa:	90 91 6b 01 	lds	r25, 0x016B
    2afe:	cc 01       	movw	r24, r24
    2b00:	a0 e0       	ldi	r26, 0x00	; 0
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	bc 01       	movw	r22, r24
    2b06:	cd 01       	movw	r24, r26
    2b08:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	bc 01       	movw	r22, r24
    2b12:	cd 01       	movw	r24, r26
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 ea       	ldi	r20, 0xA0	; 160
    2b1a:	50 e4       	ldi	r21, 0x40	; 64
    2b1c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	9c 01       	movw	r18, r24
    2b26:	ad 01       	movw	r20, r26
    2b28:	c8 01       	movw	r24, r16
    2b2a:	b7 01       	movw	r22, r14
    2b2c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	bc 01       	movw	r22, r24
    2b36:	cd 01       	movw	r24, r26
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	48 ec       	ldi	r20, 0xC8	; 200
    2b3e:	52 e4       	ldi	r21, 0x42	; 66
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 e2       	ldi	r20, 0x20	; 32
    2b52:	52 e4       	ldi	r21, 0x42	; 66
    2b54:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	80 93 92 01 	sts	0x0192, r24
    2b60:	90 93 93 01 	sts	0x0193, r25
    2b64:	a0 93 94 01 	sts	0x0194, r26
    2b68:	b0 93 95 01 	sts	0x0195, r27
	//time_of_move_back_parallel_exit =((lenght-Ultra_Front_Dis1)*100)/REAL_SPEED_OF_MOTOR;//this equation is dynamic about the distance it written in bottom with function that calculate before exit
	time_of_move_back_perpindicular_exit_count5=((f32)((f32)lenght*100/4)/REAL_SPEED_OF_MOTOR);//250
    2b6c:	80 91 6a 01 	lds	r24, 0x016A
    2b70:	90 91 6b 01 	lds	r25, 0x016B
    2b74:	cc 01       	movw	r24, r24
    2b76:	a0 e0       	ldi	r26, 0x00	; 0
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	bc 01       	movw	r22, r24
    2b7c:	cd 01       	movw	r24, r26
    2b7e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	bc 01       	movw	r22, r24
    2b88:	cd 01       	movw	r24, r26
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	48 ec       	ldi	r20, 0xC8	; 200
    2b90:	52 e4       	ldi	r21, 0x42	; 66
    2b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e8       	ldi	r20, 0x80	; 128
    2ba4:	50 e4       	ldi	r21, 0x40	; 64
    2ba6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e2       	ldi	r20, 0x20	; 32
    2bb8:	52 e4       	ldi	r21, 0x42	; 66
    2bba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	80 93 ac 01 	sts	0x01AC, r24
    2bc6:	90 93 ad 01 	sts	0x01AD, r25
    2bca:	a0 93 ae 01 	sts	0x01AE, r26
    2bce:	b0 93 af 01 	sts	0x01AF, r27
	time_of_move_back_perpindicular_exit_count6=((f32)((f32)lenght*40)/REAL_SPEED_OF_MOTOR);//400
    2bd2:	80 91 6a 01 	lds	r24, 0x016A
    2bd6:	90 91 6b 01 	lds	r25, 0x016B
    2bda:	cc 01       	movw	r24, r24
    2bdc:	a0 e0       	ldi	r26, 0x00	; 0
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	bc 01       	movw	r22, r24
    2be2:	cd 01       	movw	r24, r26
    2be4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	bc 01       	movw	r22, r24
    2bee:	cd 01       	movw	r24, r26
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	40 e2       	ldi	r20, 0x20	; 32
    2bf6:	52 e4       	ldi	r21, 0x42	; 66
    2bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	bc 01       	movw	r22, r24
    2c02:	cd 01       	movw	r24, r26
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e2       	ldi	r20, 0x20	; 32
    2c0a:	52 e4       	ldi	r21, 0x42	; 66
    2c0c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	80 93 bf 01 	sts	0x01BF, r24
    2c18:	90 93 c0 01 	sts	0x01C0, r25
    2c1c:	a0 93 c1 01 	sts	0x01C1, r26
    2c20:	b0 93 c2 01 	sts	0x01C2, r27
	time_of_move_back_perpindicular_exit_count7=((f32)((f32)lenght*100/1.8)/REAL_SPEED_OF_MOTOR);//555
    2c24:	80 91 6a 01 	lds	r24, 0x016A
    2c28:	90 91 6b 01 	lds	r25, 0x016B
    2c2c:	cc 01       	movw	r24, r24
    2c2e:	a0 e0       	ldi	r26, 0x00	; 0
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	bc 01       	movw	r22, r24
    2c34:	cd 01       	movw	r24, r26
    2c36:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	bc 01       	movw	r22, r24
    2c40:	cd 01       	movw	r24, r26
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	48 ec       	ldi	r20, 0xC8	; 200
    2c48:	52 e4       	ldi	r21, 0x42	; 66
    2c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	26 e6       	ldi	r18, 0x66	; 102
    2c58:	36 e6       	ldi	r19, 0x66	; 102
    2c5a:	46 ee       	ldi	r20, 0xE6	; 230
    2c5c:	5f e3       	ldi	r21, 0x3F	; 63
    2c5e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	bc 01       	movw	r22, r24
    2c68:	cd 01       	movw	r24, r26
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e2       	ldi	r20, 0x20	; 32
    2c70:	52 e4       	ldi	r21, 0x42	; 66
    2c72:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	80 93 9a 01 	sts	0x019A, r24
    2c7e:	90 93 9b 01 	sts	0x019B, r25
    2c82:	a0 93 9c 01 	sts	0x019C, r26
    2c86:	b0 93 9d 01 	sts	0x019D, r27
	/***	set angles to 0 at start	***/
	Set_Angle_Servo_motor_3(0);
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <Set_Angle_Servo_motor_3>
		_delay_ms(1000);
		STOP_DC_MOTOR();
		 */


		Check_Distance_parking();//check and choose parking function
    2c90:	0e 94 81 16 	call	0x2d02	; 0x2d02 <Check_Distance_parking>
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0

		break;

	}

}
    2c98:	cf 91       	pop	r28
    2c9a:	df 91       	pop	r29
    2c9c:	1f 91       	pop	r17
    2c9e:	0f 91       	pop	r16
    2ca0:	ff 90       	pop	r15
    2ca2:	ef 90       	pop	r14
    2ca4:	08 95       	ret

00002ca6 <Display_Distance>:
void Display_Distance(void)
{
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
	Ultrasonic_init();
    2cae:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <Ultrasonic_init>
	Ultra_Front_Dis1=Ultrasonic_readDistance();
    2cb2:	0e 94 32 11 	call	0x2264	; 0x2264 <Ultrasonic_readDistance>
    2cb6:	90 93 99 01 	sts	0x0199, r25
    2cba:	80 93 98 01 	sts	0x0198, r24
	//Ultrasonic2_init();
	//Ultra_Back_Dis2=Ultrasonic2_readDistance();
	Ultrasonic3_init();
    2cbe:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <Ultrasonic3_init>
	Ultra_Right_Dis3=Ultrasonic3_readDistance();
    2cc2:	0e 94 9e 12 	call	0x253c	; 0x253c <Ultrasonic3_readDistance>
    2cc6:	90 93 ba 01 	sts	0x01BA, r25
    2cca:	80 93 b9 01 	sts	0x01B9, r24

}
    2cce:	cf 91       	pop	r28
    2cd0:	df 91       	pop	r29
    2cd2:	08 95       	ret

00002cd4 <Display_Distance_exit>:
void Display_Distance_exit(void)
{
    2cd4:	df 93       	push	r29
    2cd6:	cf 93       	push	r28
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
	Ultrasonic_init();
    2cdc:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <Ultrasonic_init>
	Ultra_Front_Dis1=Ultrasonic_readDistance();
    2ce0:	0e 94 32 11 	call	0x2264	; 0x2264 <Ultrasonic_readDistance>
    2ce4:	90 93 99 01 	sts	0x0199, r25
    2ce8:	80 93 98 01 	sts	0x0198, r24

	//Ultrasonic2_init();
	//Ultra_Back_Dis2=Ultrasonic2_readDistance();

	Ultrasonic3_init();
    2cec:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <Ultrasonic3_init>
	Ultra_Right_Dis3=Ultrasonic3_readDistance();
    2cf0:	0e 94 9e 12 	call	0x253c	; 0x253c <Ultrasonic3_readDistance>
    2cf4:	90 93 ba 01 	sts	0x01BA, r25
    2cf8:	80 93 b9 01 	sts	0x01B9, r24
}
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <Check_Distance_parking>:
void Check_Distance_parking(void)
{
    2d02:	0f 93       	push	r16
    2d04:	1f 93       	push	r17
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	c6 54       	subi	r28, 0x46	; 70
    2d10:	d0 40       	sbci	r29, 0x00	; 0
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61

	//this code below is check fuction
	//moving my car with detecting
	result_of_distance=0;
    2d1c:	10 92 85 01 	sts	0x0185, r1
    2d20:	10 92 84 01 	sts	0x0184, r1
	MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
    2d24:	8a e5       	ldi	r24, 0x5A	; 90
    2d26:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <MOVE_FORWARD>
    2d2a:	2e c1       	rjmp	.+604    	; 0x2f88 <Check_Distance_parking+0x286>
	while(count<8)
	{
		/***	detect distance for parking	***/
		Display_Distance();
    2d2c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <Display_Distance>
		MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
    2d30:	8a e5       	ldi	r24, 0x5A	; 90
    2d32:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <MOVE_FORWARD>

		//check if sensors detected an empty space
		if (Ultra_Right_Dis3>Distance_Away)
    2d36:	20 91 b9 01 	lds	r18, 0x01B9
    2d3a:	30 91 ba 01 	lds	r19, 0x01BA
    2d3e:	80 91 90 01 	lds	r24, 0x0190
    2d42:	90 91 91 01 	lds	r25, 0x0191
    2d46:	82 17       	cp	r24, r18
    2d48:	93 07       	cpc	r25, r19
    2d4a:	08 f0       	brcs	.+2      	; 0x2d4e <Check_Distance_parking+0x4c>
    2d4c:	17 c1       	rjmp	.+558    	; 0x2f7c <Check_Distance_parking+0x27a>
		{
			STOP_DC_MOTOR();
    2d4e:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <STOP_DC_MOTOR>
    2d52:	fe 01       	movw	r30, r28
    2d54:	ed 5b       	subi	r30, 0xBD	; 189
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	aa e7       	ldi	r26, 0x7A	; 122
    2d5e:	b4 e4       	ldi	r27, 0x44	; 68
    2d60:	80 83       	st	Z, r24
    2d62:	91 83       	std	Z+1, r25	; 0x01
    2d64:	a2 83       	std	Z+2, r26	; 0x02
    2d66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d68:	8e 01       	movw	r16, r28
    2d6a:	01 5c       	subi	r16, 0xC1	; 193
    2d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6e:	fe 01       	movw	r30, r28
    2d70:	ed 5b       	subi	r30, 0xBD	; 189
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	60 81       	ld	r22, Z
    2d76:	71 81       	ldd	r23, Z+1	; 0x01
    2d78:	82 81       	ldd	r24, Z+2	; 0x02
    2d7a:	93 81       	ldd	r25, Z+3	; 0x03
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	4a ef       	ldi	r20, 0xFA	; 250
    2d82:	54 e4       	ldi	r21, 0x44	; 68
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	f8 01       	movw	r30, r16
    2d8e:	80 83       	st	Z, r24
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	a2 83       	std	Z+2, r26	; 0x02
    2d94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d96:	fe 01       	movw	r30, r28
    2d98:	ff 96       	adiw	r30, 0x3f	; 63
    2d9a:	60 81       	ld	r22, Z
    2d9c:	71 81       	ldd	r23, Z+1	; 0x01
    2d9e:	82 81       	ldd	r24, Z+2	; 0x02
    2da0:	93 81       	ldd	r25, Z+3	; 0x03
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e8       	ldi	r20, 0x80	; 128
    2da8:	5f e3       	ldi	r21, 0x3F	; 63
    2daa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dae:	88 23       	and	r24, r24
    2db0:	2c f4       	brge	.+10     	; 0x2dbc <Check_Distance_parking+0xba>
		__ticks = 1;
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	9e af       	std	Y+62, r25	; 0x3e
    2db8:	8d af       	std	Y+61, r24	; 0x3d
    2dba:	46 c0       	rjmp	.+140    	; 0x2e48 <Check_Distance_parking+0x146>
	else if (__tmp > 65535)
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	ff 96       	adiw	r30, 0x3f	; 63
    2dc0:	60 81       	ld	r22, Z
    2dc2:	71 81       	ldd	r23, Z+1	; 0x01
    2dc4:	82 81       	ldd	r24, Z+2	; 0x02
    2dc6:	93 81       	ldd	r25, Z+3	; 0x03
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	3f ef       	ldi	r19, 0xFF	; 255
    2dcc:	4f e7       	ldi	r20, 0x7F	; 127
    2dce:	57 e4       	ldi	r21, 0x47	; 71
    2dd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dd4:	18 16       	cp	r1, r24
    2dd6:	64 f5       	brge	.+88     	; 0x2e30 <Check_Distance_parking+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd8:	fe 01       	movw	r30, r28
    2dda:	ed 5b       	subi	r30, 0xBD	; 189
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	60 81       	ld	r22, Z
    2de0:	71 81       	ldd	r23, Z+1	; 0x01
    2de2:	82 81       	ldd	r24, Z+2	; 0x02
    2de4:	93 81       	ldd	r25, Z+3	; 0x03
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e2       	ldi	r20, 0x20	; 32
    2dec:	51 e4       	ldi	r21, 0x41	; 65
    2dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	bc 01       	movw	r22, r24
    2df8:	cd 01       	movw	r24, r26
    2dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	9e af       	std	Y+62, r25	; 0x3e
    2e04:	8d af       	std	Y+61, r24	; 0x3d
    2e06:	0f c0       	rjmp	.+30     	; 0x2e26 <Check_Distance_parking+0x124>
    2e08:	88 ec       	ldi	r24, 0xC8	; 200
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	9c af       	std	Y+60, r25	; 0x3c
    2e0e:	8b af       	std	Y+59, r24	; 0x3b
    2e10:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e12:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	f1 f7       	brne	.-4      	; 0x2e14 <Check_Distance_parking+0x112>
    2e18:	9c af       	std	Y+60, r25	; 0x3c
    2e1a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	9e af       	std	Y+62, r25	; 0x3e
    2e24:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e26:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e28:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	69 f7       	brne	.-38     	; 0x2e08 <Check_Distance_parking+0x106>
    2e2e:	16 c0       	rjmp	.+44     	; 0x2e5c <Check_Distance_parking+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e30:	fe 01       	movw	r30, r28
    2e32:	ff 96       	adiw	r30, 0x3f	; 63
    2e34:	60 81       	ld	r22, Z
    2e36:	71 81       	ldd	r23, Z+1	; 0x01
    2e38:	82 81       	ldd	r24, Z+2	; 0x02
    2e3a:	93 81       	ldd	r25, Z+3	; 0x03
    2e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	9e af       	std	Y+62, r25	; 0x3e
    2e46:	8d af       	std	Y+61, r24	; 0x3d
    2e48:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e4c:	9a af       	std	Y+58, r25	; 0x3a
    2e4e:	89 af       	std	Y+57, r24	; 0x39
    2e50:	89 ad       	ldd	r24, Y+57	; 0x39
    2e52:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	f1 f7       	brne	.-4      	; 0x2e54 <Check_Distance_parking+0x152>
    2e58:	9a af       	std	Y+58, r25	; 0x3a
    2e5a:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);
			/***	detect distance for parking	***/
			Display_Distance();
    2e5c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <Display_Distance>
			count++;
    2e60:	80 91 b0 01 	lds	r24, 0x01B0
    2e64:	8f 5f       	subi	r24, 0xFF	; 255
    2e66:	80 93 b0 01 	sts	0x01B0, r24
			MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_CHECK);
    2e6a:	8f e5       	ldi	r24, 0x5F	; 95
    2e6c:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <MOVE_FORWARD>
			_delay_ms(TimeToCheckParking*10);//750 ms in the total 5 times
    2e70:	80 91 9e 01 	lds	r24, 0x019E
    2e74:	90 91 9f 01 	lds	r25, 0x019F
    2e78:	9c 01       	movw	r18, r24
    2e7a:	22 0f       	add	r18, r18
    2e7c:	33 1f       	adc	r19, r19
    2e7e:	c9 01       	movw	r24, r18
    2e80:	88 0f       	add	r24, r24
    2e82:	99 1f       	adc	r25, r25
    2e84:	88 0f       	add	r24, r24
    2e86:	99 1f       	adc	r25, r25
    2e88:	82 0f       	add	r24, r18
    2e8a:	93 1f       	adc	r25, r19
    2e8c:	cc 01       	movw	r24, r24
    2e8e:	a0 e0       	ldi	r26, 0x00	; 0
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	bc 01       	movw	r22, r24
    2e94:	cd 01       	movw	r24, r26
    2e96:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	8d ab       	std	Y+53, r24	; 0x35
    2ea0:	9e ab       	std	Y+54, r25	; 0x36
    2ea2:	af ab       	std	Y+55, r26	; 0x37
    2ea4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea6:	6d a9       	ldd	r22, Y+53	; 0x35
    2ea8:	7e a9       	ldd	r23, Y+54	; 0x36
    2eaa:	8f a9       	ldd	r24, Y+55	; 0x37
    2eac:	98 ad       	ldd	r25, Y+56	; 0x38
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	4a ef       	ldi	r20, 0xFA	; 250
    2eb4:	54 e4       	ldi	r21, 0x44	; 68
    2eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	89 ab       	std	Y+49, r24	; 0x31
    2ec0:	9a ab       	std	Y+50, r25	; 0x32
    2ec2:	ab ab       	std	Y+51, r26	; 0x33
    2ec4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ec6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ec8:	7a a9       	ldd	r23, Y+50	; 0x32
    2eca:	8b a9       	ldd	r24, Y+51	; 0x33
    2ecc:	9c a9       	ldd	r25, Y+52	; 0x34
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	40 e8       	ldi	r20, 0x80	; 128
    2ed4:	5f e3       	ldi	r21, 0x3F	; 63
    2ed6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eda:	88 23       	and	r24, r24
    2edc:	2c f4       	brge	.+10     	; 0x2ee8 <Check_Distance_parking+0x1e6>
		__ticks = 1;
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	98 ab       	std	Y+48, r25	; 0x30
    2ee4:	8f a7       	std	Y+47, r24	; 0x2f
    2ee6:	3f c0       	rjmp	.+126    	; 0x2f66 <Check_Distance_parking+0x264>
	else if (__tmp > 65535)
    2ee8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eea:	7a a9       	ldd	r23, Y+50	; 0x32
    2eec:	8b a9       	ldd	r24, Y+51	; 0x33
    2eee:	9c a9       	ldd	r25, Y+52	; 0x34
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	3f ef       	ldi	r19, 0xFF	; 255
    2ef4:	4f e7       	ldi	r20, 0x7F	; 127
    2ef6:	57 e4       	ldi	r21, 0x47	; 71
    2ef8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2efc:	18 16       	cp	r1, r24
    2efe:	4c f5       	brge	.+82     	; 0x2f52 <Check_Distance_parking+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f00:	6d a9       	ldd	r22, Y+53	; 0x35
    2f02:	7e a9       	ldd	r23, Y+54	; 0x36
    2f04:	8f a9       	ldd	r24, Y+55	; 0x37
    2f06:	98 ad       	ldd	r25, Y+56	; 0x38
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e2       	ldi	r20, 0x20	; 32
    2f0e:	51 e4       	ldi	r21, 0x41	; 65
    2f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	bc 01       	movw	r22, r24
    2f1a:	cd 01       	movw	r24, r26
    2f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	98 ab       	std	Y+48, r25	; 0x30
    2f26:	8f a7       	std	Y+47, r24	; 0x2f
    2f28:	0f c0       	rjmp	.+30     	; 0x2f48 <Check_Distance_parking+0x246>
    2f2a:	88 ec       	ldi	r24, 0xC8	; 200
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	9e a7       	std	Y+46, r25	; 0x2e
    2f30:	8d a7       	std	Y+45, r24	; 0x2d
    2f32:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f34:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	f1 f7       	brne	.-4      	; 0x2f36 <Check_Distance_parking+0x234>
    2f3a:	9e a7       	std	Y+46, r25	; 0x2e
    2f3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f40:	98 a9       	ldd	r25, Y+48	; 0x30
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	98 ab       	std	Y+48, r25	; 0x30
    2f46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f48:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f4a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f4c:	00 97       	sbiw	r24, 0x00	; 0
    2f4e:	69 f7       	brne	.-38     	; 0x2f2a <Check_Distance_parking+0x228>
    2f50:	1b c0       	rjmp	.+54     	; 0x2f88 <Check_Distance_parking+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f52:	69 a9       	ldd	r22, Y+49	; 0x31
    2f54:	7a a9       	ldd	r23, Y+50	; 0x32
    2f56:	8b a9       	ldd	r24, Y+51	; 0x33
    2f58:	9c a9       	ldd	r25, Y+52	; 0x34
    2f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	98 ab       	std	Y+48, r25	; 0x30
    2f64:	8f a7       	std	Y+47, r24	; 0x2f
    2f66:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f68:	98 a9       	ldd	r25, Y+48	; 0x30
    2f6a:	9c a7       	std	Y+44, r25	; 0x2c
    2f6c:	8b a7       	std	Y+43, r24	; 0x2b
    2f6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f70:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f72:	01 97       	sbiw	r24, 0x01	; 1
    2f74:	f1 f7       	brne	.-4      	; 0x2f72 <Check_Distance_parking+0x270>
    2f76:	9c a7       	std	Y+44, r25	; 0x2c
    2f78:	8b a7       	std	Y+43, r24	; 0x2b
    2f7a:	06 c0       	rjmp	.+12     	; 0x2f88 <Check_Distance_parking+0x286>
		}

		else if (count>= 5)
    2f7c:	80 91 b0 01 	lds	r24, 0x01B0
    2f80:	85 30       	cpi	r24, 0x05	; 5
    2f82:	38 f4       	brcc	.+14     	; 0x2f92 <Check_Distance_parking+0x290>
			break;
		}
		else
		{

			count=0;
    2f84:	10 92 b0 01 	sts	0x01B0, r1

	//this code below is check fuction
	//moving my car with detecting
	result_of_distance=0;
	MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
	while(count<8)
    2f88:	80 91 b0 01 	lds	r24, 0x01B0
    2f8c:	88 30       	cpi	r24, 0x08	; 8
    2f8e:	08 f4       	brcc	.+2      	; 0x2f92 <Check_Distance_parking+0x290>
    2f90:	cd ce       	rjmp	.-614    	; 0x2d2c <Check_Distance_parking+0x2a>
			count=0;

		}

	}
	if (count==8)
    2f92:	80 91 b0 01 	lds	r24, 0x01B0
    2f96:	88 30       	cpi	r24, 0x08	; 8
    2f98:	19 f4       	brne	.+6      	; 0x2fa0 <Check_Distance_parking+0x29e>
	{
		Parallel_Parking();
    2f9a:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <Parallel_Parking>
    2f9e:	a0 c1       	rjmp	.+832    	; 0x32e0 <Check_Distance_parking+0x5de>
	}
	else if(count==5)
    2fa0:	80 91 b0 01 	lds	r24, 0x01B0
    2fa4:	85 30       	cpi	r24, 0x05	; 5
    2fa6:	09 f0       	breq	.+2      	; 0x2faa <Check_Distance_parking+0x2a8>
    2fa8:	86 c0       	rjmp	.+268    	; 0x30b6 <Check_Distance_parking+0x3b4>
	{
		STOP_DC_MOTOR();
    2faa:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <STOP_DC_MOTOR>
		MOVE_BACKWORD(PWM_SPEED_OF_MOTOR_TO_PARK);
    2fae:	8a e5       	ldi	r24, 0x5A	; 90
    2fb0:	0e 94 75 25 	call	0x4aea	; 0x4aea <MOVE_BACKWORD>
		_delay_ms(time_of_move_back_perpindicular_exit_count5*10);
    2fb4:	80 91 ac 01 	lds	r24, 0x01AC
    2fb8:	90 91 ad 01 	lds	r25, 0x01AD
    2fbc:	a0 91 ae 01 	lds	r26, 0x01AE
    2fc0:	b0 91 af 01 	lds	r27, 0x01AF
    2fc4:	bc 01       	movw	r22, r24
    2fc6:	cd 01       	movw	r24, r26
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	40 e2       	ldi	r20, 0x20	; 32
    2fce:	51 e4       	ldi	r21, 0x41	; 65
    2fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	8f a3       	std	Y+39, r24	; 0x27
    2fda:	98 a7       	std	Y+40, r25	; 0x28
    2fdc:	a9 a7       	std	Y+41, r26	; 0x29
    2fde:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe0:	6f a1       	ldd	r22, Y+39	; 0x27
    2fe2:	78 a5       	ldd	r23, Y+40	; 0x28
    2fe4:	89 a5       	ldd	r24, Y+41	; 0x29
    2fe6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	4a ef       	ldi	r20, 0xFA	; 250
    2fee:	54 e4       	ldi	r21, 0x44	; 68
    2ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	8b a3       	std	Y+35, r24	; 0x23
    2ffa:	9c a3       	std	Y+36, r25	; 0x24
    2ffc:	ad a3       	std	Y+37, r26	; 0x25
    2ffe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3000:	6b a1       	ldd	r22, Y+35	; 0x23
    3002:	7c a1       	ldd	r23, Y+36	; 0x24
    3004:	8d a1       	ldd	r24, Y+37	; 0x25
    3006:	9e a1       	ldd	r25, Y+38	; 0x26
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	40 e8       	ldi	r20, 0x80	; 128
    300e:	5f e3       	ldi	r21, 0x3F	; 63
    3010:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3014:	88 23       	and	r24, r24
    3016:	2c f4       	brge	.+10     	; 0x3022 <Check_Distance_parking+0x320>
		__ticks = 1;
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	9a a3       	std	Y+34, r25	; 0x22
    301e:	89 a3       	std	Y+33, r24	; 0x21
    3020:	3f c0       	rjmp	.+126    	; 0x30a0 <Check_Distance_parking+0x39e>
	else if (__tmp > 65535)
    3022:	6b a1       	ldd	r22, Y+35	; 0x23
    3024:	7c a1       	ldd	r23, Y+36	; 0x24
    3026:	8d a1       	ldd	r24, Y+37	; 0x25
    3028:	9e a1       	ldd	r25, Y+38	; 0x26
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	3f ef       	ldi	r19, 0xFF	; 255
    302e:	4f e7       	ldi	r20, 0x7F	; 127
    3030:	57 e4       	ldi	r21, 0x47	; 71
    3032:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3036:	18 16       	cp	r1, r24
    3038:	4c f5       	brge	.+82     	; 0x308c <Check_Distance_parking+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303a:	6f a1       	ldd	r22, Y+39	; 0x27
    303c:	78 a5       	ldd	r23, Y+40	; 0x28
    303e:	89 a5       	ldd	r24, Y+41	; 0x29
    3040:	9a a5       	ldd	r25, Y+42	; 0x2a
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e2       	ldi	r20, 0x20	; 32
    3048:	51 e4       	ldi	r21, 0x41	; 65
    304a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	bc 01       	movw	r22, r24
    3054:	cd 01       	movw	r24, r26
    3056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	9a a3       	std	Y+34, r25	; 0x22
    3060:	89 a3       	std	Y+33, r24	; 0x21
    3062:	0f c0       	rjmp	.+30     	; 0x3082 <Check_Distance_parking+0x380>
    3064:	88 ec       	ldi	r24, 0xC8	; 200
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	98 a3       	std	Y+32, r25	; 0x20
    306a:	8f 8f       	std	Y+31, r24	; 0x1f
    306c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    306e:	98 a1       	ldd	r25, Y+32	; 0x20
    3070:	01 97       	sbiw	r24, 0x01	; 1
    3072:	f1 f7       	brne	.-4      	; 0x3070 <Check_Distance_parking+0x36e>
    3074:	98 a3       	std	Y+32, r25	; 0x20
    3076:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3078:	89 a1       	ldd	r24, Y+33	; 0x21
    307a:	9a a1       	ldd	r25, Y+34	; 0x22
    307c:	01 97       	sbiw	r24, 0x01	; 1
    307e:	9a a3       	std	Y+34, r25	; 0x22
    3080:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3082:	89 a1       	ldd	r24, Y+33	; 0x21
    3084:	9a a1       	ldd	r25, Y+34	; 0x22
    3086:	00 97       	sbiw	r24, 0x00	; 0
    3088:	69 f7       	brne	.-38     	; 0x3064 <Check_Distance_parking+0x362>
    308a:	2a c1       	rjmp	.+596    	; 0x32e0 <Check_Distance_parking+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    308c:	6b a1       	ldd	r22, Y+35	; 0x23
    308e:	7c a1       	ldd	r23, Y+36	; 0x24
    3090:	8d a1       	ldd	r24, Y+37	; 0x25
    3092:	9e a1       	ldd	r25, Y+38	; 0x26
    3094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	9a a3       	std	Y+34, r25	; 0x22
    309e:	89 a3       	std	Y+33, r24	; 0x21
    30a0:	89 a1       	ldd	r24, Y+33	; 0x21
    30a2:	9a a1       	ldd	r25, Y+34	; 0x22
    30a4:	9e 8f       	std	Y+30, r25	; 0x1e
    30a6:	8d 8f       	std	Y+29, r24	; 0x1d
    30a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	f1 f7       	brne	.-4      	; 0x30ac <Check_Distance_parking+0x3aa>
    30b0:	9e 8f       	std	Y+30, r25	; 0x1e
    30b2:	8d 8f       	std	Y+29, r24	; 0x1d
    30b4:	15 c1       	rjmp	.+554    	; 0x32e0 <Check_Distance_parking+0x5de>
	}
	else if(count==6)
    30b6:	80 91 b0 01 	lds	r24, 0x01B0
    30ba:	86 30       	cpi	r24, 0x06	; 6
    30bc:	09 f0       	breq	.+2      	; 0x30c0 <Check_Distance_parking+0x3be>
    30be:	86 c0       	rjmp	.+268    	; 0x31cc <Check_Distance_parking+0x4ca>
	{
		STOP_DC_MOTOR();
    30c0:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <STOP_DC_MOTOR>
		MOVE_BACKWORD(PWM_SPEED_OF_MOTOR_TO_PARK);
    30c4:	8a e5       	ldi	r24, 0x5A	; 90
    30c6:	0e 94 75 25 	call	0x4aea	; 0x4aea <MOVE_BACKWORD>
		_delay_ms(time_of_move_back_perpindicular_exit_count6*10);
    30ca:	80 91 bf 01 	lds	r24, 0x01BF
    30ce:	90 91 c0 01 	lds	r25, 0x01C0
    30d2:	a0 91 c1 01 	lds	r26, 0x01C1
    30d6:	b0 91 c2 01 	lds	r27, 0x01C2
    30da:	bc 01       	movw	r22, r24
    30dc:	cd 01       	movw	r24, r26
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	40 e2       	ldi	r20, 0x20	; 32
    30e4:	51 e4       	ldi	r21, 0x41	; 65
    30e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	89 8f       	std	Y+25, r24	; 0x19
    30f0:	9a 8f       	std	Y+26, r25	; 0x1a
    30f2:	ab 8f       	std	Y+27, r26	; 0x1b
    30f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f6:	69 8d       	ldd	r22, Y+25	; 0x19
    30f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	4a ef       	ldi	r20, 0xFA	; 250
    3104:	54 e4       	ldi	r21, 0x44	; 68
    3106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	8d 8b       	std	Y+21, r24	; 0x15
    3110:	9e 8b       	std	Y+22, r25	; 0x16
    3112:	af 8b       	std	Y+23, r26	; 0x17
    3114:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3116:	6d 89       	ldd	r22, Y+21	; 0x15
    3118:	7e 89       	ldd	r23, Y+22	; 0x16
    311a:	8f 89       	ldd	r24, Y+23	; 0x17
    311c:	98 8d       	ldd	r25, Y+24	; 0x18
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	40 e8       	ldi	r20, 0x80	; 128
    3124:	5f e3       	ldi	r21, 0x3F	; 63
    3126:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    312a:	88 23       	and	r24, r24
    312c:	2c f4       	brge	.+10     	; 0x3138 <Check_Distance_parking+0x436>
		__ticks = 1;
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	9c 8b       	std	Y+20, r25	; 0x14
    3134:	8b 8b       	std	Y+19, r24	; 0x13
    3136:	3f c0       	rjmp	.+126    	; 0x31b6 <Check_Distance_parking+0x4b4>
	else if (__tmp > 65535)
    3138:	6d 89       	ldd	r22, Y+21	; 0x15
    313a:	7e 89       	ldd	r23, Y+22	; 0x16
    313c:	8f 89       	ldd	r24, Y+23	; 0x17
    313e:	98 8d       	ldd	r25, Y+24	; 0x18
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	3f ef       	ldi	r19, 0xFF	; 255
    3144:	4f e7       	ldi	r20, 0x7F	; 127
    3146:	57 e4       	ldi	r21, 0x47	; 71
    3148:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    314c:	18 16       	cp	r1, r24
    314e:	4c f5       	brge	.+82     	; 0x31a2 <Check_Distance_parking+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3150:	69 8d       	ldd	r22, Y+25	; 0x19
    3152:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3154:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3156:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	40 e2       	ldi	r20, 0x20	; 32
    315e:	51 e4       	ldi	r21, 0x41	; 65
    3160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	bc 01       	movw	r22, r24
    316a:	cd 01       	movw	r24, r26
    316c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	9c 8b       	std	Y+20, r25	; 0x14
    3176:	8b 8b       	std	Y+19, r24	; 0x13
    3178:	0f c0       	rjmp	.+30     	; 0x3198 <Check_Distance_parking+0x496>
    317a:	88 ec       	ldi	r24, 0xC8	; 200
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	9a 8b       	std	Y+18, r25	; 0x12
    3180:	89 8b       	std	Y+17, r24	; 0x11
    3182:	89 89       	ldd	r24, Y+17	; 0x11
    3184:	9a 89       	ldd	r25, Y+18	; 0x12
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	f1 f7       	brne	.-4      	; 0x3186 <Check_Distance_parking+0x484>
    318a:	9a 8b       	std	Y+18, r25	; 0x12
    318c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    318e:	8b 89       	ldd	r24, Y+19	; 0x13
    3190:	9c 89       	ldd	r25, Y+20	; 0x14
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	9c 8b       	std	Y+20, r25	; 0x14
    3196:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3198:	8b 89       	ldd	r24, Y+19	; 0x13
    319a:	9c 89       	ldd	r25, Y+20	; 0x14
    319c:	00 97       	sbiw	r24, 0x00	; 0
    319e:	69 f7       	brne	.-38     	; 0x317a <Check_Distance_parking+0x478>
    31a0:	9f c0       	rjmp	.+318    	; 0x32e0 <Check_Distance_parking+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a2:	6d 89       	ldd	r22, Y+21	; 0x15
    31a4:	7e 89       	ldd	r23, Y+22	; 0x16
    31a6:	8f 89       	ldd	r24, Y+23	; 0x17
    31a8:	98 8d       	ldd	r25, Y+24	; 0x18
    31aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	9c 8b       	std	Y+20, r25	; 0x14
    31b4:	8b 8b       	std	Y+19, r24	; 0x13
    31b6:	8b 89       	ldd	r24, Y+19	; 0x13
    31b8:	9c 89       	ldd	r25, Y+20	; 0x14
    31ba:	98 8b       	std	Y+16, r25	; 0x10
    31bc:	8f 87       	std	Y+15, r24	; 0x0f
    31be:	8f 85       	ldd	r24, Y+15	; 0x0f
    31c0:	98 89       	ldd	r25, Y+16	; 0x10
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	f1 f7       	brne	.-4      	; 0x31c2 <Check_Distance_parking+0x4c0>
    31c6:	98 8b       	std	Y+16, r25	; 0x10
    31c8:	8f 87       	std	Y+15, r24	; 0x0f
    31ca:	8a c0       	rjmp	.+276    	; 0x32e0 <Check_Distance_parking+0x5de>
	}
	else if(count==7)
    31cc:	80 91 b0 01 	lds	r24, 0x01B0
    31d0:	87 30       	cpi	r24, 0x07	; 7
    31d2:	09 f0       	breq	.+2      	; 0x31d6 <Check_Distance_parking+0x4d4>
    31d4:	85 c0       	rjmp	.+266    	; 0x32e0 <Check_Distance_parking+0x5de>
	{
		STOP_DC_MOTOR();
    31d6:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <STOP_DC_MOTOR>
		MOVE_BACKWORD(PWM_SPEED_OF_MOTOR_TO_PARK);
    31da:	8a e5       	ldi	r24, 0x5A	; 90
    31dc:	0e 94 75 25 	call	0x4aea	; 0x4aea <MOVE_BACKWORD>
		_delay_ms(time_of_move_back_perpindicular_exit_count7*10);
    31e0:	80 91 9a 01 	lds	r24, 0x019A
    31e4:	90 91 9b 01 	lds	r25, 0x019B
    31e8:	a0 91 9c 01 	lds	r26, 0x019C
    31ec:	b0 91 9d 01 	lds	r27, 0x019D
    31f0:	bc 01       	movw	r22, r24
    31f2:	cd 01       	movw	r24, r26
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e2       	ldi	r20, 0x20	; 32
    31fa:	51 e4       	ldi	r21, 0x41	; 65
    31fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	8b 87       	std	Y+11, r24	; 0x0b
    3206:	9c 87       	std	Y+12, r25	; 0x0c
    3208:	ad 87       	std	Y+13, r26	; 0x0d
    320a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    320c:	6b 85       	ldd	r22, Y+11	; 0x0b
    320e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3210:	8d 85       	ldd	r24, Y+13	; 0x0d
    3212:	9e 85       	ldd	r25, Y+14	; 0x0e
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	4a ef       	ldi	r20, 0xFA	; 250
    321a:	54 e4       	ldi	r21, 0x44	; 68
    321c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	8f 83       	std	Y+7, r24	; 0x07
    3226:	98 87       	std	Y+8, r25	; 0x08
    3228:	a9 87       	std	Y+9, r26	; 0x09
    322a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    322c:	6f 81       	ldd	r22, Y+7	; 0x07
    322e:	78 85       	ldd	r23, Y+8	; 0x08
    3230:	89 85       	ldd	r24, Y+9	; 0x09
    3232:	9a 85       	ldd	r25, Y+10	; 0x0a
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	40 e8       	ldi	r20, 0x80	; 128
    323a:	5f e3       	ldi	r21, 0x3F	; 63
    323c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3240:	88 23       	and	r24, r24
    3242:	2c f4       	brge	.+10     	; 0x324e <Check_Distance_parking+0x54c>
		__ticks = 1;
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	9e 83       	std	Y+6, r25	; 0x06
    324a:	8d 83       	std	Y+5, r24	; 0x05
    324c:	3f c0       	rjmp	.+126    	; 0x32cc <Check_Distance_parking+0x5ca>
	else if (__tmp > 65535)
    324e:	6f 81       	ldd	r22, Y+7	; 0x07
    3250:	78 85       	ldd	r23, Y+8	; 0x08
    3252:	89 85       	ldd	r24, Y+9	; 0x09
    3254:	9a 85       	ldd	r25, Y+10	; 0x0a
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	3f ef       	ldi	r19, 0xFF	; 255
    325a:	4f e7       	ldi	r20, 0x7F	; 127
    325c:	57 e4       	ldi	r21, 0x47	; 71
    325e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3262:	18 16       	cp	r1, r24
    3264:	4c f5       	brge	.+82     	; 0x32b8 <Check_Distance_parking+0x5b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3266:	6b 85       	ldd	r22, Y+11	; 0x0b
    3268:	7c 85       	ldd	r23, Y+12	; 0x0c
    326a:	8d 85       	ldd	r24, Y+13	; 0x0d
    326c:	9e 85       	ldd	r25, Y+14	; 0x0e
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e2       	ldi	r20, 0x20	; 32
    3274:	51 e4       	ldi	r21, 0x41	; 65
    3276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	bc 01       	movw	r22, r24
    3280:	cd 01       	movw	r24, r26
    3282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	9e 83       	std	Y+6, r25	; 0x06
    328c:	8d 83       	std	Y+5, r24	; 0x05
    328e:	0f c0       	rjmp	.+30     	; 0x32ae <Check_Distance_parking+0x5ac>
    3290:	88 ec       	ldi	r24, 0xC8	; 200
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	9c 83       	std	Y+4, r25	; 0x04
    3296:	8b 83       	std	Y+3, r24	; 0x03
    3298:	8b 81       	ldd	r24, Y+3	; 0x03
    329a:	9c 81       	ldd	r25, Y+4	; 0x04
    329c:	01 97       	sbiw	r24, 0x01	; 1
    329e:	f1 f7       	brne	.-4      	; 0x329c <Check_Distance_parking+0x59a>
    32a0:	9c 83       	std	Y+4, r25	; 0x04
    32a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a4:	8d 81       	ldd	r24, Y+5	; 0x05
    32a6:	9e 81       	ldd	r25, Y+6	; 0x06
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	9e 83       	std	Y+6, r25	; 0x06
    32ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ae:	8d 81       	ldd	r24, Y+5	; 0x05
    32b0:	9e 81       	ldd	r25, Y+6	; 0x06
    32b2:	00 97       	sbiw	r24, 0x00	; 0
    32b4:	69 f7       	brne	.-38     	; 0x3290 <Check_Distance_parking+0x58e>
    32b6:	14 c0       	rjmp	.+40     	; 0x32e0 <Check_Distance_parking+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ba:	78 85       	ldd	r23, Y+8	; 0x08
    32bc:	89 85       	ldd	r24, Y+9	; 0x09
    32be:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	9e 83       	std	Y+6, r25	; 0x06
    32ca:	8d 83       	std	Y+5, r24	; 0x05
    32cc:	8d 81       	ldd	r24, Y+5	; 0x05
    32ce:	9e 81       	ldd	r25, Y+6	; 0x06
    32d0:	9a 83       	std	Y+2, r25	; 0x02
    32d2:	89 83       	std	Y+1, r24	; 0x01
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	9a 81       	ldd	r25, Y+2	; 0x02
    32d8:	01 97       	sbiw	r24, 0x01	; 1
    32da:	f1 f7       	brne	.-4      	; 0x32d8 <Check_Distance_parking+0x5d6>
    32dc:	9a 83       	std	Y+2, r25	; 0x02
    32de:	89 83       	std	Y+1, r24	; 0x01
	}
}
    32e0:	ca 5b       	subi	r28, 0xBA	; 186
    32e2:	df 4f       	sbci	r29, 0xFF	; 255
    32e4:	0f b6       	in	r0, 0x3f	; 63
    32e6:	f8 94       	cli
    32e8:	de bf       	out	0x3e, r29	; 62
    32ea:	0f be       	out	0x3f, r0	; 63
    32ec:	cd bf       	out	0x3d, r28	; 61
    32ee:	cf 91       	pop	r28
    32f0:	df 91       	pop	r29
    32f2:	1f 91       	pop	r17
    32f4:	0f 91       	pop	r16
    32f6:	08 95       	ret

000032f8 <Check_Distance_exiting>:
void Check_Distance_exiting(void)
{
    32f8:	df 93       	push	r29
    32fa:	cf 93       	push	r28
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	6c 97       	sbiw	r28, 0x1c	; 28
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61

	result_of_distance=0;
    330c:	10 92 85 01 	sts	0x0185, r1
    3310:	10 92 84 01 	sts	0x0184, r1
    3314:	4c c1       	rjmp	.+664    	; 0x35ae <Check_Distance_exiting+0x2b6>
	while(count<1)
	{
		Display_Distance_exit();
    3316:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <Display_Distance_exit>
		UART_voidSendData(BACK_ULTRASONIC_DISTANCE);
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
		Ultra_Back_Dis2=UART_u8ReceiveData();
    3320:	0e 94 75 0b 	call	0x16ea	; 0x16ea <UART_u8ReceiveData>
    3324:	88 2f       	mov	r24, r24
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	90 93 c4 01 	sts	0x01C4, r25
    332c:	80 93 c3 01 	sts	0x01C3, r24
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	90 e8       	ldi	r25, 0x80	; 128
    3334:	ab e3       	ldi	r26, 0x3B	; 59
    3336:	b5 e4       	ldi	r27, 0x45	; 69
    3338:	89 8f       	std	Y+25, r24	; 0x19
    333a:	9a 8f       	std	Y+26, r25	; 0x1a
    333c:	ab 8f       	std	Y+27, r26	; 0x1b
    333e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3340:	69 8d       	ldd	r22, Y+25	; 0x19
    3342:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3344:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3346:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	4a ef       	ldi	r20, 0xFA	; 250
    334e:	54 e4       	ldi	r21, 0x44	; 68
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	8d 8b       	std	Y+21, r24	; 0x15
    335a:	9e 8b       	std	Y+22, r25	; 0x16
    335c:	af 8b       	std	Y+23, r26	; 0x17
    335e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3360:	6d 89       	ldd	r22, Y+21	; 0x15
    3362:	7e 89       	ldd	r23, Y+22	; 0x16
    3364:	8f 89       	ldd	r24, Y+23	; 0x17
    3366:	98 8d       	ldd	r25, Y+24	; 0x18
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e8       	ldi	r20, 0x80	; 128
    336e:	5f e3       	ldi	r21, 0x3F	; 63
    3370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3374:	88 23       	and	r24, r24
    3376:	2c f4       	brge	.+10     	; 0x3382 <Check_Distance_exiting+0x8a>
		__ticks = 1;
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	9c 8b       	std	Y+20, r25	; 0x14
    337e:	8b 8b       	std	Y+19, r24	; 0x13
    3380:	3f c0       	rjmp	.+126    	; 0x3400 <Check_Distance_exiting+0x108>
	else if (__tmp > 65535)
    3382:	6d 89       	ldd	r22, Y+21	; 0x15
    3384:	7e 89       	ldd	r23, Y+22	; 0x16
    3386:	8f 89       	ldd	r24, Y+23	; 0x17
    3388:	98 8d       	ldd	r25, Y+24	; 0x18
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	3f ef       	ldi	r19, 0xFF	; 255
    338e:	4f e7       	ldi	r20, 0x7F	; 127
    3390:	57 e4       	ldi	r21, 0x47	; 71
    3392:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3396:	18 16       	cp	r1, r24
    3398:	4c f5       	brge	.+82     	; 0x33ec <Check_Distance_exiting+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339a:	69 8d       	ldd	r22, Y+25	; 0x19
    339c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    339e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e2       	ldi	r20, 0x20	; 32
    33a8:	51 e4       	ldi	r21, 0x41	; 65
    33aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	bc 01       	movw	r22, r24
    33b4:	cd 01       	movw	r24, r26
    33b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	9c 8b       	std	Y+20, r25	; 0x14
    33c0:	8b 8b       	std	Y+19, r24	; 0x13
    33c2:	0f c0       	rjmp	.+30     	; 0x33e2 <Check_Distance_exiting+0xea>
    33c4:	88 ec       	ldi	r24, 0xC8	; 200
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	9a 8b       	std	Y+18, r25	; 0x12
    33ca:	89 8b       	std	Y+17, r24	; 0x11
    33cc:	89 89       	ldd	r24, Y+17	; 0x11
    33ce:	9a 89       	ldd	r25, Y+18	; 0x12
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <Check_Distance_exiting+0xd8>
    33d4:	9a 8b       	std	Y+18, r25	; 0x12
    33d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d8:	8b 89       	ldd	r24, Y+19	; 0x13
    33da:	9c 89       	ldd	r25, Y+20	; 0x14
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	9c 8b       	std	Y+20, r25	; 0x14
    33e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e2:	8b 89       	ldd	r24, Y+19	; 0x13
    33e4:	9c 89       	ldd	r25, Y+20	; 0x14
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	69 f7       	brne	.-38     	; 0x33c4 <Check_Distance_exiting+0xcc>
    33ea:	14 c0       	rjmp	.+40     	; 0x3414 <Check_Distance_exiting+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ec:	6d 89       	ldd	r22, Y+21	; 0x15
    33ee:	7e 89       	ldd	r23, Y+22	; 0x16
    33f0:	8f 89       	ldd	r24, Y+23	; 0x17
    33f2:	98 8d       	ldd	r25, Y+24	; 0x18
    33f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	9c 8b       	std	Y+20, r25	; 0x14
    33fe:	8b 8b       	std	Y+19, r24	; 0x13
    3400:	8b 89       	ldd	r24, Y+19	; 0x13
    3402:	9c 89       	ldd	r25, Y+20	; 0x14
    3404:	98 8b       	std	Y+16, r25	; 0x10
    3406:	8f 87       	std	Y+15, r24	; 0x0f
    3408:	8f 85       	ldd	r24, Y+15	; 0x0f
    340a:	98 89       	ldd	r25, Y+16	; 0x10
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <Check_Distance_exiting+0x114>
    3410:	98 8b       	std	Y+16, r25	; 0x10
    3412:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3000);
		if((Ultra_Front_Dis1)>40)
    3414:	80 91 98 01 	lds	r24, 0x0198
    3418:	90 91 99 01 	lds	r25, 0x0199
    341c:	89 32       	cpi	r24, 0x29	; 41
    341e:	91 05       	cpc	r25, r1
    3420:	08 f4       	brcc	.+2      	; 0x3424 <Check_Distance_exiting+0x12c>
    3422:	c5 c0       	rjmp	.+394    	; 0x35ae <Check_Distance_exiting+0x2b6>
		{

			if (Ultra_Front_Dis1>40)
    3424:	80 91 98 01 	lds	r24, 0x0198
    3428:	90 91 99 01 	lds	r25, 0x0199
    342c:	89 32       	cpi	r24, 0x29	; 41
    342e:	91 05       	cpc	r25, r1
    3430:	18 f0       	brcs	.+6      	; 0x3438 <Check_Distance_exiting+0x140>
			{

				ExitParallel();
    3432:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <ExitParallel>
    3436:	c0 c0       	rjmp	.+384    	; 0x35b8 <Check_Distance_exiting+0x2c0>
				break;
			}
			//if the second check wasn,t enough go to loop again
			else if (Ultra_Front_Dis1<40)
    3438:	80 91 98 01 	lds	r24, 0x0198
    343c:	90 91 99 01 	lds	r25, 0x0199
    3440:	88 32       	cpi	r24, 0x28	; 40
    3442:	91 05       	cpc	r25, r1
    3444:	08 f0       	brcs	.+2      	; 0x3448 <Check_Distance_exiting+0x150>
    3446:	b3 c0       	rjmp	.+358    	; 0x35ae <Check_Distance_exiting+0x2b6>
			{
				time_of_move_back_parallel_exit =((lenght-Ultra_Front_Dis1)*100)/REAL_SPEED_OF_MOTOR;
    3448:	20 91 6a 01 	lds	r18, 0x016A
    344c:	30 91 6b 01 	lds	r19, 0x016B
    3450:	80 91 98 01 	lds	r24, 0x0198
    3454:	90 91 99 01 	lds	r25, 0x0199
    3458:	28 1b       	sub	r18, r24
    345a:	39 0b       	sbc	r19, r25
    345c:	84 e6       	ldi	r24, 0x64	; 100
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	ac 01       	movw	r20, r24
    3462:	24 9f       	mul	r18, r20
    3464:	c0 01       	movw	r24, r0
    3466:	25 9f       	mul	r18, r21
    3468:	90 0d       	add	r25, r0
    346a:	34 9f       	mul	r19, r20
    346c:	90 0d       	add	r25, r0
    346e:	11 24       	eor	r1, r1
    3470:	28 e2       	ldi	r18, 0x28	; 40
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	b9 01       	movw	r22, r18
    3476:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__udivmodhi4>
    347a:	cb 01       	movw	r24, r22
    347c:	cc 01       	movw	r24, r24
    347e:	a0 e0       	ldi	r26, 0x00	; 0
    3480:	b0 e0       	ldi	r27, 0x00	; 0
    3482:	bc 01       	movw	r22, r24
    3484:	cd 01       	movw	r24, r26
    3486:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	80 93 b3 01 	sts	0x01B3, r24
    3492:	90 93 b4 01 	sts	0x01B4, r25
    3496:	a0 93 b5 01 	sts	0x01B5, r26
    349a:	b0 93 b6 01 	sts	0x01B6, r27
				MOVE_BACKWORD(PWM_SPEED_OF_MOTOR_TO_PARK);
    349e:	8a e5       	ldi	r24, 0x5A	; 90
    34a0:	0e 94 75 25 	call	0x4aea	; 0x4aea <MOVE_BACKWORD>
				_delay_ms(time_of_move_back_parallel_exit*10);
    34a4:	80 91 b3 01 	lds	r24, 0x01B3
    34a8:	90 91 b4 01 	lds	r25, 0x01B4
    34ac:	a0 91 b5 01 	lds	r26, 0x01B5
    34b0:	b0 91 b6 01 	lds	r27, 0x01B6
    34b4:	bc 01       	movw	r22, r24
    34b6:	cd 01       	movw	r24, r26
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e2       	ldi	r20, 0x20	; 32
    34be:	51 e4       	ldi	r21, 0x41	; 65
    34c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	8b 87       	std	Y+11, r24	; 0x0b
    34ca:	9c 87       	std	Y+12, r25	; 0x0c
    34cc:	ad 87       	std	Y+13, r26	; 0x0d
    34ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    34d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    34d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d8:	20 e0       	ldi	r18, 0x00	; 0
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	4a ef       	ldi	r20, 0xFA	; 250
    34de:	54 e4       	ldi	r21, 0x44	; 68
    34e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e4:	dc 01       	movw	r26, r24
    34e6:	cb 01       	movw	r24, r22
    34e8:	8f 83       	std	Y+7, r24	; 0x07
    34ea:	98 87       	std	Y+8, r25	; 0x08
    34ec:	a9 87       	std	Y+9, r26	; 0x09
    34ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34f0:	6f 81       	ldd	r22, Y+7	; 0x07
    34f2:	78 85       	ldd	r23, Y+8	; 0x08
    34f4:	89 85       	ldd	r24, Y+9	; 0x09
    34f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	40 e8       	ldi	r20, 0x80	; 128
    34fe:	5f e3       	ldi	r21, 0x3F	; 63
    3500:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3504:	88 23       	and	r24, r24
    3506:	2c f4       	brge	.+10     	; 0x3512 <Check_Distance_exiting+0x21a>
		__ticks = 1;
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	9e 83       	std	Y+6, r25	; 0x06
    350e:	8d 83       	std	Y+5, r24	; 0x05
    3510:	3f c0       	rjmp	.+126    	; 0x3590 <Check_Distance_exiting+0x298>
	else if (__tmp > 65535)
    3512:	6f 81       	ldd	r22, Y+7	; 0x07
    3514:	78 85       	ldd	r23, Y+8	; 0x08
    3516:	89 85       	ldd	r24, Y+9	; 0x09
    3518:	9a 85       	ldd	r25, Y+10	; 0x0a
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	3f ef       	ldi	r19, 0xFF	; 255
    351e:	4f e7       	ldi	r20, 0x7F	; 127
    3520:	57 e4       	ldi	r21, 0x47	; 71
    3522:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3526:	18 16       	cp	r1, r24
    3528:	4c f5       	brge	.+82     	; 0x357c <Check_Distance_exiting+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    352a:	6b 85       	ldd	r22, Y+11	; 0x0b
    352c:	7c 85       	ldd	r23, Y+12	; 0x0c
    352e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3530:	9e 85       	ldd	r25, Y+14	; 0x0e
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	40 e2       	ldi	r20, 0x20	; 32
    3538:	51 e4       	ldi	r21, 0x41	; 65
    353a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	bc 01       	movw	r22, r24
    3544:	cd 01       	movw	r24, r26
    3546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	9e 83       	std	Y+6, r25	; 0x06
    3550:	8d 83       	std	Y+5, r24	; 0x05
    3552:	0f c0       	rjmp	.+30     	; 0x3572 <Check_Distance_exiting+0x27a>
    3554:	88 ec       	ldi	r24, 0xC8	; 200
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	9c 83       	std	Y+4, r25	; 0x04
    355a:	8b 83       	std	Y+3, r24	; 0x03
    355c:	8b 81       	ldd	r24, Y+3	; 0x03
    355e:	9c 81       	ldd	r25, Y+4	; 0x04
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	f1 f7       	brne	.-4      	; 0x3560 <Check_Distance_exiting+0x268>
    3564:	9c 83       	std	Y+4, r25	; 0x04
    3566:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3568:	8d 81       	ldd	r24, Y+5	; 0x05
    356a:	9e 81       	ldd	r25, Y+6	; 0x06
    356c:	01 97       	sbiw	r24, 0x01	; 1
    356e:	9e 83       	std	Y+6, r25	; 0x06
    3570:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3572:	8d 81       	ldd	r24, Y+5	; 0x05
    3574:	9e 81       	ldd	r25, Y+6	; 0x06
    3576:	00 97       	sbiw	r24, 0x00	; 0
    3578:	69 f7       	brne	.-38     	; 0x3554 <Check_Distance_exiting+0x25c>
    357a:	14 c0       	rjmp	.+40     	; 0x35a4 <Check_Distance_exiting+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    357c:	6f 81       	ldd	r22, Y+7	; 0x07
    357e:	78 85       	ldd	r23, Y+8	; 0x08
    3580:	89 85       	ldd	r24, Y+9	; 0x09
    3582:	9a 85       	ldd	r25, Y+10	; 0x0a
    3584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	9e 83       	std	Y+6, r25	; 0x06
    358e:	8d 83       	std	Y+5, r24	; 0x05
    3590:	8d 81       	ldd	r24, Y+5	; 0x05
    3592:	9e 81       	ldd	r25, Y+6	; 0x06
    3594:	9a 83       	std	Y+2, r25	; 0x02
    3596:	89 83       	std	Y+1, r24	; 0x01
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	9a 81       	ldd	r25, Y+2	; 0x02
    359c:	01 97       	sbiw	r24, 0x01	; 1
    359e:	f1 f7       	brne	.-4      	; 0x359c <Check_Distance_exiting+0x2a4>
    35a0:	9a 83       	std	Y+2, r25	; 0x02
    35a2:	89 83       	std	Y+1, r24	; 0x01
				STOP_DC_MOTOR();
    35a4:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <STOP_DC_MOTOR>
				ExitParallel();
    35a8:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <ExitParallel>
    35ac:	05 c0       	rjmp	.+10     	; 0x35b8 <Check_Distance_exiting+0x2c0>
}
void Check_Distance_exiting(void)
{

	result_of_distance=0;
	while(count<1)
    35ae:	80 91 b0 01 	lds	r24, 0x01B0
    35b2:	88 23       	and	r24, r24
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <Check_Distance_exiting+0x2c0>
    35b6:	af ce       	rjmp	.-674    	; 0x3316 <Check_Distance_exiting+0x1e>

				break;
			}
		}
	}
}
    35b8:	6c 96       	adiw	r28, 0x1c	; 28
    35ba:	0f b6       	in	r0, 0x3f	; 63
    35bc:	f8 94       	cli
    35be:	de bf       	out	0x3e, r29	; 62
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	cd bf       	out	0x3d, r28	; 61
    35c4:	cf 91       	pop	r28
    35c6:	df 91       	pop	r29
    35c8:	08 95       	ret

000035ca <Parallel_Parking>:
void Parallel_Parking(void)
{
    35ca:	0f 93       	push	r16
    35cc:	1f 93       	push	r17
    35ce:	df 93       	push	r29
    35d0:	cf 93       	push	r28
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
    35d6:	ca 59       	subi	r28, 0x9A	; 154
    35d8:	d0 40       	sbci	r29, 0x00	; 0
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	cd bf       	out	0x3d, r28	; 61
	count=0;
    35e4:	10 92 b0 01 	sts	0x01B0, r1
	STOP_DC_MOTOR();
    35e8:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <STOP_DC_MOTOR>
	MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
    35ec:	8a e5       	ldi	r24, 0x5A	; 90
    35ee:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <MOVE_FORWARD>
	_delay_ms(time_of_extra_space_for_parking_after_check*10);//equation done time_of_extra_space_for_parking_after_check
    35f2:	80 91 a0 01 	lds	r24, 0x01A0
    35f6:	90 91 a1 01 	lds	r25, 0x01A1
    35fa:	a0 91 a2 01 	lds	r26, 0x01A2
    35fe:	b0 91 a3 01 	lds	r27, 0x01A3
    3602:	bc 01       	movw	r22, r24
    3604:	cd 01       	movw	r24, r26
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	40 e2       	ldi	r20, 0x20	; 32
    360c:	51 e4       	ldi	r21, 0x41	; 65
    360e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	fe 01       	movw	r30, r28
    3618:	e9 56       	subi	r30, 0x69	; 105
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	80 83       	st	Z, r24
    361e:	91 83       	std	Z+1, r25	; 0x01
    3620:	a2 83       	std	Z+2, r26	; 0x02
    3622:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3624:	8e 01       	movw	r16, r28
    3626:	0d 56       	subi	r16, 0x6D	; 109
    3628:	1f 4f       	sbci	r17, 0xFF	; 255
    362a:	fe 01       	movw	r30, r28
    362c:	e9 56       	subi	r30, 0x69	; 105
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	60 81       	ld	r22, Z
    3632:	71 81       	ldd	r23, Z+1	; 0x01
    3634:	82 81       	ldd	r24, Z+2	; 0x02
    3636:	93 81       	ldd	r25, Z+3	; 0x03
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	4a ef       	ldi	r20, 0xFA	; 250
    363e:	54 e4       	ldi	r21, 0x44	; 68
    3640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	f8 01       	movw	r30, r16
    364a:	80 83       	st	Z, r24
    364c:	91 83       	std	Z+1, r25	; 0x01
    364e:	a2 83       	std	Z+2, r26	; 0x02
    3650:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3652:	fe 01       	movw	r30, r28
    3654:	ed 56       	subi	r30, 0x6D	; 109
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	60 81       	ld	r22, Z
    365a:	71 81       	ldd	r23, Z+1	; 0x01
    365c:	82 81       	ldd	r24, Z+2	; 0x02
    365e:	93 81       	ldd	r25, Z+3	; 0x03
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	40 e8       	ldi	r20, 0x80	; 128
    3666:	5f e3       	ldi	r21, 0x3F	; 63
    3668:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    366c:	88 23       	and	r24, r24
    366e:	44 f4       	brge	.+16     	; 0x3680 <Parallel_Parking+0xb6>
		__ticks = 1;
    3670:	fe 01       	movw	r30, r28
    3672:	ef 56       	subi	r30, 0x6F	; 111
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	91 83       	std	Z+1, r25	; 0x01
    367c:	80 83       	st	Z, r24
    367e:	64 c0       	rjmp	.+200    	; 0x3748 <Parallel_Parking+0x17e>
	else if (__tmp > 65535)
    3680:	fe 01       	movw	r30, r28
    3682:	ed 56       	subi	r30, 0x6D	; 109
    3684:	ff 4f       	sbci	r31, 0xFF	; 255
    3686:	60 81       	ld	r22, Z
    3688:	71 81       	ldd	r23, Z+1	; 0x01
    368a:	82 81       	ldd	r24, Z+2	; 0x02
    368c:	93 81       	ldd	r25, Z+3	; 0x03
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	3f ef       	ldi	r19, 0xFF	; 255
    3692:	4f e7       	ldi	r20, 0x7F	; 127
    3694:	57 e4       	ldi	r21, 0x47	; 71
    3696:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    369a:	18 16       	cp	r1, r24
    369c:	0c f0       	brlt	.+2      	; 0x36a0 <Parallel_Parking+0xd6>
    369e:	43 c0       	rjmp	.+134    	; 0x3726 <Parallel_Parking+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a0:	fe 01       	movw	r30, r28
    36a2:	e9 56       	subi	r30, 0x69	; 105
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	60 81       	ld	r22, Z
    36a8:	71 81       	ldd	r23, Z+1	; 0x01
    36aa:	82 81       	ldd	r24, Z+2	; 0x02
    36ac:	93 81       	ldd	r25, Z+3	; 0x03
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	40 e2       	ldi	r20, 0x20	; 32
    36b4:	51 e4       	ldi	r21, 0x41	; 65
    36b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	8e 01       	movw	r16, r28
    36c0:	0f 56       	subi	r16, 0x6F	; 111
    36c2:	1f 4f       	sbci	r17, 0xFF	; 255
    36c4:	bc 01       	movw	r22, r24
    36c6:	cd 01       	movw	r24, r26
    36c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	f8 01       	movw	r30, r16
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	80 83       	st	Z, r24
    36d6:	1f c0       	rjmp	.+62     	; 0x3716 <Parallel_Parking+0x14c>
    36d8:	fe 01       	movw	r30, r28
    36da:	e1 57       	subi	r30, 0x71	; 113
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	88 ec       	ldi	r24, 0xC8	; 200
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	91 83       	std	Z+1, r25	; 0x01
    36e4:	80 83       	st	Z, r24
    36e6:	fe 01       	movw	r30, r28
    36e8:	e1 57       	subi	r30, 0x71	; 113
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	80 81       	ld	r24, Z
    36ee:	91 81       	ldd	r25, Z+1	; 0x01
    36f0:	01 97       	sbiw	r24, 0x01	; 1
    36f2:	f1 f7       	brne	.-4      	; 0x36f0 <Parallel_Parking+0x126>
    36f4:	fe 01       	movw	r30, r28
    36f6:	e1 57       	subi	r30, 0x71	; 113
    36f8:	ff 4f       	sbci	r31, 0xFF	; 255
    36fa:	91 83       	std	Z+1, r25	; 0x01
    36fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fe:	de 01       	movw	r26, r28
    3700:	af 56       	subi	r26, 0x6F	; 111
    3702:	bf 4f       	sbci	r27, 0xFF	; 255
    3704:	fe 01       	movw	r30, r28
    3706:	ef 56       	subi	r30, 0x6F	; 111
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	80 81       	ld	r24, Z
    370c:	91 81       	ldd	r25, Z+1	; 0x01
    370e:	01 97       	sbiw	r24, 0x01	; 1
    3710:	11 96       	adiw	r26, 0x01	; 1
    3712:	9c 93       	st	X, r25
    3714:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3716:	fe 01       	movw	r30, r28
    3718:	ef 56       	subi	r30, 0x6F	; 111
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	80 81       	ld	r24, Z
    371e:	91 81       	ldd	r25, Z+1	; 0x01
    3720:	00 97       	sbiw	r24, 0x00	; 0
    3722:	d1 f6       	brne	.-76     	; 0x36d8 <Parallel_Parking+0x10e>
    3724:	27 c0       	rjmp	.+78     	; 0x3774 <Parallel_Parking+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3726:	8e 01       	movw	r16, r28
    3728:	0f 56       	subi	r16, 0x6F	; 111
    372a:	1f 4f       	sbci	r17, 0xFF	; 255
    372c:	fe 01       	movw	r30, r28
    372e:	ed 56       	subi	r30, 0x6D	; 109
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	60 81       	ld	r22, Z
    3734:	71 81       	ldd	r23, Z+1	; 0x01
    3736:	82 81       	ldd	r24, Z+2	; 0x02
    3738:	93 81       	ldd	r25, Z+3	; 0x03
    373a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	f8 01       	movw	r30, r16
    3744:	91 83       	std	Z+1, r25	; 0x01
    3746:	80 83       	st	Z, r24
    3748:	de 01       	movw	r26, r28
    374a:	a3 57       	subi	r26, 0x73	; 115
    374c:	bf 4f       	sbci	r27, 0xFF	; 255
    374e:	fe 01       	movw	r30, r28
    3750:	ef 56       	subi	r30, 0x6F	; 111
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	80 81       	ld	r24, Z
    3756:	91 81       	ldd	r25, Z+1	; 0x01
    3758:	8d 93       	st	X+, r24
    375a:	9c 93       	st	X, r25
    375c:	fe 01       	movw	r30, r28
    375e:	e3 57       	subi	r30, 0x73	; 115
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	80 81       	ld	r24, Z
    3764:	91 81       	ldd	r25, Z+1	; 0x01
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	f1 f7       	brne	.-4      	; 0x3766 <Parallel_Parking+0x19c>
    376a:	fe 01       	movw	r30, r28
    376c:	e3 57       	subi	r30, 0x73	; 115
    376e:	ff 4f       	sbci	r31, 0xFF	; 255
    3770:	91 83       	std	Z+1, r25	; 0x01
    3772:	80 83       	st	Z, r24
	STOP_DC_MOTOR();
    3774:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <STOP_DC_MOTOR>
    3778:	fe 01       	movw	r30, r28
    377a:	e7 57       	subi	r30, 0x77	; 119
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	aa e7       	ldi	r26, 0x7A	; 122
    3784:	b4 e4       	ldi	r27, 0x44	; 68
    3786:	80 83       	st	Z, r24
    3788:	91 83       	std	Z+1, r25	; 0x01
    378a:	a2 83       	std	Z+2, r26	; 0x02
    378c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    378e:	8e 01       	movw	r16, r28
    3790:	0b 57       	subi	r16, 0x7B	; 123
    3792:	1f 4f       	sbci	r17, 0xFF	; 255
    3794:	fe 01       	movw	r30, r28
    3796:	e7 57       	subi	r30, 0x77	; 119
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	60 81       	ld	r22, Z
    379c:	71 81       	ldd	r23, Z+1	; 0x01
    379e:	82 81       	ldd	r24, Z+2	; 0x02
    37a0:	93 81       	ldd	r25, Z+3	; 0x03
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	4a ef       	ldi	r20, 0xFA	; 250
    37a8:	54 e4       	ldi	r21, 0x44	; 68
    37aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	f8 01       	movw	r30, r16
    37b4:	80 83       	st	Z, r24
    37b6:	91 83       	std	Z+1, r25	; 0x01
    37b8:	a2 83       	std	Z+2, r26	; 0x02
    37ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37bc:	fe 01       	movw	r30, r28
    37be:	eb 57       	subi	r30, 0x7B	; 123
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	60 81       	ld	r22, Z
    37c4:	71 81       	ldd	r23, Z+1	; 0x01
    37c6:	82 81       	ldd	r24, Z+2	; 0x02
    37c8:	93 81       	ldd	r25, Z+3	; 0x03
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	40 e8       	ldi	r20, 0x80	; 128
    37d0:	5f e3       	ldi	r21, 0x3F	; 63
    37d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37d6:	88 23       	and	r24, r24
    37d8:	44 f4       	brge	.+16     	; 0x37ea <Parallel_Parking+0x220>
		__ticks = 1;
    37da:	fe 01       	movw	r30, r28
    37dc:	ed 57       	subi	r30, 0x7D	; 125
    37de:	ff 4f       	sbci	r31, 0xFF	; 255
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	91 83       	std	Z+1, r25	; 0x01
    37e6:	80 83       	st	Z, r24
    37e8:	64 c0       	rjmp	.+200    	; 0x38b2 <Parallel_Parking+0x2e8>
	else if (__tmp > 65535)
    37ea:	fe 01       	movw	r30, r28
    37ec:	eb 57       	subi	r30, 0x7B	; 123
    37ee:	ff 4f       	sbci	r31, 0xFF	; 255
    37f0:	60 81       	ld	r22, Z
    37f2:	71 81       	ldd	r23, Z+1	; 0x01
    37f4:	82 81       	ldd	r24, Z+2	; 0x02
    37f6:	93 81       	ldd	r25, Z+3	; 0x03
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	3f ef       	ldi	r19, 0xFF	; 255
    37fc:	4f e7       	ldi	r20, 0x7F	; 127
    37fe:	57 e4       	ldi	r21, 0x47	; 71
    3800:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3804:	18 16       	cp	r1, r24
    3806:	0c f0       	brlt	.+2      	; 0x380a <Parallel_Parking+0x240>
    3808:	43 c0       	rjmp	.+134    	; 0x3890 <Parallel_Parking+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    380a:	fe 01       	movw	r30, r28
    380c:	e7 57       	subi	r30, 0x77	; 119
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	60 81       	ld	r22, Z
    3812:	71 81       	ldd	r23, Z+1	; 0x01
    3814:	82 81       	ldd	r24, Z+2	; 0x02
    3816:	93 81       	ldd	r25, Z+3	; 0x03
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 e2       	ldi	r20, 0x20	; 32
    381e:	51 e4       	ldi	r21, 0x41	; 65
    3820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	8e 01       	movw	r16, r28
    382a:	0d 57       	subi	r16, 0x7D	; 125
    382c:	1f 4f       	sbci	r17, 0xFF	; 255
    382e:	bc 01       	movw	r22, r24
    3830:	cd 01       	movw	r24, r26
    3832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	f8 01       	movw	r30, r16
    383c:	91 83       	std	Z+1, r25	; 0x01
    383e:	80 83       	st	Z, r24
    3840:	1f c0       	rjmp	.+62     	; 0x3880 <Parallel_Parking+0x2b6>
    3842:	fe 01       	movw	r30, r28
    3844:	ef 57       	subi	r30, 0x7F	; 127
    3846:	ff 4f       	sbci	r31, 0xFF	; 255
    3848:	88 ec       	ldi	r24, 0xC8	; 200
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	91 83       	std	Z+1, r25	; 0x01
    384e:	80 83       	st	Z, r24
    3850:	fe 01       	movw	r30, r28
    3852:	ef 57       	subi	r30, 0x7F	; 127
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	80 81       	ld	r24, Z
    3858:	91 81       	ldd	r25, Z+1	; 0x01
    385a:	01 97       	sbiw	r24, 0x01	; 1
    385c:	f1 f7       	brne	.-4      	; 0x385a <Parallel_Parking+0x290>
    385e:	fe 01       	movw	r30, r28
    3860:	ef 57       	subi	r30, 0x7F	; 127
    3862:	ff 4f       	sbci	r31, 0xFF	; 255
    3864:	91 83       	std	Z+1, r25	; 0x01
    3866:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3868:	de 01       	movw	r26, r28
    386a:	ad 57       	subi	r26, 0x7D	; 125
    386c:	bf 4f       	sbci	r27, 0xFF	; 255
    386e:	fe 01       	movw	r30, r28
    3870:	ed 57       	subi	r30, 0x7D	; 125
    3872:	ff 4f       	sbci	r31, 0xFF	; 255
    3874:	80 81       	ld	r24, Z
    3876:	91 81       	ldd	r25, Z+1	; 0x01
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	11 96       	adiw	r26, 0x01	; 1
    387c:	9c 93       	st	X, r25
    387e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3880:	fe 01       	movw	r30, r28
    3882:	ed 57       	subi	r30, 0x7D	; 125
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	80 81       	ld	r24, Z
    3888:	91 81       	ldd	r25, Z+1	; 0x01
    388a:	00 97       	sbiw	r24, 0x00	; 0
    388c:	d1 f6       	brne	.-76     	; 0x3842 <Parallel_Parking+0x278>
    388e:	27 c0       	rjmp	.+78     	; 0x38de <Parallel_Parking+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3890:	8e 01       	movw	r16, r28
    3892:	0d 57       	subi	r16, 0x7D	; 125
    3894:	1f 4f       	sbci	r17, 0xFF	; 255
    3896:	fe 01       	movw	r30, r28
    3898:	eb 57       	subi	r30, 0x7B	; 123
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	60 81       	ld	r22, Z
    389e:	71 81       	ldd	r23, Z+1	; 0x01
    38a0:	82 81       	ldd	r24, Z+2	; 0x02
    38a2:	93 81       	ldd	r25, Z+3	; 0x03
    38a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	f8 01       	movw	r30, r16
    38ae:	91 83       	std	Z+1, r25	; 0x01
    38b0:	80 83       	st	Z, r24
    38b2:	de 01       	movw	r26, r28
    38b4:	a1 58       	subi	r26, 0x81	; 129
    38b6:	bf 4f       	sbci	r27, 0xFF	; 255
    38b8:	fe 01       	movw	r30, r28
    38ba:	ed 57       	subi	r30, 0x7D	; 125
    38bc:	ff 4f       	sbci	r31, 0xFF	; 255
    38be:	80 81       	ld	r24, Z
    38c0:	91 81       	ldd	r25, Z+1	; 0x01
    38c2:	8d 93       	st	X+, r24
    38c4:	9c 93       	st	X, r25
    38c6:	fe 01       	movw	r30, r28
    38c8:	e1 58       	subi	r30, 0x81	; 129
    38ca:	ff 4f       	sbci	r31, 0xFF	; 255
    38cc:	80 81       	ld	r24, Z
    38ce:	91 81       	ldd	r25, Z+1	; 0x01
    38d0:	01 97       	sbiw	r24, 0x01	; 1
    38d2:	f1 f7       	brne	.-4      	; 0x38d0 <Parallel_Parking+0x306>
    38d4:	fe 01       	movw	r30, r28
    38d6:	e1 58       	subi	r30, 0x81	; 129
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	91 83       	std	Z+1, r25	; 0x01
    38dc:	80 83       	st	Z, r24
	_delay_ms(1000);
	UART_voidSendData(45);//set servo 45
    38de:	8d e2       	ldi	r24, 0x2D	; 45
    38e0:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    38e4:	fe 01       	movw	r30, r28
    38e6:	e5 58       	subi	r30, 0x85	; 133
    38e8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	aa ef       	ldi	r26, 0xFA	; 250
    38f0:	b3 e4       	ldi	r27, 0x43	; 67
    38f2:	80 83       	st	Z, r24
    38f4:	91 83       	std	Z+1, r25	; 0x01
    38f6:	a2 83       	std	Z+2, r26	; 0x02
    38f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38fa:	8e 01       	movw	r16, r28
    38fc:	09 58       	subi	r16, 0x89	; 137
    38fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3900:	fe 01       	movw	r30, r28
    3902:	e5 58       	subi	r30, 0x85	; 133
    3904:	ff 4f       	sbci	r31, 0xFF	; 255
    3906:	60 81       	ld	r22, Z
    3908:	71 81       	ldd	r23, Z+1	; 0x01
    390a:	82 81       	ldd	r24, Z+2	; 0x02
    390c:	93 81       	ldd	r25, Z+3	; 0x03
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	4a ef       	ldi	r20, 0xFA	; 250
    3914:	54 e4       	ldi	r21, 0x44	; 68
    3916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	f8 01       	movw	r30, r16
    3920:	80 83       	st	Z, r24
    3922:	91 83       	std	Z+1, r25	; 0x01
    3924:	a2 83       	std	Z+2, r26	; 0x02
    3926:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3928:	fe 01       	movw	r30, r28
    392a:	e9 58       	subi	r30, 0x89	; 137
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	60 81       	ld	r22, Z
    3930:	71 81       	ldd	r23, Z+1	; 0x01
    3932:	82 81       	ldd	r24, Z+2	; 0x02
    3934:	93 81       	ldd	r25, Z+3	; 0x03
    3936:	20 e0       	ldi	r18, 0x00	; 0
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	40 e8       	ldi	r20, 0x80	; 128
    393c:	5f e3       	ldi	r21, 0x3F	; 63
    393e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3942:	88 23       	and	r24, r24
    3944:	44 f4       	brge	.+16     	; 0x3956 <Parallel_Parking+0x38c>
		__ticks = 1;
    3946:	fe 01       	movw	r30, r28
    3948:	eb 58       	subi	r30, 0x8B	; 139
    394a:	ff 4f       	sbci	r31, 0xFF	; 255
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	91 83       	std	Z+1, r25	; 0x01
    3952:	80 83       	st	Z, r24
    3954:	64 c0       	rjmp	.+200    	; 0x3a1e <Parallel_Parking+0x454>
	else if (__tmp > 65535)
    3956:	fe 01       	movw	r30, r28
    3958:	e9 58       	subi	r30, 0x89	; 137
    395a:	ff 4f       	sbci	r31, 0xFF	; 255
    395c:	60 81       	ld	r22, Z
    395e:	71 81       	ldd	r23, Z+1	; 0x01
    3960:	82 81       	ldd	r24, Z+2	; 0x02
    3962:	93 81       	ldd	r25, Z+3	; 0x03
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	3f ef       	ldi	r19, 0xFF	; 255
    3968:	4f e7       	ldi	r20, 0x7F	; 127
    396a:	57 e4       	ldi	r21, 0x47	; 71
    396c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3970:	18 16       	cp	r1, r24
    3972:	0c f0       	brlt	.+2      	; 0x3976 <Parallel_Parking+0x3ac>
    3974:	43 c0       	rjmp	.+134    	; 0x39fc <Parallel_Parking+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3976:	fe 01       	movw	r30, r28
    3978:	e5 58       	subi	r30, 0x85	; 133
    397a:	ff 4f       	sbci	r31, 0xFF	; 255
    397c:	60 81       	ld	r22, Z
    397e:	71 81       	ldd	r23, Z+1	; 0x01
    3980:	82 81       	ldd	r24, Z+2	; 0x02
    3982:	93 81       	ldd	r25, Z+3	; 0x03
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	40 e2       	ldi	r20, 0x20	; 32
    398a:	51 e4       	ldi	r21, 0x41	; 65
    398c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3990:	dc 01       	movw	r26, r24
    3992:	cb 01       	movw	r24, r22
    3994:	8e 01       	movw	r16, r28
    3996:	0b 58       	subi	r16, 0x8B	; 139
    3998:	1f 4f       	sbci	r17, 0xFF	; 255
    399a:	bc 01       	movw	r22, r24
    399c:	cd 01       	movw	r24, r26
    399e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	f8 01       	movw	r30, r16
    39a8:	91 83       	std	Z+1, r25	; 0x01
    39aa:	80 83       	st	Z, r24
    39ac:	1f c0       	rjmp	.+62     	; 0x39ec <Parallel_Parking+0x422>
    39ae:	fe 01       	movw	r30, r28
    39b0:	ed 58       	subi	r30, 0x8D	; 141
    39b2:	ff 4f       	sbci	r31, 0xFF	; 255
    39b4:	88 ec       	ldi	r24, 0xC8	; 200
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	91 83       	std	Z+1, r25	; 0x01
    39ba:	80 83       	st	Z, r24
    39bc:	fe 01       	movw	r30, r28
    39be:	ed 58       	subi	r30, 0x8D	; 141
    39c0:	ff 4f       	sbci	r31, 0xFF	; 255
    39c2:	80 81       	ld	r24, Z
    39c4:	91 81       	ldd	r25, Z+1	; 0x01
    39c6:	01 97       	sbiw	r24, 0x01	; 1
    39c8:	f1 f7       	brne	.-4      	; 0x39c6 <Parallel_Parking+0x3fc>
    39ca:	fe 01       	movw	r30, r28
    39cc:	ed 58       	subi	r30, 0x8D	; 141
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	91 83       	std	Z+1, r25	; 0x01
    39d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d4:	de 01       	movw	r26, r28
    39d6:	ab 58       	subi	r26, 0x8B	; 139
    39d8:	bf 4f       	sbci	r27, 0xFF	; 255
    39da:	fe 01       	movw	r30, r28
    39dc:	eb 58       	subi	r30, 0x8B	; 139
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	80 81       	ld	r24, Z
    39e2:	91 81       	ldd	r25, Z+1	; 0x01
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	11 96       	adiw	r26, 0x01	; 1
    39e8:	9c 93       	st	X, r25
    39ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ec:	fe 01       	movw	r30, r28
    39ee:	eb 58       	subi	r30, 0x8B	; 139
    39f0:	ff 4f       	sbci	r31, 0xFF	; 255
    39f2:	80 81       	ld	r24, Z
    39f4:	91 81       	ldd	r25, Z+1	; 0x01
    39f6:	00 97       	sbiw	r24, 0x00	; 0
    39f8:	d1 f6       	brne	.-76     	; 0x39ae <Parallel_Parking+0x3e4>
    39fa:	27 c0       	rjmp	.+78     	; 0x3a4a <Parallel_Parking+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39fc:	8e 01       	movw	r16, r28
    39fe:	0b 58       	subi	r16, 0x8B	; 139
    3a00:	1f 4f       	sbci	r17, 0xFF	; 255
    3a02:	fe 01       	movw	r30, r28
    3a04:	e9 58       	subi	r30, 0x89	; 137
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	60 81       	ld	r22, Z
    3a0a:	71 81       	ldd	r23, Z+1	; 0x01
    3a0c:	82 81       	ldd	r24, Z+2	; 0x02
    3a0e:	93 81       	ldd	r25, Z+3	; 0x03
    3a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	f8 01       	movw	r30, r16
    3a1a:	91 83       	std	Z+1, r25	; 0x01
    3a1c:	80 83       	st	Z, r24
    3a1e:	de 01       	movw	r26, r28
    3a20:	af 58       	subi	r26, 0x8F	; 143
    3a22:	bf 4f       	sbci	r27, 0xFF	; 255
    3a24:	fe 01       	movw	r30, r28
    3a26:	eb 58       	subi	r30, 0x8B	; 139
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	80 81       	ld	r24, Z
    3a2c:	91 81       	ldd	r25, Z+1	; 0x01
    3a2e:	8d 93       	st	X+, r24
    3a30:	9c 93       	st	X, r25
    3a32:	fe 01       	movw	r30, r28
    3a34:	ef 58       	subi	r30, 0x8F	; 143
    3a36:	ff 4f       	sbci	r31, 0xFF	; 255
    3a38:	80 81       	ld	r24, Z
    3a3a:	91 81       	ldd	r25, Z+1	; 0x01
    3a3c:	01 97       	sbiw	r24, 0x01	; 1
    3a3e:	f1 f7       	brne	.-4      	; 0x3a3c <Parallel_Parking+0x472>
    3a40:	fe 01       	movw	r30, r28
    3a42:	ef 58       	subi	r30, 0x8F	; 143
    3a44:	ff 4f       	sbci	r31, 0xFF	; 255
    3a46:	91 83       	std	Z+1, r25	; 0x01
    3a48:	80 83       	st	Z, r24
	_delay_ms(500);
	MOVE_BACKWORD(PWM_SPEED_OF_MOTOR_TO_PARK);
    3a4a:	8a e5       	ldi	r24, 0x5A	; 90
    3a4c:	0e 94 75 25 	call	0x4aea	; 0x4aea <MOVE_BACKWORD>
	_delay_ms(time_of_first_move_of_parallel_parking*10);//equation done time_of_first_move_of_parallel_parking
    3a50:	80 91 8c 01 	lds	r24, 0x018C
    3a54:	90 91 8d 01 	lds	r25, 0x018D
    3a58:	a0 91 8e 01 	lds	r26, 0x018E
    3a5c:	b0 91 8f 01 	lds	r27, 0x018F
    3a60:	bc 01       	movw	r22, r24
    3a62:	cd 01       	movw	r24, r26
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	40 e2       	ldi	r20, 0x20	; 32
    3a6a:	51 e4       	ldi	r21, 0x41	; 65
    3a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	fe 01       	movw	r30, r28
    3a76:	e3 59       	subi	r30, 0x93	; 147
    3a78:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7a:	80 83       	st	Z, r24
    3a7c:	91 83       	std	Z+1, r25	; 0x01
    3a7e:	a2 83       	std	Z+2, r26	; 0x02
    3a80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a82:	8e 01       	movw	r16, r28
    3a84:	07 59       	subi	r16, 0x97	; 151
    3a86:	1f 4f       	sbci	r17, 0xFF	; 255
    3a88:	fe 01       	movw	r30, r28
    3a8a:	e3 59       	subi	r30, 0x93	; 147
    3a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8e:	60 81       	ld	r22, Z
    3a90:	71 81       	ldd	r23, Z+1	; 0x01
    3a92:	82 81       	ldd	r24, Z+2	; 0x02
    3a94:	93 81       	ldd	r25, Z+3	; 0x03
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	4a ef       	ldi	r20, 0xFA	; 250
    3a9c:	54 e4       	ldi	r21, 0x44	; 68
    3a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	f8 01       	movw	r30, r16
    3aa8:	80 83       	st	Z, r24
    3aaa:	91 83       	std	Z+1, r25	; 0x01
    3aac:	a2 83       	std	Z+2, r26	; 0x02
    3aae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ab0:	fe 01       	movw	r30, r28
    3ab2:	e7 59       	subi	r30, 0x97	; 151
    3ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab6:	60 81       	ld	r22, Z
    3ab8:	71 81       	ldd	r23, Z+1	; 0x01
    3aba:	82 81       	ldd	r24, Z+2	; 0x02
    3abc:	93 81       	ldd	r25, Z+3	; 0x03
    3abe:	20 e0       	ldi	r18, 0x00	; 0
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	40 e8       	ldi	r20, 0x80	; 128
    3ac4:	5f e3       	ldi	r21, 0x3F	; 63
    3ac6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aca:	88 23       	and	r24, r24
    3acc:	44 f4       	brge	.+16     	; 0x3ade <Parallel_Parking+0x514>
		__ticks = 1;
    3ace:	fe 01       	movw	r30, r28
    3ad0:	e9 59       	subi	r30, 0x99	; 153
    3ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	91 83       	std	Z+1, r25	; 0x01
    3ada:	80 83       	st	Z, r24
    3adc:	64 c0       	rjmp	.+200    	; 0x3ba6 <Parallel_Parking+0x5dc>
	else if (__tmp > 65535)
    3ade:	fe 01       	movw	r30, r28
    3ae0:	e7 59       	subi	r30, 0x97	; 151
    3ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae4:	60 81       	ld	r22, Z
    3ae6:	71 81       	ldd	r23, Z+1	; 0x01
    3ae8:	82 81       	ldd	r24, Z+2	; 0x02
    3aea:	93 81       	ldd	r25, Z+3	; 0x03
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	3f ef       	ldi	r19, 0xFF	; 255
    3af0:	4f e7       	ldi	r20, 0x7F	; 127
    3af2:	57 e4       	ldi	r21, 0x47	; 71
    3af4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3af8:	18 16       	cp	r1, r24
    3afa:	0c f0       	brlt	.+2      	; 0x3afe <Parallel_Parking+0x534>
    3afc:	43 c0       	rjmp	.+134    	; 0x3b84 <Parallel_Parking+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3afe:	fe 01       	movw	r30, r28
    3b00:	e3 59       	subi	r30, 0x93	; 147
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	60 81       	ld	r22, Z
    3b06:	71 81       	ldd	r23, Z+1	; 0x01
    3b08:	82 81       	ldd	r24, Z+2	; 0x02
    3b0a:	93 81       	ldd	r25, Z+3	; 0x03
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	40 e2       	ldi	r20, 0x20	; 32
    3b12:	51 e4       	ldi	r21, 0x41	; 65
    3b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	8e 01       	movw	r16, r28
    3b1e:	09 59       	subi	r16, 0x99	; 153
    3b20:	1f 4f       	sbci	r17, 0xFF	; 255
    3b22:	bc 01       	movw	r22, r24
    3b24:	cd 01       	movw	r24, r26
    3b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	f8 01       	movw	r30, r16
    3b30:	91 83       	std	Z+1, r25	; 0x01
    3b32:	80 83       	st	Z, r24
    3b34:	1f c0       	rjmp	.+62     	; 0x3b74 <Parallel_Parking+0x5aa>
    3b36:	fe 01       	movw	r30, r28
    3b38:	eb 59       	subi	r30, 0x9B	; 155
    3b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3c:	88 ec       	ldi	r24, 0xC8	; 200
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	91 83       	std	Z+1, r25	; 0x01
    3b42:	80 83       	st	Z, r24
    3b44:	fe 01       	movw	r30, r28
    3b46:	eb 59       	subi	r30, 0x9B	; 155
    3b48:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4a:	80 81       	ld	r24, Z
    3b4c:	91 81       	ldd	r25, Z+1	; 0x01
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	f1 f7       	brne	.-4      	; 0x3b4e <Parallel_Parking+0x584>
    3b52:	fe 01       	movw	r30, r28
    3b54:	eb 59       	subi	r30, 0x9B	; 155
    3b56:	ff 4f       	sbci	r31, 0xFF	; 255
    3b58:	91 83       	std	Z+1, r25	; 0x01
    3b5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b5c:	de 01       	movw	r26, r28
    3b5e:	a9 59       	subi	r26, 0x99	; 153
    3b60:	bf 4f       	sbci	r27, 0xFF	; 255
    3b62:	fe 01       	movw	r30, r28
    3b64:	e9 59       	subi	r30, 0x99	; 153
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	80 81       	ld	r24, Z
    3b6a:	91 81       	ldd	r25, Z+1	; 0x01
    3b6c:	01 97       	sbiw	r24, 0x01	; 1
    3b6e:	11 96       	adiw	r26, 0x01	; 1
    3b70:	9c 93       	st	X, r25
    3b72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b74:	fe 01       	movw	r30, r28
    3b76:	e9 59       	subi	r30, 0x99	; 153
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	80 81       	ld	r24, Z
    3b7c:	91 81       	ldd	r25, Z+1	; 0x01
    3b7e:	00 97       	sbiw	r24, 0x00	; 0
    3b80:	d1 f6       	brne	.-76     	; 0x3b36 <Parallel_Parking+0x56c>
    3b82:	27 c0       	rjmp	.+78     	; 0x3bd2 <Parallel_Parking+0x608>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b84:	8e 01       	movw	r16, r28
    3b86:	09 59       	subi	r16, 0x99	; 153
    3b88:	1f 4f       	sbci	r17, 0xFF	; 255
    3b8a:	fe 01       	movw	r30, r28
    3b8c:	e7 59       	subi	r30, 0x97	; 151
    3b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b90:	60 81       	ld	r22, Z
    3b92:	71 81       	ldd	r23, Z+1	; 0x01
    3b94:	82 81       	ldd	r24, Z+2	; 0x02
    3b96:	93 81       	ldd	r25, Z+3	; 0x03
    3b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	f8 01       	movw	r30, r16
    3ba2:	91 83       	std	Z+1, r25	; 0x01
    3ba4:	80 83       	st	Z, r24
    3ba6:	de 01       	movw	r26, r28
    3ba8:	ad 59       	subi	r26, 0x9D	; 157
    3baa:	bf 4f       	sbci	r27, 0xFF	; 255
    3bac:	fe 01       	movw	r30, r28
    3bae:	e9 59       	subi	r30, 0x99	; 153
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	80 81       	ld	r24, Z
    3bb4:	91 81       	ldd	r25, Z+1	; 0x01
    3bb6:	8d 93       	st	X+, r24
    3bb8:	9c 93       	st	X, r25
    3bba:	fe 01       	movw	r30, r28
    3bbc:	ed 59       	subi	r30, 0x9D	; 157
    3bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc0:	80 81       	ld	r24, Z
    3bc2:	91 81       	ldd	r25, Z+1	; 0x01
    3bc4:	01 97       	sbiw	r24, 0x01	; 1
    3bc6:	f1 f7       	brne	.-4      	; 0x3bc4 <Parallel_Parking+0x5fa>
    3bc8:	fe 01       	movw	r30, r28
    3bca:	ed 59       	subi	r30, 0x9D	; 157
    3bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bce:	91 83       	std	Z+1, r25	; 0x01
    3bd0:	80 83       	st	Z, r24
	STOP_DC_MOTOR();
    3bd2:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <STOP_DC_MOTOR>
	UART_voidSendData(0);//set servo 0
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e1 5a       	subi	r30, 0xA1	; 161
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	80 e0       	ldi	r24, 0x00	; 0
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	aa e7       	ldi	r26, 0x7A	; 122
    3be8:	b4 e4       	ldi	r27, 0x44	; 68
    3bea:	80 83       	st	Z, r24
    3bec:	91 83       	std	Z+1, r25	; 0x01
    3bee:	a2 83       	std	Z+2, r26	; 0x02
    3bf0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf2:	8e 01       	movw	r16, r28
    3bf4:	05 5a       	subi	r16, 0xA5	; 165
    3bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	e1 5a       	subi	r30, 0xA1	; 161
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	60 81       	ld	r22, Z
    3c00:	71 81       	ldd	r23, Z+1	; 0x01
    3c02:	82 81       	ldd	r24, Z+2	; 0x02
    3c04:	93 81       	ldd	r25, Z+3	; 0x03
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	4a ef       	ldi	r20, 0xFA	; 250
    3c0c:	54 e4       	ldi	r21, 0x44	; 68
    3c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	f8 01       	movw	r30, r16
    3c18:	80 83       	st	Z, r24
    3c1a:	91 83       	std	Z+1, r25	; 0x01
    3c1c:	a2 83       	std	Z+2, r26	; 0x02
    3c1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c20:	fe 01       	movw	r30, r28
    3c22:	e5 5a       	subi	r30, 0xA5	; 165
    3c24:	ff 4f       	sbci	r31, 0xFF	; 255
    3c26:	60 81       	ld	r22, Z
    3c28:	71 81       	ldd	r23, Z+1	; 0x01
    3c2a:	82 81       	ldd	r24, Z+2	; 0x02
    3c2c:	93 81       	ldd	r25, Z+3	; 0x03
    3c2e:	20 e0       	ldi	r18, 0x00	; 0
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	40 e8       	ldi	r20, 0x80	; 128
    3c34:	5f e3       	ldi	r21, 0x3F	; 63
    3c36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c3a:	88 23       	and	r24, r24
    3c3c:	44 f4       	brge	.+16     	; 0x3c4e <Parallel_Parking+0x684>
		__ticks = 1;
    3c3e:	fe 01       	movw	r30, r28
    3c40:	e7 5a       	subi	r30, 0xA7	; 167
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	91 83       	std	Z+1, r25	; 0x01
    3c4a:	80 83       	st	Z, r24
    3c4c:	64 c0       	rjmp	.+200    	; 0x3d16 <Parallel_Parking+0x74c>
	else if (__tmp > 65535)
    3c4e:	fe 01       	movw	r30, r28
    3c50:	e5 5a       	subi	r30, 0xA5	; 165
    3c52:	ff 4f       	sbci	r31, 0xFF	; 255
    3c54:	60 81       	ld	r22, Z
    3c56:	71 81       	ldd	r23, Z+1	; 0x01
    3c58:	82 81       	ldd	r24, Z+2	; 0x02
    3c5a:	93 81       	ldd	r25, Z+3	; 0x03
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	3f ef       	ldi	r19, 0xFF	; 255
    3c60:	4f e7       	ldi	r20, 0x7F	; 127
    3c62:	57 e4       	ldi	r21, 0x47	; 71
    3c64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c68:	18 16       	cp	r1, r24
    3c6a:	0c f0       	brlt	.+2      	; 0x3c6e <Parallel_Parking+0x6a4>
    3c6c:	43 c0       	rjmp	.+134    	; 0x3cf4 <Parallel_Parking+0x72a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c6e:	fe 01       	movw	r30, r28
    3c70:	e1 5a       	subi	r30, 0xA1	; 161
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	60 81       	ld	r22, Z
    3c76:	71 81       	ldd	r23, Z+1	; 0x01
    3c78:	82 81       	ldd	r24, Z+2	; 0x02
    3c7a:	93 81       	ldd	r25, Z+3	; 0x03
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	40 e2       	ldi	r20, 0x20	; 32
    3c82:	51 e4       	ldi	r21, 0x41	; 65
    3c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c88:	dc 01       	movw	r26, r24
    3c8a:	cb 01       	movw	r24, r22
    3c8c:	8e 01       	movw	r16, r28
    3c8e:	07 5a       	subi	r16, 0xA7	; 167
    3c90:	1f 4f       	sbci	r17, 0xFF	; 255
    3c92:	bc 01       	movw	r22, r24
    3c94:	cd 01       	movw	r24, r26
    3c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c9a:	dc 01       	movw	r26, r24
    3c9c:	cb 01       	movw	r24, r22
    3c9e:	f8 01       	movw	r30, r16
    3ca0:	91 83       	std	Z+1, r25	; 0x01
    3ca2:	80 83       	st	Z, r24
    3ca4:	1f c0       	rjmp	.+62     	; 0x3ce4 <Parallel_Parking+0x71a>
    3ca6:	fe 01       	movw	r30, r28
    3ca8:	e9 5a       	subi	r30, 0xA9	; 169
    3caa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cac:	88 ec       	ldi	r24, 0xC8	; 200
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	91 83       	std	Z+1, r25	; 0x01
    3cb2:	80 83       	st	Z, r24
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	e9 5a       	subi	r30, 0xA9	; 169
    3cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cba:	80 81       	ld	r24, Z
    3cbc:	91 81       	ldd	r25, Z+1	; 0x01
    3cbe:	01 97       	sbiw	r24, 0x01	; 1
    3cc0:	f1 f7       	brne	.-4      	; 0x3cbe <Parallel_Parking+0x6f4>
    3cc2:	fe 01       	movw	r30, r28
    3cc4:	e9 5a       	subi	r30, 0xA9	; 169
    3cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc8:	91 83       	std	Z+1, r25	; 0x01
    3cca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ccc:	de 01       	movw	r26, r28
    3cce:	a7 5a       	subi	r26, 0xA7	; 167
    3cd0:	bf 4f       	sbci	r27, 0xFF	; 255
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	e7 5a       	subi	r30, 0xA7	; 167
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	80 81       	ld	r24, Z
    3cda:	91 81       	ldd	r25, Z+1	; 0x01
    3cdc:	01 97       	sbiw	r24, 0x01	; 1
    3cde:	11 96       	adiw	r26, 0x01	; 1
    3ce0:	9c 93       	st	X, r25
    3ce2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	e7 5a       	subi	r30, 0xA7	; 167
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	80 81       	ld	r24, Z
    3cec:	91 81       	ldd	r25, Z+1	; 0x01
    3cee:	00 97       	sbiw	r24, 0x00	; 0
    3cf0:	d1 f6       	brne	.-76     	; 0x3ca6 <Parallel_Parking+0x6dc>
    3cf2:	27 c0       	rjmp	.+78     	; 0x3d42 <Parallel_Parking+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cf4:	8e 01       	movw	r16, r28
    3cf6:	07 5a       	subi	r16, 0xA7	; 167
    3cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	e5 5a       	subi	r30, 0xA5	; 165
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	60 81       	ld	r22, Z
    3d02:	71 81       	ldd	r23, Z+1	; 0x01
    3d04:	82 81       	ldd	r24, Z+2	; 0x02
    3d06:	93 81       	ldd	r25, Z+3	; 0x03
    3d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d0c:	dc 01       	movw	r26, r24
    3d0e:	cb 01       	movw	r24, r22
    3d10:	f8 01       	movw	r30, r16
    3d12:	91 83       	std	Z+1, r25	; 0x01
    3d14:	80 83       	st	Z, r24
    3d16:	de 01       	movw	r26, r28
    3d18:	ab 5a       	subi	r26, 0xAB	; 171
    3d1a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d1c:	fe 01       	movw	r30, r28
    3d1e:	e7 5a       	subi	r30, 0xA7	; 167
    3d20:	ff 4f       	sbci	r31, 0xFF	; 255
    3d22:	80 81       	ld	r24, Z
    3d24:	91 81       	ldd	r25, Z+1	; 0x01
    3d26:	8d 93       	st	X+, r24
    3d28:	9c 93       	st	X, r25
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	eb 5a       	subi	r30, 0xAB	; 171
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	80 81       	ld	r24, Z
    3d32:	91 81       	ldd	r25, Z+1	; 0x01
    3d34:	01 97       	sbiw	r24, 0x01	; 1
    3d36:	f1 f7       	brne	.-4      	; 0x3d34 <Parallel_Parking+0x76a>
    3d38:	fe 01       	movw	r30, r28
    3d3a:	eb 5a       	subi	r30, 0xAB	; 171
    3d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3e:	91 83       	std	Z+1, r25	; 0x01
    3d40:	80 83       	st	Z, r24
	_delay_ms(1000);
	UART_voidSendData(135);//set servo 135
    3d42:	87 e8       	ldi	r24, 0x87	; 135
    3d44:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
	MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
    3d48:	8a e5       	ldi	r24, 0x5A	; 90
    3d4a:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <MOVE_FORWARD>
	_delay_ms(time_of_second_move_of_parallel_parking*10);//equation done time_of_second_move_of_parallel_parking
    3d4e:	80 91 a8 01 	lds	r24, 0x01A8
    3d52:	90 91 a9 01 	lds	r25, 0x01A9
    3d56:	a0 91 aa 01 	lds	r26, 0x01AA
    3d5a:	b0 91 ab 01 	lds	r27, 0x01AB
    3d5e:	bc 01       	movw	r22, r24
    3d60:	cd 01       	movw	r24, r26
    3d62:	20 e0       	ldi	r18, 0x00	; 0
    3d64:	30 e0       	ldi	r19, 0x00	; 0
    3d66:	40 e2       	ldi	r20, 0x20	; 32
    3d68:	51 e4       	ldi	r21, 0x41	; 65
    3d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d6e:	dc 01       	movw	r26, r24
    3d70:	cb 01       	movw	r24, r22
    3d72:	fe 01       	movw	r30, r28
    3d74:	ef 5a       	subi	r30, 0xAF	; 175
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	80 83       	st	Z, r24
    3d7a:	91 83       	std	Z+1, r25	; 0x01
    3d7c:	a2 83       	std	Z+2, r26	; 0x02
    3d7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d80:	8e 01       	movw	r16, r28
    3d82:	03 5b       	subi	r16, 0xB3	; 179
    3d84:	1f 4f       	sbci	r17, 0xFF	; 255
    3d86:	fe 01       	movw	r30, r28
    3d88:	ef 5a       	subi	r30, 0xAF	; 175
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	60 81       	ld	r22, Z
    3d8e:	71 81       	ldd	r23, Z+1	; 0x01
    3d90:	82 81       	ldd	r24, Z+2	; 0x02
    3d92:	93 81       	ldd	r25, Z+3	; 0x03
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	4a ef       	ldi	r20, 0xFA	; 250
    3d9a:	54 e4       	ldi	r21, 0x44	; 68
    3d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da0:	dc 01       	movw	r26, r24
    3da2:	cb 01       	movw	r24, r22
    3da4:	f8 01       	movw	r30, r16
    3da6:	80 83       	st	Z, r24
    3da8:	91 83       	std	Z+1, r25	; 0x01
    3daa:	a2 83       	std	Z+2, r26	; 0x02
    3dac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dae:	fe 01       	movw	r30, r28
    3db0:	e3 5b       	subi	r30, 0xB3	; 179
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	60 81       	ld	r22, Z
    3db6:	71 81       	ldd	r23, Z+1	; 0x01
    3db8:	82 81       	ldd	r24, Z+2	; 0x02
    3dba:	93 81       	ldd	r25, Z+3	; 0x03
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	40 e8       	ldi	r20, 0x80	; 128
    3dc2:	5f e3       	ldi	r21, 0x3F	; 63
    3dc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dc8:	88 23       	and	r24, r24
    3dca:	44 f4       	brge	.+16     	; 0x3ddc <Parallel_Parking+0x812>
		__ticks = 1;
    3dcc:	fe 01       	movw	r30, r28
    3dce:	e5 5b       	subi	r30, 0xB5	; 181
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	91 83       	std	Z+1, r25	; 0x01
    3dd8:	80 83       	st	Z, r24
    3dda:	64 c0       	rjmp	.+200    	; 0x3ea4 <Parallel_Parking+0x8da>
	else if (__tmp > 65535)
    3ddc:	fe 01       	movw	r30, r28
    3dde:	e3 5b       	subi	r30, 0xB3	; 179
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	60 81       	ld	r22, Z
    3de4:	71 81       	ldd	r23, Z+1	; 0x01
    3de6:	82 81       	ldd	r24, Z+2	; 0x02
    3de8:	93 81       	ldd	r25, Z+3	; 0x03
    3dea:	20 e0       	ldi	r18, 0x00	; 0
    3dec:	3f ef       	ldi	r19, 0xFF	; 255
    3dee:	4f e7       	ldi	r20, 0x7F	; 127
    3df0:	57 e4       	ldi	r21, 0x47	; 71
    3df2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3df6:	18 16       	cp	r1, r24
    3df8:	0c f0       	brlt	.+2      	; 0x3dfc <Parallel_Parking+0x832>
    3dfa:	43 c0       	rjmp	.+134    	; 0x3e82 <Parallel_Parking+0x8b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dfc:	fe 01       	movw	r30, r28
    3dfe:	ef 5a       	subi	r30, 0xAF	; 175
    3e00:	ff 4f       	sbci	r31, 0xFF	; 255
    3e02:	60 81       	ld	r22, Z
    3e04:	71 81       	ldd	r23, Z+1	; 0x01
    3e06:	82 81       	ldd	r24, Z+2	; 0x02
    3e08:	93 81       	ldd	r25, Z+3	; 0x03
    3e0a:	20 e0       	ldi	r18, 0x00	; 0
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	40 e2       	ldi	r20, 0x20	; 32
    3e10:	51 e4       	ldi	r21, 0x41	; 65
    3e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e16:	dc 01       	movw	r26, r24
    3e18:	cb 01       	movw	r24, r22
    3e1a:	8e 01       	movw	r16, r28
    3e1c:	05 5b       	subi	r16, 0xB5	; 181
    3e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e20:	bc 01       	movw	r22, r24
    3e22:	cd 01       	movw	r24, r26
    3e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	f8 01       	movw	r30, r16
    3e2e:	91 83       	std	Z+1, r25	; 0x01
    3e30:	80 83       	st	Z, r24
    3e32:	1f c0       	rjmp	.+62     	; 0x3e72 <Parallel_Parking+0x8a8>
    3e34:	fe 01       	movw	r30, r28
    3e36:	e7 5b       	subi	r30, 0xB7	; 183
    3e38:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3a:	88 ec       	ldi	r24, 0xC8	; 200
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	91 83       	std	Z+1, r25	; 0x01
    3e40:	80 83       	st	Z, r24
    3e42:	fe 01       	movw	r30, r28
    3e44:	e7 5b       	subi	r30, 0xB7	; 183
    3e46:	ff 4f       	sbci	r31, 0xFF	; 255
    3e48:	80 81       	ld	r24, Z
    3e4a:	91 81       	ldd	r25, Z+1	; 0x01
    3e4c:	01 97       	sbiw	r24, 0x01	; 1
    3e4e:	f1 f7       	brne	.-4      	; 0x3e4c <Parallel_Parking+0x882>
    3e50:	fe 01       	movw	r30, r28
    3e52:	e7 5b       	subi	r30, 0xB7	; 183
    3e54:	ff 4f       	sbci	r31, 0xFF	; 255
    3e56:	91 83       	std	Z+1, r25	; 0x01
    3e58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e5a:	de 01       	movw	r26, r28
    3e5c:	a5 5b       	subi	r26, 0xB5	; 181
    3e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    3e60:	fe 01       	movw	r30, r28
    3e62:	e5 5b       	subi	r30, 0xB5	; 181
    3e64:	ff 4f       	sbci	r31, 0xFF	; 255
    3e66:	80 81       	ld	r24, Z
    3e68:	91 81       	ldd	r25, Z+1	; 0x01
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	11 96       	adiw	r26, 0x01	; 1
    3e6e:	9c 93       	st	X, r25
    3e70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e72:	fe 01       	movw	r30, r28
    3e74:	e5 5b       	subi	r30, 0xB5	; 181
    3e76:	ff 4f       	sbci	r31, 0xFF	; 255
    3e78:	80 81       	ld	r24, Z
    3e7a:	91 81       	ldd	r25, Z+1	; 0x01
    3e7c:	00 97       	sbiw	r24, 0x00	; 0
    3e7e:	d1 f6       	brne	.-76     	; 0x3e34 <Parallel_Parking+0x86a>
    3e80:	27 c0       	rjmp	.+78     	; 0x3ed0 <Parallel_Parking+0x906>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e82:	8e 01       	movw	r16, r28
    3e84:	05 5b       	subi	r16, 0xB5	; 181
    3e86:	1f 4f       	sbci	r17, 0xFF	; 255
    3e88:	fe 01       	movw	r30, r28
    3e8a:	e3 5b       	subi	r30, 0xB3	; 179
    3e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8e:	60 81       	ld	r22, Z
    3e90:	71 81       	ldd	r23, Z+1	; 0x01
    3e92:	82 81       	ldd	r24, Z+2	; 0x02
    3e94:	93 81       	ldd	r25, Z+3	; 0x03
    3e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	f8 01       	movw	r30, r16
    3ea0:	91 83       	std	Z+1, r25	; 0x01
    3ea2:	80 83       	st	Z, r24
    3ea4:	de 01       	movw	r26, r28
    3ea6:	a9 5b       	subi	r26, 0xB9	; 185
    3ea8:	bf 4f       	sbci	r27, 0xFF	; 255
    3eaa:	fe 01       	movw	r30, r28
    3eac:	e5 5b       	subi	r30, 0xB5	; 181
    3eae:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb0:	80 81       	ld	r24, Z
    3eb2:	91 81       	ldd	r25, Z+1	; 0x01
    3eb4:	8d 93       	st	X+, r24
    3eb6:	9c 93       	st	X, r25
    3eb8:	fe 01       	movw	r30, r28
    3eba:	e9 5b       	subi	r30, 0xB9	; 185
    3ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebe:	80 81       	ld	r24, Z
    3ec0:	91 81       	ldd	r25, Z+1	; 0x01
    3ec2:	01 97       	sbiw	r24, 0x01	; 1
    3ec4:	f1 f7       	brne	.-4      	; 0x3ec2 <Parallel_Parking+0x8f8>
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	e9 5b       	subi	r30, 0xB9	; 185
    3eca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ecc:	91 83       	std	Z+1, r25	; 0x01
    3ece:	80 83       	st	Z, r24
	STOP_DC_MOTOR();
    3ed0:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <STOP_DC_MOTOR>
	UART_voidSendData(0);//set servo 0
    3ed4:	80 e0       	ldi	r24, 0x00	; 0
    3ed6:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    3eda:	fe 01       	movw	r30, r28
    3edc:	ed 5b       	subi	r30, 0xBD	; 189
    3ede:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee0:	80 e0       	ldi	r24, 0x00	; 0
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	aa e7       	ldi	r26, 0x7A	; 122
    3ee6:	b4 e4       	ldi	r27, 0x44	; 68
    3ee8:	80 83       	st	Z, r24
    3eea:	91 83       	std	Z+1, r25	; 0x01
    3eec:	a2 83       	std	Z+2, r26	; 0x02
    3eee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ef0:	8e 01       	movw	r16, r28
    3ef2:	01 5c       	subi	r16, 0xC1	; 193
    3ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ef6:	fe 01       	movw	r30, r28
    3ef8:	ed 5b       	subi	r30, 0xBD	; 189
    3efa:	ff 4f       	sbci	r31, 0xFF	; 255
    3efc:	60 81       	ld	r22, Z
    3efe:	71 81       	ldd	r23, Z+1	; 0x01
    3f00:	82 81       	ldd	r24, Z+2	; 0x02
    3f02:	93 81       	ldd	r25, Z+3	; 0x03
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	4a ef       	ldi	r20, 0xFA	; 250
    3f0a:	54 e4       	ldi	r21, 0x44	; 68
    3f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	f8 01       	movw	r30, r16
    3f16:	80 83       	st	Z, r24
    3f18:	91 83       	std	Z+1, r25	; 0x01
    3f1a:	a2 83       	std	Z+2, r26	; 0x02
    3f1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f1e:	fe 01       	movw	r30, r28
    3f20:	ff 96       	adiw	r30, 0x3f	; 63
    3f22:	60 81       	ld	r22, Z
    3f24:	71 81       	ldd	r23, Z+1	; 0x01
    3f26:	82 81       	ldd	r24, Z+2	; 0x02
    3f28:	93 81       	ldd	r25, Z+3	; 0x03
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	40 e8       	ldi	r20, 0x80	; 128
    3f30:	5f e3       	ldi	r21, 0x3F	; 63
    3f32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f36:	88 23       	and	r24, r24
    3f38:	2c f4       	brge	.+10     	; 0x3f44 <Parallel_Parking+0x97a>
		__ticks = 1;
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	9e af       	std	Y+62, r25	; 0x3e
    3f40:	8d af       	std	Y+61, r24	; 0x3d
    3f42:	46 c0       	rjmp	.+140    	; 0x3fd0 <Parallel_Parking+0xa06>
	else if (__tmp > 65535)
    3f44:	fe 01       	movw	r30, r28
    3f46:	ff 96       	adiw	r30, 0x3f	; 63
    3f48:	60 81       	ld	r22, Z
    3f4a:	71 81       	ldd	r23, Z+1	; 0x01
    3f4c:	82 81       	ldd	r24, Z+2	; 0x02
    3f4e:	93 81       	ldd	r25, Z+3	; 0x03
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	3f ef       	ldi	r19, 0xFF	; 255
    3f54:	4f e7       	ldi	r20, 0x7F	; 127
    3f56:	57 e4       	ldi	r21, 0x47	; 71
    3f58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f5c:	18 16       	cp	r1, r24
    3f5e:	64 f5       	brge	.+88     	; 0x3fb8 <Parallel_Parking+0x9ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f60:	fe 01       	movw	r30, r28
    3f62:	ed 5b       	subi	r30, 0xBD	; 189
    3f64:	ff 4f       	sbci	r31, 0xFF	; 255
    3f66:	60 81       	ld	r22, Z
    3f68:	71 81       	ldd	r23, Z+1	; 0x01
    3f6a:	82 81       	ldd	r24, Z+2	; 0x02
    3f6c:	93 81       	ldd	r25, Z+3	; 0x03
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	40 e2       	ldi	r20, 0x20	; 32
    3f74:	51 e4       	ldi	r21, 0x41	; 65
    3f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7a:	dc 01       	movw	r26, r24
    3f7c:	cb 01       	movw	r24, r22
    3f7e:	bc 01       	movw	r22, r24
    3f80:	cd 01       	movw	r24, r26
    3f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f86:	dc 01       	movw	r26, r24
    3f88:	cb 01       	movw	r24, r22
    3f8a:	9e af       	std	Y+62, r25	; 0x3e
    3f8c:	8d af       	std	Y+61, r24	; 0x3d
    3f8e:	0f c0       	rjmp	.+30     	; 0x3fae <Parallel_Parking+0x9e4>
    3f90:	88 ec       	ldi	r24, 0xC8	; 200
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	9c af       	std	Y+60, r25	; 0x3c
    3f96:	8b af       	std	Y+59, r24	; 0x3b
    3f98:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f9a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f9c:	01 97       	sbiw	r24, 0x01	; 1
    3f9e:	f1 f7       	brne	.-4      	; 0x3f9c <Parallel_Parking+0x9d2>
    3fa0:	9c af       	std	Y+60, r25	; 0x3c
    3fa2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fa6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fa8:	01 97       	sbiw	r24, 0x01	; 1
    3faa:	9e af       	std	Y+62, r25	; 0x3e
    3fac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fae:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fb0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fb2:	00 97       	sbiw	r24, 0x00	; 0
    3fb4:	69 f7       	brne	.-38     	; 0x3f90 <Parallel_Parking+0x9c6>
    3fb6:	16 c0       	rjmp	.+44     	; 0x3fe4 <Parallel_Parking+0xa1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fb8:	fe 01       	movw	r30, r28
    3fba:	ff 96       	adiw	r30, 0x3f	; 63
    3fbc:	60 81       	ld	r22, Z
    3fbe:	71 81       	ldd	r23, Z+1	; 0x01
    3fc0:	82 81       	ldd	r24, Z+2	; 0x02
    3fc2:	93 81       	ldd	r25, Z+3	; 0x03
    3fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
    3fcc:	9e af       	std	Y+62, r25	; 0x3e
    3fce:	8d af       	std	Y+61, r24	; 0x3d
    3fd0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fd2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fd4:	9a af       	std	Y+58, r25	; 0x3a
    3fd6:	89 af       	std	Y+57, r24	; 0x39
    3fd8:	89 ad       	ldd	r24, Y+57	; 0x39
    3fda:	9a ad       	ldd	r25, Y+58	; 0x3a
    3fdc:	01 97       	sbiw	r24, 0x01	; 1
    3fde:	f1 f7       	brne	.-4      	; 0x3fdc <Parallel_Parking+0xa12>
    3fe0:	9a af       	std	Y+58, r25	; 0x3a
    3fe2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	UART_voidSendData(135);//set servo 135
    3fe4:	87 e8       	ldi	r24, 0x87	; 135
    3fe6:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    3fea:	80 e0       	ldi	r24, 0x00	; 0
    3fec:	90 e8       	ldi	r25, 0x80	; 128
    3fee:	ab eb       	ldi	r26, 0xBB	; 187
    3ff0:	b4 e4       	ldi	r27, 0x44	; 68
    3ff2:	8d ab       	std	Y+53, r24	; 0x35
    3ff4:	9e ab       	std	Y+54, r25	; 0x36
    3ff6:	af ab       	std	Y+55, r26	; 0x37
    3ff8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ffa:	6d a9       	ldd	r22, Y+53	; 0x35
    3ffc:	7e a9       	ldd	r23, Y+54	; 0x36
    3ffe:	8f a9       	ldd	r24, Y+55	; 0x37
    4000:	98 ad       	ldd	r25, Y+56	; 0x38
    4002:	20 e0       	ldi	r18, 0x00	; 0
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	4a ef       	ldi	r20, 0xFA	; 250
    4008:	54 e4       	ldi	r21, 0x44	; 68
    400a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	89 ab       	std	Y+49, r24	; 0x31
    4014:	9a ab       	std	Y+50, r25	; 0x32
    4016:	ab ab       	std	Y+51, r26	; 0x33
    4018:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    401a:	69 a9       	ldd	r22, Y+49	; 0x31
    401c:	7a a9       	ldd	r23, Y+50	; 0x32
    401e:	8b a9       	ldd	r24, Y+51	; 0x33
    4020:	9c a9       	ldd	r25, Y+52	; 0x34
    4022:	20 e0       	ldi	r18, 0x00	; 0
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	40 e8       	ldi	r20, 0x80	; 128
    4028:	5f e3       	ldi	r21, 0x3F	; 63
    402a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    402e:	88 23       	and	r24, r24
    4030:	2c f4       	brge	.+10     	; 0x403c <Parallel_Parking+0xa72>
		__ticks = 1;
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	98 ab       	std	Y+48, r25	; 0x30
    4038:	8f a7       	std	Y+47, r24	; 0x2f
    403a:	3f c0       	rjmp	.+126    	; 0x40ba <Parallel_Parking+0xaf0>
	else if (__tmp > 65535)
    403c:	69 a9       	ldd	r22, Y+49	; 0x31
    403e:	7a a9       	ldd	r23, Y+50	; 0x32
    4040:	8b a9       	ldd	r24, Y+51	; 0x33
    4042:	9c a9       	ldd	r25, Y+52	; 0x34
    4044:	20 e0       	ldi	r18, 0x00	; 0
    4046:	3f ef       	ldi	r19, 0xFF	; 255
    4048:	4f e7       	ldi	r20, 0x7F	; 127
    404a:	57 e4       	ldi	r21, 0x47	; 71
    404c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4050:	18 16       	cp	r1, r24
    4052:	4c f5       	brge	.+82     	; 0x40a6 <Parallel_Parking+0xadc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4054:	6d a9       	ldd	r22, Y+53	; 0x35
    4056:	7e a9       	ldd	r23, Y+54	; 0x36
    4058:	8f a9       	ldd	r24, Y+55	; 0x37
    405a:	98 ad       	ldd	r25, Y+56	; 0x38
    405c:	20 e0       	ldi	r18, 0x00	; 0
    405e:	30 e0       	ldi	r19, 0x00	; 0
    4060:	40 e2       	ldi	r20, 0x20	; 32
    4062:	51 e4       	ldi	r21, 0x41	; 65
    4064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4068:	dc 01       	movw	r26, r24
    406a:	cb 01       	movw	r24, r22
    406c:	bc 01       	movw	r22, r24
    406e:	cd 01       	movw	r24, r26
    4070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4074:	dc 01       	movw	r26, r24
    4076:	cb 01       	movw	r24, r22
    4078:	98 ab       	std	Y+48, r25	; 0x30
    407a:	8f a7       	std	Y+47, r24	; 0x2f
    407c:	0f c0       	rjmp	.+30     	; 0x409c <Parallel_Parking+0xad2>
    407e:	88 ec       	ldi	r24, 0xC8	; 200
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	9e a7       	std	Y+46, r25	; 0x2e
    4084:	8d a7       	std	Y+45, r24	; 0x2d
    4086:	8d a5       	ldd	r24, Y+45	; 0x2d
    4088:	9e a5       	ldd	r25, Y+46	; 0x2e
    408a:	01 97       	sbiw	r24, 0x01	; 1
    408c:	f1 f7       	brne	.-4      	; 0x408a <Parallel_Parking+0xac0>
    408e:	9e a7       	std	Y+46, r25	; 0x2e
    4090:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4092:	8f a5       	ldd	r24, Y+47	; 0x2f
    4094:	98 a9       	ldd	r25, Y+48	; 0x30
    4096:	01 97       	sbiw	r24, 0x01	; 1
    4098:	98 ab       	std	Y+48, r25	; 0x30
    409a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    409c:	8f a5       	ldd	r24, Y+47	; 0x2f
    409e:	98 a9       	ldd	r25, Y+48	; 0x30
    40a0:	00 97       	sbiw	r24, 0x00	; 0
    40a2:	69 f7       	brne	.-38     	; 0x407e <Parallel_Parking+0xab4>
    40a4:	14 c0       	rjmp	.+40     	; 0x40ce <Parallel_Parking+0xb04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a6:	69 a9       	ldd	r22, Y+49	; 0x31
    40a8:	7a a9       	ldd	r23, Y+50	; 0x32
    40aa:	8b a9       	ldd	r24, Y+51	; 0x33
    40ac:	9c a9       	ldd	r25, Y+52	; 0x34
    40ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b2:	dc 01       	movw	r26, r24
    40b4:	cb 01       	movw	r24, r22
    40b6:	98 ab       	std	Y+48, r25	; 0x30
    40b8:	8f a7       	std	Y+47, r24	; 0x2f
    40ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    40bc:	98 a9       	ldd	r25, Y+48	; 0x30
    40be:	9c a7       	std	Y+44, r25	; 0x2c
    40c0:	8b a7       	std	Y+43, r24	; 0x2b
    40c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    40c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    40c6:	01 97       	sbiw	r24, 0x01	; 1
    40c8:	f1 f7       	brne	.-4      	; 0x40c6 <Parallel_Parking+0xafc>
    40ca:	9c a7       	std	Y+44, r25	; 0x2c
    40cc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1500);
	MOVE_BACKWORD(PWM_SPEED_OF_MOTOR_TO_PARK);
    40ce:	8a e5       	ldi	r24, 0x5A	; 90
    40d0:	0e 94 75 25 	call	0x4aea	; 0x4aea <MOVE_BACKWORD>
	_delay_ms(time_of_third_move_of_parallel_parking*10);//equation done time_of_third _move_back_of_parallel_parking
    40d4:	80 91 a4 01 	lds	r24, 0x01A4
    40d8:	90 91 a5 01 	lds	r25, 0x01A5
    40dc:	a0 91 a6 01 	lds	r26, 0x01A6
    40e0:	b0 91 a7 01 	lds	r27, 0x01A7
    40e4:	bc 01       	movw	r22, r24
    40e6:	cd 01       	movw	r24, r26
    40e8:	20 e0       	ldi	r18, 0x00	; 0
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	40 e2       	ldi	r20, 0x20	; 32
    40ee:	51 e4       	ldi	r21, 0x41	; 65
    40f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f4:	dc 01       	movw	r26, r24
    40f6:	cb 01       	movw	r24, r22
    40f8:	8f a3       	std	Y+39, r24	; 0x27
    40fa:	98 a7       	std	Y+40, r25	; 0x28
    40fc:	a9 a7       	std	Y+41, r26	; 0x29
    40fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4100:	6f a1       	ldd	r22, Y+39	; 0x27
    4102:	78 a5       	ldd	r23, Y+40	; 0x28
    4104:	89 a5       	ldd	r24, Y+41	; 0x29
    4106:	9a a5       	ldd	r25, Y+42	; 0x2a
    4108:	20 e0       	ldi	r18, 0x00	; 0
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	4a ef       	ldi	r20, 0xFA	; 250
    410e:	54 e4       	ldi	r21, 0x44	; 68
    4110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4114:	dc 01       	movw	r26, r24
    4116:	cb 01       	movw	r24, r22
    4118:	8b a3       	std	Y+35, r24	; 0x23
    411a:	9c a3       	std	Y+36, r25	; 0x24
    411c:	ad a3       	std	Y+37, r26	; 0x25
    411e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4120:	6b a1       	ldd	r22, Y+35	; 0x23
    4122:	7c a1       	ldd	r23, Y+36	; 0x24
    4124:	8d a1       	ldd	r24, Y+37	; 0x25
    4126:	9e a1       	ldd	r25, Y+38	; 0x26
    4128:	20 e0       	ldi	r18, 0x00	; 0
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	40 e8       	ldi	r20, 0x80	; 128
    412e:	5f e3       	ldi	r21, 0x3F	; 63
    4130:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4134:	88 23       	and	r24, r24
    4136:	2c f4       	brge	.+10     	; 0x4142 <Parallel_Parking+0xb78>
		__ticks = 1;
    4138:	81 e0       	ldi	r24, 0x01	; 1
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	9a a3       	std	Y+34, r25	; 0x22
    413e:	89 a3       	std	Y+33, r24	; 0x21
    4140:	3f c0       	rjmp	.+126    	; 0x41c0 <Parallel_Parking+0xbf6>
	else if (__tmp > 65535)
    4142:	6b a1       	ldd	r22, Y+35	; 0x23
    4144:	7c a1       	ldd	r23, Y+36	; 0x24
    4146:	8d a1       	ldd	r24, Y+37	; 0x25
    4148:	9e a1       	ldd	r25, Y+38	; 0x26
    414a:	20 e0       	ldi	r18, 0x00	; 0
    414c:	3f ef       	ldi	r19, 0xFF	; 255
    414e:	4f e7       	ldi	r20, 0x7F	; 127
    4150:	57 e4       	ldi	r21, 0x47	; 71
    4152:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4156:	18 16       	cp	r1, r24
    4158:	4c f5       	brge	.+82     	; 0x41ac <Parallel_Parking+0xbe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    415a:	6f a1       	ldd	r22, Y+39	; 0x27
    415c:	78 a5       	ldd	r23, Y+40	; 0x28
    415e:	89 a5       	ldd	r24, Y+41	; 0x29
    4160:	9a a5       	ldd	r25, Y+42	; 0x2a
    4162:	20 e0       	ldi	r18, 0x00	; 0
    4164:	30 e0       	ldi	r19, 0x00	; 0
    4166:	40 e2       	ldi	r20, 0x20	; 32
    4168:	51 e4       	ldi	r21, 0x41	; 65
    416a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	bc 01       	movw	r22, r24
    4174:	cd 01       	movw	r24, r26
    4176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    417a:	dc 01       	movw	r26, r24
    417c:	cb 01       	movw	r24, r22
    417e:	9a a3       	std	Y+34, r25	; 0x22
    4180:	89 a3       	std	Y+33, r24	; 0x21
    4182:	0f c0       	rjmp	.+30     	; 0x41a2 <Parallel_Parking+0xbd8>
    4184:	88 ec       	ldi	r24, 0xC8	; 200
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	98 a3       	std	Y+32, r25	; 0x20
    418a:	8f 8f       	std	Y+31, r24	; 0x1f
    418c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    418e:	98 a1       	ldd	r25, Y+32	; 0x20
    4190:	01 97       	sbiw	r24, 0x01	; 1
    4192:	f1 f7       	brne	.-4      	; 0x4190 <Parallel_Parking+0xbc6>
    4194:	98 a3       	std	Y+32, r25	; 0x20
    4196:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4198:	89 a1       	ldd	r24, Y+33	; 0x21
    419a:	9a a1       	ldd	r25, Y+34	; 0x22
    419c:	01 97       	sbiw	r24, 0x01	; 1
    419e:	9a a3       	std	Y+34, r25	; 0x22
    41a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41a2:	89 a1       	ldd	r24, Y+33	; 0x21
    41a4:	9a a1       	ldd	r25, Y+34	; 0x22
    41a6:	00 97       	sbiw	r24, 0x00	; 0
    41a8:	69 f7       	brne	.-38     	; 0x4184 <Parallel_Parking+0xbba>
    41aa:	14 c0       	rjmp	.+40     	; 0x41d4 <Parallel_Parking+0xc0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ac:	6b a1       	ldd	r22, Y+35	; 0x23
    41ae:	7c a1       	ldd	r23, Y+36	; 0x24
    41b0:	8d a1       	ldd	r24, Y+37	; 0x25
    41b2:	9e a1       	ldd	r25, Y+38	; 0x26
    41b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	9a a3       	std	Y+34, r25	; 0x22
    41be:	89 a3       	std	Y+33, r24	; 0x21
    41c0:	89 a1       	ldd	r24, Y+33	; 0x21
    41c2:	9a a1       	ldd	r25, Y+34	; 0x22
    41c4:	9e 8f       	std	Y+30, r25	; 0x1e
    41c6:	8d 8f       	std	Y+29, r24	; 0x1d
    41c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41cc:	01 97       	sbiw	r24, 0x01	; 1
    41ce:	f1 f7       	brne	.-4      	; 0x41cc <Parallel_Parking+0xc02>
    41d0:	9e 8f       	std	Y+30, r25	; 0x1e
    41d2:	8d 8f       	std	Y+29, r24	; 0x1d
	STOP_DC_MOTOR();
    41d4:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <STOP_DC_MOTOR>
	UART_voidSendData(0);//set servo 0
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    41de:	80 e0       	ldi	r24, 0x00	; 0
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	aa e7       	ldi	r26, 0x7A	; 122
    41e4:	b4 e4       	ldi	r27, 0x44	; 68
    41e6:	89 8f       	std	Y+25, r24	; 0x19
    41e8:	9a 8f       	std	Y+26, r25	; 0x1a
    41ea:	ab 8f       	std	Y+27, r26	; 0x1b
    41ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ee:	69 8d       	ldd	r22, Y+25	; 0x19
    41f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41f6:	20 e0       	ldi	r18, 0x00	; 0
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	4a ef       	ldi	r20, 0xFA	; 250
    41fc:	54 e4       	ldi	r21, 0x44	; 68
    41fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4202:	dc 01       	movw	r26, r24
    4204:	cb 01       	movw	r24, r22
    4206:	8d 8b       	std	Y+21, r24	; 0x15
    4208:	9e 8b       	std	Y+22, r25	; 0x16
    420a:	af 8b       	std	Y+23, r26	; 0x17
    420c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    420e:	6d 89       	ldd	r22, Y+21	; 0x15
    4210:	7e 89       	ldd	r23, Y+22	; 0x16
    4212:	8f 89       	ldd	r24, Y+23	; 0x17
    4214:	98 8d       	ldd	r25, Y+24	; 0x18
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	40 e8       	ldi	r20, 0x80	; 128
    421c:	5f e3       	ldi	r21, 0x3F	; 63
    421e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4222:	88 23       	and	r24, r24
    4224:	2c f4       	brge	.+10     	; 0x4230 <Parallel_Parking+0xc66>
		__ticks = 1;
    4226:	81 e0       	ldi	r24, 0x01	; 1
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	9c 8b       	std	Y+20, r25	; 0x14
    422c:	8b 8b       	std	Y+19, r24	; 0x13
    422e:	3f c0       	rjmp	.+126    	; 0x42ae <Parallel_Parking+0xce4>
	else if (__tmp > 65535)
    4230:	6d 89       	ldd	r22, Y+21	; 0x15
    4232:	7e 89       	ldd	r23, Y+22	; 0x16
    4234:	8f 89       	ldd	r24, Y+23	; 0x17
    4236:	98 8d       	ldd	r25, Y+24	; 0x18
    4238:	20 e0       	ldi	r18, 0x00	; 0
    423a:	3f ef       	ldi	r19, 0xFF	; 255
    423c:	4f e7       	ldi	r20, 0x7F	; 127
    423e:	57 e4       	ldi	r21, 0x47	; 71
    4240:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4244:	18 16       	cp	r1, r24
    4246:	4c f5       	brge	.+82     	; 0x429a <Parallel_Parking+0xcd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4248:	69 8d       	ldd	r22, Y+25	; 0x19
    424a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    424c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    424e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4250:	20 e0       	ldi	r18, 0x00	; 0
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	40 e2       	ldi	r20, 0x20	; 32
    4256:	51 e4       	ldi	r21, 0x41	; 65
    4258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	bc 01       	movw	r22, r24
    4262:	cd 01       	movw	r24, r26
    4264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4268:	dc 01       	movw	r26, r24
    426a:	cb 01       	movw	r24, r22
    426c:	9c 8b       	std	Y+20, r25	; 0x14
    426e:	8b 8b       	std	Y+19, r24	; 0x13
    4270:	0f c0       	rjmp	.+30     	; 0x4290 <Parallel_Parking+0xcc6>
    4272:	88 ec       	ldi	r24, 0xC8	; 200
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	9a 8b       	std	Y+18, r25	; 0x12
    4278:	89 8b       	std	Y+17, r24	; 0x11
    427a:	89 89       	ldd	r24, Y+17	; 0x11
    427c:	9a 89       	ldd	r25, Y+18	; 0x12
    427e:	01 97       	sbiw	r24, 0x01	; 1
    4280:	f1 f7       	brne	.-4      	; 0x427e <Parallel_Parking+0xcb4>
    4282:	9a 8b       	std	Y+18, r25	; 0x12
    4284:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4286:	8b 89       	ldd	r24, Y+19	; 0x13
    4288:	9c 89       	ldd	r25, Y+20	; 0x14
    428a:	01 97       	sbiw	r24, 0x01	; 1
    428c:	9c 8b       	std	Y+20, r25	; 0x14
    428e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4290:	8b 89       	ldd	r24, Y+19	; 0x13
    4292:	9c 89       	ldd	r25, Y+20	; 0x14
    4294:	00 97       	sbiw	r24, 0x00	; 0
    4296:	69 f7       	brne	.-38     	; 0x4272 <Parallel_Parking+0xca8>
    4298:	14 c0       	rjmp	.+40     	; 0x42c2 <Parallel_Parking+0xcf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    429a:	6d 89       	ldd	r22, Y+21	; 0x15
    429c:	7e 89       	ldd	r23, Y+22	; 0x16
    429e:	8f 89       	ldd	r24, Y+23	; 0x17
    42a0:	98 8d       	ldd	r25, Y+24	; 0x18
    42a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a6:	dc 01       	movw	r26, r24
    42a8:	cb 01       	movw	r24, r22
    42aa:	9c 8b       	std	Y+20, r25	; 0x14
    42ac:	8b 8b       	std	Y+19, r24	; 0x13
    42ae:	8b 89       	ldd	r24, Y+19	; 0x13
    42b0:	9c 89       	ldd	r25, Y+20	; 0x14
    42b2:	98 8b       	std	Y+16, r25	; 0x10
    42b4:	8f 87       	std	Y+15, r24	; 0x0f
    42b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    42b8:	98 89       	ldd	r25, Y+16	; 0x10
    42ba:	01 97       	sbiw	r24, 0x01	; 1
    42bc:	f1 f7       	brne	.-4      	; 0x42ba <Parallel_Parking+0xcf0>
    42be:	98 8b       	std	Y+16, r25	; 0x10
    42c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
    42c2:	8a e5       	ldi	r24, 0x5A	; 90
    42c4:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <MOVE_FORWARD>
	_delay_ms(time_of_fourth_move_of_parallel_parking*10);//equation done time_of_fourth_move_back_of_parallel_parking
    42c8:	80 91 86 01 	lds	r24, 0x0186
    42cc:	90 91 87 01 	lds	r25, 0x0187
    42d0:	a0 91 88 01 	lds	r26, 0x0188
    42d4:	b0 91 89 01 	lds	r27, 0x0189
    42d8:	bc 01       	movw	r22, r24
    42da:	cd 01       	movw	r24, r26
    42dc:	20 e0       	ldi	r18, 0x00	; 0
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	40 e2       	ldi	r20, 0x20	; 32
    42e2:	51 e4       	ldi	r21, 0x41	; 65
    42e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42e8:	dc 01       	movw	r26, r24
    42ea:	cb 01       	movw	r24, r22
    42ec:	8b 87       	std	Y+11, r24	; 0x0b
    42ee:	9c 87       	std	Y+12, r25	; 0x0c
    42f0:	ad 87       	std	Y+13, r26	; 0x0d
    42f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    42f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    42f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    42fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	4a ef       	ldi	r20, 0xFA	; 250
    4302:	54 e4       	ldi	r21, 0x44	; 68
    4304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4308:	dc 01       	movw	r26, r24
    430a:	cb 01       	movw	r24, r22
    430c:	8f 83       	std	Y+7, r24	; 0x07
    430e:	98 87       	std	Y+8, r25	; 0x08
    4310:	a9 87       	std	Y+9, r26	; 0x09
    4312:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4314:	6f 81       	ldd	r22, Y+7	; 0x07
    4316:	78 85       	ldd	r23, Y+8	; 0x08
    4318:	89 85       	ldd	r24, Y+9	; 0x09
    431a:	9a 85       	ldd	r25, Y+10	; 0x0a
    431c:	20 e0       	ldi	r18, 0x00	; 0
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	40 e8       	ldi	r20, 0x80	; 128
    4322:	5f e3       	ldi	r21, 0x3F	; 63
    4324:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4328:	88 23       	and	r24, r24
    432a:	2c f4       	brge	.+10     	; 0x4336 <Parallel_Parking+0xd6c>
		__ticks = 1;
    432c:	81 e0       	ldi	r24, 0x01	; 1
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	9e 83       	std	Y+6, r25	; 0x06
    4332:	8d 83       	std	Y+5, r24	; 0x05
    4334:	3f c0       	rjmp	.+126    	; 0x43b4 <Parallel_Parking+0xdea>
	else if (__tmp > 65535)
    4336:	6f 81       	ldd	r22, Y+7	; 0x07
    4338:	78 85       	ldd	r23, Y+8	; 0x08
    433a:	89 85       	ldd	r24, Y+9	; 0x09
    433c:	9a 85       	ldd	r25, Y+10	; 0x0a
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	3f ef       	ldi	r19, 0xFF	; 255
    4342:	4f e7       	ldi	r20, 0x7F	; 127
    4344:	57 e4       	ldi	r21, 0x47	; 71
    4346:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    434a:	18 16       	cp	r1, r24
    434c:	4c f5       	brge	.+82     	; 0x43a0 <Parallel_Parking+0xdd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    434e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4350:	7c 85       	ldd	r23, Y+12	; 0x0c
    4352:	8d 85       	ldd	r24, Y+13	; 0x0d
    4354:	9e 85       	ldd	r25, Y+14	; 0x0e
    4356:	20 e0       	ldi	r18, 0x00	; 0
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	40 e2       	ldi	r20, 0x20	; 32
    435c:	51 e4       	ldi	r21, 0x41	; 65
    435e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4362:	dc 01       	movw	r26, r24
    4364:	cb 01       	movw	r24, r22
    4366:	bc 01       	movw	r22, r24
    4368:	cd 01       	movw	r24, r26
    436a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    436e:	dc 01       	movw	r26, r24
    4370:	cb 01       	movw	r24, r22
    4372:	9e 83       	std	Y+6, r25	; 0x06
    4374:	8d 83       	std	Y+5, r24	; 0x05
    4376:	0f c0       	rjmp	.+30     	; 0x4396 <Parallel_Parking+0xdcc>
    4378:	88 ec       	ldi	r24, 0xC8	; 200
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	9c 83       	std	Y+4, r25	; 0x04
    437e:	8b 83       	std	Y+3, r24	; 0x03
    4380:	8b 81       	ldd	r24, Y+3	; 0x03
    4382:	9c 81       	ldd	r25, Y+4	; 0x04
    4384:	01 97       	sbiw	r24, 0x01	; 1
    4386:	f1 f7       	brne	.-4      	; 0x4384 <Parallel_Parking+0xdba>
    4388:	9c 83       	std	Y+4, r25	; 0x04
    438a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    438c:	8d 81       	ldd	r24, Y+5	; 0x05
    438e:	9e 81       	ldd	r25, Y+6	; 0x06
    4390:	01 97       	sbiw	r24, 0x01	; 1
    4392:	9e 83       	std	Y+6, r25	; 0x06
    4394:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4396:	8d 81       	ldd	r24, Y+5	; 0x05
    4398:	9e 81       	ldd	r25, Y+6	; 0x06
    439a:	00 97       	sbiw	r24, 0x00	; 0
    439c:	69 f7       	brne	.-38     	; 0x4378 <Parallel_Parking+0xdae>
    439e:	14 c0       	rjmp	.+40     	; 0x43c8 <Parallel_Parking+0xdfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a0:	6f 81       	ldd	r22, Y+7	; 0x07
    43a2:	78 85       	ldd	r23, Y+8	; 0x08
    43a4:	89 85       	ldd	r24, Y+9	; 0x09
    43a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ac:	dc 01       	movw	r26, r24
    43ae:	cb 01       	movw	r24, r22
    43b0:	9e 83       	std	Y+6, r25	; 0x06
    43b2:	8d 83       	std	Y+5, r24	; 0x05
    43b4:	8d 81       	ldd	r24, Y+5	; 0x05
    43b6:	9e 81       	ldd	r25, Y+6	; 0x06
    43b8:	9a 83       	std	Y+2, r25	; 0x02
    43ba:	89 83       	std	Y+1, r24	; 0x01
    43bc:	89 81       	ldd	r24, Y+1	; 0x01
    43be:	9a 81       	ldd	r25, Y+2	; 0x02
    43c0:	01 97       	sbiw	r24, 0x01	; 1
    43c2:	f1 f7       	brne	.-4      	; 0x43c0 <Parallel_Parking+0xdf6>
    43c4:	9a 83       	std	Y+2, r25	; 0x02
    43c6:	89 83       	std	Y+1, r24	; 0x01
	STOP_DC_MOTOR();
    43c8:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <STOP_DC_MOTOR>
}
    43cc:	c6 56       	subi	r28, 0x66	; 102
    43ce:	df 4f       	sbci	r29, 0xFF	; 255
    43d0:	0f b6       	in	r0, 0x3f	; 63
    43d2:	f8 94       	cli
    43d4:	de bf       	out	0x3e, r29	; 62
    43d6:	0f be       	out	0x3f, r0	; 63
    43d8:	cd bf       	out	0x3d, r28	; 61
    43da:	cf 91       	pop	r28
    43dc:	df 91       	pop	r29
    43de:	1f 91       	pop	r17
    43e0:	0f 91       	pop	r16
    43e2:	08 95       	ret

000043e4 <ExitParallel>:
void ExitParallel(void)
{
    43e4:	0f 93       	push	r16
    43e6:	1f 93       	push	r17
    43e8:	df 93       	push	r29
    43ea:	cf 93       	push	r28
    43ec:	cd b7       	in	r28, 0x3d	; 61
    43ee:	de b7       	in	r29, 0x3e	; 62
    43f0:	c4 55       	subi	r28, 0x54	; 84
    43f2:	d0 40       	sbci	r29, 0x00	; 0
    43f4:	0f b6       	in	r0, 0x3f	; 63
    43f6:	f8 94       	cli
    43f8:	de bf       	out	0x3e, r29	; 62
    43fa:	0f be       	out	0x3f, r0	; 63
    43fc:	cd bf       	out	0x3d, r28	; 61

	UART_voidSendData(135);//set servo 135
    43fe:	87 e8       	ldi	r24, 0x87	; 135
    4400:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    4404:	fe 01       	movw	r30, r28
    4406:	ef 5a       	subi	r30, 0xAF	; 175
    4408:	ff 4f       	sbci	r31, 0xFF	; 255
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	90 e8       	ldi	r25, 0x80	; 128
    440e:	ab eb       	ldi	r26, 0xBB	; 187
    4410:	b4 e4       	ldi	r27, 0x44	; 68
    4412:	80 83       	st	Z, r24
    4414:	91 83       	std	Z+1, r25	; 0x01
    4416:	a2 83       	std	Z+2, r26	; 0x02
    4418:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    441a:	8e 01       	movw	r16, r28
    441c:	03 5b       	subi	r16, 0xB3	; 179
    441e:	1f 4f       	sbci	r17, 0xFF	; 255
    4420:	fe 01       	movw	r30, r28
    4422:	ef 5a       	subi	r30, 0xAF	; 175
    4424:	ff 4f       	sbci	r31, 0xFF	; 255
    4426:	60 81       	ld	r22, Z
    4428:	71 81       	ldd	r23, Z+1	; 0x01
    442a:	82 81       	ldd	r24, Z+2	; 0x02
    442c:	93 81       	ldd	r25, Z+3	; 0x03
    442e:	20 e0       	ldi	r18, 0x00	; 0
    4430:	30 e0       	ldi	r19, 0x00	; 0
    4432:	4a ef       	ldi	r20, 0xFA	; 250
    4434:	54 e4       	ldi	r21, 0x44	; 68
    4436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    443a:	dc 01       	movw	r26, r24
    443c:	cb 01       	movw	r24, r22
    443e:	f8 01       	movw	r30, r16
    4440:	80 83       	st	Z, r24
    4442:	91 83       	std	Z+1, r25	; 0x01
    4444:	a2 83       	std	Z+2, r26	; 0x02
    4446:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4448:	fe 01       	movw	r30, r28
    444a:	e3 5b       	subi	r30, 0xB3	; 179
    444c:	ff 4f       	sbci	r31, 0xFF	; 255
    444e:	60 81       	ld	r22, Z
    4450:	71 81       	ldd	r23, Z+1	; 0x01
    4452:	82 81       	ldd	r24, Z+2	; 0x02
    4454:	93 81       	ldd	r25, Z+3	; 0x03
    4456:	20 e0       	ldi	r18, 0x00	; 0
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	40 e8       	ldi	r20, 0x80	; 128
    445c:	5f e3       	ldi	r21, 0x3F	; 63
    445e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4462:	88 23       	and	r24, r24
    4464:	44 f4       	brge	.+16     	; 0x4476 <ExitParallel+0x92>
		__ticks = 1;
    4466:	fe 01       	movw	r30, r28
    4468:	e5 5b       	subi	r30, 0xB5	; 181
    446a:	ff 4f       	sbci	r31, 0xFF	; 255
    446c:	81 e0       	ldi	r24, 0x01	; 1
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	91 83       	std	Z+1, r25	; 0x01
    4472:	80 83       	st	Z, r24
    4474:	64 c0       	rjmp	.+200    	; 0x453e <ExitParallel+0x15a>
	else if (__tmp > 65535)
    4476:	fe 01       	movw	r30, r28
    4478:	e3 5b       	subi	r30, 0xB3	; 179
    447a:	ff 4f       	sbci	r31, 0xFF	; 255
    447c:	60 81       	ld	r22, Z
    447e:	71 81       	ldd	r23, Z+1	; 0x01
    4480:	82 81       	ldd	r24, Z+2	; 0x02
    4482:	93 81       	ldd	r25, Z+3	; 0x03
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	3f ef       	ldi	r19, 0xFF	; 255
    4488:	4f e7       	ldi	r20, 0x7F	; 127
    448a:	57 e4       	ldi	r21, 0x47	; 71
    448c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4490:	18 16       	cp	r1, r24
    4492:	0c f0       	brlt	.+2      	; 0x4496 <ExitParallel+0xb2>
    4494:	43 c0       	rjmp	.+134    	; 0x451c <ExitParallel+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4496:	fe 01       	movw	r30, r28
    4498:	ef 5a       	subi	r30, 0xAF	; 175
    449a:	ff 4f       	sbci	r31, 0xFF	; 255
    449c:	60 81       	ld	r22, Z
    449e:	71 81       	ldd	r23, Z+1	; 0x01
    44a0:	82 81       	ldd	r24, Z+2	; 0x02
    44a2:	93 81       	ldd	r25, Z+3	; 0x03
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	40 e2       	ldi	r20, 0x20	; 32
    44aa:	51 e4       	ldi	r21, 0x41	; 65
    44ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b0:	dc 01       	movw	r26, r24
    44b2:	cb 01       	movw	r24, r22
    44b4:	8e 01       	movw	r16, r28
    44b6:	05 5b       	subi	r16, 0xB5	; 181
    44b8:	1f 4f       	sbci	r17, 0xFF	; 255
    44ba:	bc 01       	movw	r22, r24
    44bc:	cd 01       	movw	r24, r26
    44be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c2:	dc 01       	movw	r26, r24
    44c4:	cb 01       	movw	r24, r22
    44c6:	f8 01       	movw	r30, r16
    44c8:	91 83       	std	Z+1, r25	; 0x01
    44ca:	80 83       	st	Z, r24
    44cc:	1f c0       	rjmp	.+62     	; 0x450c <ExitParallel+0x128>
    44ce:	fe 01       	movw	r30, r28
    44d0:	e7 5b       	subi	r30, 0xB7	; 183
    44d2:	ff 4f       	sbci	r31, 0xFF	; 255
    44d4:	88 ec       	ldi	r24, 0xC8	; 200
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	91 83       	std	Z+1, r25	; 0x01
    44da:	80 83       	st	Z, r24
    44dc:	fe 01       	movw	r30, r28
    44de:	e7 5b       	subi	r30, 0xB7	; 183
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	80 81       	ld	r24, Z
    44e4:	91 81       	ldd	r25, Z+1	; 0x01
    44e6:	01 97       	sbiw	r24, 0x01	; 1
    44e8:	f1 f7       	brne	.-4      	; 0x44e6 <ExitParallel+0x102>
    44ea:	fe 01       	movw	r30, r28
    44ec:	e7 5b       	subi	r30, 0xB7	; 183
    44ee:	ff 4f       	sbci	r31, 0xFF	; 255
    44f0:	91 83       	std	Z+1, r25	; 0x01
    44f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44f4:	de 01       	movw	r26, r28
    44f6:	a5 5b       	subi	r26, 0xB5	; 181
    44f8:	bf 4f       	sbci	r27, 0xFF	; 255
    44fa:	fe 01       	movw	r30, r28
    44fc:	e5 5b       	subi	r30, 0xB5	; 181
    44fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4500:	80 81       	ld	r24, Z
    4502:	91 81       	ldd	r25, Z+1	; 0x01
    4504:	01 97       	sbiw	r24, 0x01	; 1
    4506:	11 96       	adiw	r26, 0x01	; 1
    4508:	9c 93       	st	X, r25
    450a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    450c:	fe 01       	movw	r30, r28
    450e:	e5 5b       	subi	r30, 0xB5	; 181
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	80 81       	ld	r24, Z
    4514:	91 81       	ldd	r25, Z+1	; 0x01
    4516:	00 97       	sbiw	r24, 0x00	; 0
    4518:	d1 f6       	brne	.-76     	; 0x44ce <ExitParallel+0xea>
    451a:	27 c0       	rjmp	.+78     	; 0x456a <ExitParallel+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    451c:	8e 01       	movw	r16, r28
    451e:	05 5b       	subi	r16, 0xB5	; 181
    4520:	1f 4f       	sbci	r17, 0xFF	; 255
    4522:	fe 01       	movw	r30, r28
    4524:	e3 5b       	subi	r30, 0xB3	; 179
    4526:	ff 4f       	sbci	r31, 0xFF	; 255
    4528:	60 81       	ld	r22, Z
    452a:	71 81       	ldd	r23, Z+1	; 0x01
    452c:	82 81       	ldd	r24, Z+2	; 0x02
    452e:	93 81       	ldd	r25, Z+3	; 0x03
    4530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4534:	dc 01       	movw	r26, r24
    4536:	cb 01       	movw	r24, r22
    4538:	f8 01       	movw	r30, r16
    453a:	91 83       	std	Z+1, r25	; 0x01
    453c:	80 83       	st	Z, r24
    453e:	de 01       	movw	r26, r28
    4540:	a9 5b       	subi	r26, 0xB9	; 185
    4542:	bf 4f       	sbci	r27, 0xFF	; 255
    4544:	fe 01       	movw	r30, r28
    4546:	e5 5b       	subi	r30, 0xB5	; 181
    4548:	ff 4f       	sbci	r31, 0xFF	; 255
    454a:	80 81       	ld	r24, Z
    454c:	91 81       	ldd	r25, Z+1	; 0x01
    454e:	8d 93       	st	X+, r24
    4550:	9c 93       	st	X, r25
    4552:	fe 01       	movw	r30, r28
    4554:	e9 5b       	subi	r30, 0xB9	; 185
    4556:	ff 4f       	sbci	r31, 0xFF	; 255
    4558:	80 81       	ld	r24, Z
    455a:	91 81       	ldd	r25, Z+1	; 0x01
    455c:	01 97       	sbiw	r24, 0x01	; 1
    455e:	f1 f7       	brne	.-4      	; 0x455c <ExitParallel+0x178>
    4560:	fe 01       	movw	r30, r28
    4562:	e9 5b       	subi	r30, 0xB9	; 185
    4564:	ff 4f       	sbci	r31, 0xFF	; 255
    4566:	91 83       	std	Z+1, r25	; 0x01
    4568:	80 83       	st	Z, r24
	_delay_ms(1500);
	MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
    456a:	8a e5       	ldi	r24, 0x5A	; 90
    456c:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <MOVE_FORWARD>
	_delay_ms((time_of_first_move_of_parallel_exit*10));
    4570:	80 91 bb 01 	lds	r24, 0x01BB
    4574:	90 91 bc 01 	lds	r25, 0x01BC
    4578:	a0 91 bd 01 	lds	r26, 0x01BD
    457c:	b0 91 be 01 	lds	r27, 0x01BE
    4580:	bc 01       	movw	r22, r24
    4582:	cd 01       	movw	r24, r26
    4584:	20 e0       	ldi	r18, 0x00	; 0
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	40 e2       	ldi	r20, 0x20	; 32
    458a:	51 e4       	ldi	r21, 0x41	; 65
    458c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4590:	dc 01       	movw	r26, r24
    4592:	cb 01       	movw	r24, r22
    4594:	fe 01       	movw	r30, r28
    4596:	ed 5b       	subi	r30, 0xBD	; 189
    4598:	ff 4f       	sbci	r31, 0xFF	; 255
    459a:	80 83       	st	Z, r24
    459c:	91 83       	std	Z+1, r25	; 0x01
    459e:	a2 83       	std	Z+2, r26	; 0x02
    45a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45a2:	8e 01       	movw	r16, r28
    45a4:	01 5c       	subi	r16, 0xC1	; 193
    45a6:	1f 4f       	sbci	r17, 0xFF	; 255
    45a8:	fe 01       	movw	r30, r28
    45aa:	ed 5b       	subi	r30, 0xBD	; 189
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	60 81       	ld	r22, Z
    45b0:	71 81       	ldd	r23, Z+1	; 0x01
    45b2:	82 81       	ldd	r24, Z+2	; 0x02
    45b4:	93 81       	ldd	r25, Z+3	; 0x03
    45b6:	20 e0       	ldi	r18, 0x00	; 0
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	4a ef       	ldi	r20, 0xFA	; 250
    45bc:	54 e4       	ldi	r21, 0x44	; 68
    45be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45c2:	dc 01       	movw	r26, r24
    45c4:	cb 01       	movw	r24, r22
    45c6:	f8 01       	movw	r30, r16
    45c8:	80 83       	st	Z, r24
    45ca:	91 83       	std	Z+1, r25	; 0x01
    45cc:	a2 83       	std	Z+2, r26	; 0x02
    45ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45d0:	fe 01       	movw	r30, r28
    45d2:	ff 96       	adiw	r30, 0x3f	; 63
    45d4:	60 81       	ld	r22, Z
    45d6:	71 81       	ldd	r23, Z+1	; 0x01
    45d8:	82 81       	ldd	r24, Z+2	; 0x02
    45da:	93 81       	ldd	r25, Z+3	; 0x03
    45dc:	20 e0       	ldi	r18, 0x00	; 0
    45de:	30 e0       	ldi	r19, 0x00	; 0
    45e0:	40 e8       	ldi	r20, 0x80	; 128
    45e2:	5f e3       	ldi	r21, 0x3F	; 63
    45e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45e8:	88 23       	and	r24, r24
    45ea:	2c f4       	brge	.+10     	; 0x45f6 <ExitParallel+0x212>
		__ticks = 1;
    45ec:	81 e0       	ldi	r24, 0x01	; 1
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	9e af       	std	Y+62, r25	; 0x3e
    45f2:	8d af       	std	Y+61, r24	; 0x3d
    45f4:	46 c0       	rjmp	.+140    	; 0x4682 <ExitParallel+0x29e>
	else if (__tmp > 65535)
    45f6:	fe 01       	movw	r30, r28
    45f8:	ff 96       	adiw	r30, 0x3f	; 63
    45fa:	60 81       	ld	r22, Z
    45fc:	71 81       	ldd	r23, Z+1	; 0x01
    45fe:	82 81       	ldd	r24, Z+2	; 0x02
    4600:	93 81       	ldd	r25, Z+3	; 0x03
    4602:	20 e0       	ldi	r18, 0x00	; 0
    4604:	3f ef       	ldi	r19, 0xFF	; 255
    4606:	4f e7       	ldi	r20, 0x7F	; 127
    4608:	57 e4       	ldi	r21, 0x47	; 71
    460a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    460e:	18 16       	cp	r1, r24
    4610:	64 f5       	brge	.+88     	; 0x466a <ExitParallel+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4612:	fe 01       	movw	r30, r28
    4614:	ed 5b       	subi	r30, 0xBD	; 189
    4616:	ff 4f       	sbci	r31, 0xFF	; 255
    4618:	60 81       	ld	r22, Z
    461a:	71 81       	ldd	r23, Z+1	; 0x01
    461c:	82 81       	ldd	r24, Z+2	; 0x02
    461e:	93 81       	ldd	r25, Z+3	; 0x03
    4620:	20 e0       	ldi	r18, 0x00	; 0
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	40 e2       	ldi	r20, 0x20	; 32
    4626:	51 e4       	ldi	r21, 0x41	; 65
    4628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    462c:	dc 01       	movw	r26, r24
    462e:	cb 01       	movw	r24, r22
    4630:	bc 01       	movw	r22, r24
    4632:	cd 01       	movw	r24, r26
    4634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4638:	dc 01       	movw	r26, r24
    463a:	cb 01       	movw	r24, r22
    463c:	9e af       	std	Y+62, r25	; 0x3e
    463e:	8d af       	std	Y+61, r24	; 0x3d
    4640:	0f c0       	rjmp	.+30     	; 0x4660 <ExitParallel+0x27c>
    4642:	88 ec       	ldi	r24, 0xC8	; 200
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	9c af       	std	Y+60, r25	; 0x3c
    4648:	8b af       	std	Y+59, r24	; 0x3b
    464a:	8b ad       	ldd	r24, Y+59	; 0x3b
    464c:	9c ad       	ldd	r25, Y+60	; 0x3c
    464e:	01 97       	sbiw	r24, 0x01	; 1
    4650:	f1 f7       	brne	.-4      	; 0x464e <ExitParallel+0x26a>
    4652:	9c af       	std	Y+60, r25	; 0x3c
    4654:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4656:	8d ad       	ldd	r24, Y+61	; 0x3d
    4658:	9e ad       	ldd	r25, Y+62	; 0x3e
    465a:	01 97       	sbiw	r24, 0x01	; 1
    465c:	9e af       	std	Y+62, r25	; 0x3e
    465e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4660:	8d ad       	ldd	r24, Y+61	; 0x3d
    4662:	9e ad       	ldd	r25, Y+62	; 0x3e
    4664:	00 97       	sbiw	r24, 0x00	; 0
    4666:	69 f7       	brne	.-38     	; 0x4642 <ExitParallel+0x25e>
    4668:	16 c0       	rjmp	.+44     	; 0x4696 <ExitParallel+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    466a:	fe 01       	movw	r30, r28
    466c:	ff 96       	adiw	r30, 0x3f	; 63
    466e:	60 81       	ld	r22, Z
    4670:	71 81       	ldd	r23, Z+1	; 0x01
    4672:	82 81       	ldd	r24, Z+2	; 0x02
    4674:	93 81       	ldd	r25, Z+3	; 0x03
    4676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    467a:	dc 01       	movw	r26, r24
    467c:	cb 01       	movw	r24, r22
    467e:	9e af       	std	Y+62, r25	; 0x3e
    4680:	8d af       	std	Y+61, r24	; 0x3d
    4682:	8d ad       	ldd	r24, Y+61	; 0x3d
    4684:	9e ad       	ldd	r25, Y+62	; 0x3e
    4686:	9a af       	std	Y+58, r25	; 0x3a
    4688:	89 af       	std	Y+57, r24	; 0x39
    468a:	89 ad       	ldd	r24, Y+57	; 0x39
    468c:	9a ad       	ldd	r25, Y+58	; 0x3a
    468e:	01 97       	sbiw	r24, 0x01	; 1
    4690:	f1 f7       	brne	.-4      	; 0x468e <ExitParallel+0x2aa>
    4692:	9a af       	std	Y+58, r25	; 0x3a
    4694:	89 af       	std	Y+57, r24	; 0x39
	STOP_DC_MOTOR();
    4696:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <STOP_DC_MOTOR>
	UART_voidSendData(0);//set servo 0
    469a:	80 e0       	ldi	r24, 0x00	; 0
    469c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    46a0:	80 e0       	ldi	r24, 0x00	; 0
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	aa e7       	ldi	r26, 0x7A	; 122
    46a6:	b4 e4       	ldi	r27, 0x44	; 68
    46a8:	8d ab       	std	Y+53, r24	; 0x35
    46aa:	9e ab       	std	Y+54, r25	; 0x36
    46ac:	af ab       	std	Y+55, r26	; 0x37
    46ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46b0:	6d a9       	ldd	r22, Y+53	; 0x35
    46b2:	7e a9       	ldd	r23, Y+54	; 0x36
    46b4:	8f a9       	ldd	r24, Y+55	; 0x37
    46b6:	98 ad       	ldd	r25, Y+56	; 0x38
    46b8:	20 e0       	ldi	r18, 0x00	; 0
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	4a ef       	ldi	r20, 0xFA	; 250
    46be:	54 e4       	ldi	r21, 0x44	; 68
    46c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c4:	dc 01       	movw	r26, r24
    46c6:	cb 01       	movw	r24, r22
    46c8:	89 ab       	std	Y+49, r24	; 0x31
    46ca:	9a ab       	std	Y+50, r25	; 0x32
    46cc:	ab ab       	std	Y+51, r26	; 0x33
    46ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    46d0:	69 a9       	ldd	r22, Y+49	; 0x31
    46d2:	7a a9       	ldd	r23, Y+50	; 0x32
    46d4:	8b a9       	ldd	r24, Y+51	; 0x33
    46d6:	9c a9       	ldd	r25, Y+52	; 0x34
    46d8:	20 e0       	ldi	r18, 0x00	; 0
    46da:	30 e0       	ldi	r19, 0x00	; 0
    46dc:	40 e8       	ldi	r20, 0x80	; 128
    46de:	5f e3       	ldi	r21, 0x3F	; 63
    46e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46e4:	88 23       	and	r24, r24
    46e6:	2c f4       	brge	.+10     	; 0x46f2 <ExitParallel+0x30e>
		__ticks = 1;
    46e8:	81 e0       	ldi	r24, 0x01	; 1
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	98 ab       	std	Y+48, r25	; 0x30
    46ee:	8f a7       	std	Y+47, r24	; 0x2f
    46f0:	3f c0       	rjmp	.+126    	; 0x4770 <ExitParallel+0x38c>
	else if (__tmp > 65535)
    46f2:	69 a9       	ldd	r22, Y+49	; 0x31
    46f4:	7a a9       	ldd	r23, Y+50	; 0x32
    46f6:	8b a9       	ldd	r24, Y+51	; 0x33
    46f8:	9c a9       	ldd	r25, Y+52	; 0x34
    46fa:	20 e0       	ldi	r18, 0x00	; 0
    46fc:	3f ef       	ldi	r19, 0xFF	; 255
    46fe:	4f e7       	ldi	r20, 0x7F	; 127
    4700:	57 e4       	ldi	r21, 0x47	; 71
    4702:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4706:	18 16       	cp	r1, r24
    4708:	4c f5       	brge	.+82     	; 0x475c <ExitParallel+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    470a:	6d a9       	ldd	r22, Y+53	; 0x35
    470c:	7e a9       	ldd	r23, Y+54	; 0x36
    470e:	8f a9       	ldd	r24, Y+55	; 0x37
    4710:	98 ad       	ldd	r25, Y+56	; 0x38
    4712:	20 e0       	ldi	r18, 0x00	; 0
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	40 e2       	ldi	r20, 0x20	; 32
    4718:	51 e4       	ldi	r21, 0x41	; 65
    471a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    471e:	dc 01       	movw	r26, r24
    4720:	cb 01       	movw	r24, r22
    4722:	bc 01       	movw	r22, r24
    4724:	cd 01       	movw	r24, r26
    4726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    472a:	dc 01       	movw	r26, r24
    472c:	cb 01       	movw	r24, r22
    472e:	98 ab       	std	Y+48, r25	; 0x30
    4730:	8f a7       	std	Y+47, r24	; 0x2f
    4732:	0f c0       	rjmp	.+30     	; 0x4752 <ExitParallel+0x36e>
    4734:	88 ec       	ldi	r24, 0xC8	; 200
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	9e a7       	std	Y+46, r25	; 0x2e
    473a:	8d a7       	std	Y+45, r24	; 0x2d
    473c:	8d a5       	ldd	r24, Y+45	; 0x2d
    473e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4740:	01 97       	sbiw	r24, 0x01	; 1
    4742:	f1 f7       	brne	.-4      	; 0x4740 <ExitParallel+0x35c>
    4744:	9e a7       	std	Y+46, r25	; 0x2e
    4746:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4748:	8f a5       	ldd	r24, Y+47	; 0x2f
    474a:	98 a9       	ldd	r25, Y+48	; 0x30
    474c:	01 97       	sbiw	r24, 0x01	; 1
    474e:	98 ab       	std	Y+48, r25	; 0x30
    4750:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4752:	8f a5       	ldd	r24, Y+47	; 0x2f
    4754:	98 a9       	ldd	r25, Y+48	; 0x30
    4756:	00 97       	sbiw	r24, 0x00	; 0
    4758:	69 f7       	brne	.-38     	; 0x4734 <ExitParallel+0x350>
    475a:	14 c0       	rjmp	.+40     	; 0x4784 <ExitParallel+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    475c:	69 a9       	ldd	r22, Y+49	; 0x31
    475e:	7a a9       	ldd	r23, Y+50	; 0x32
    4760:	8b a9       	ldd	r24, Y+51	; 0x33
    4762:	9c a9       	ldd	r25, Y+52	; 0x34
    4764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4768:	dc 01       	movw	r26, r24
    476a:	cb 01       	movw	r24, r22
    476c:	98 ab       	std	Y+48, r25	; 0x30
    476e:	8f a7       	std	Y+47, r24	; 0x2f
    4770:	8f a5       	ldd	r24, Y+47	; 0x2f
    4772:	98 a9       	ldd	r25, Y+48	; 0x30
    4774:	9c a7       	std	Y+44, r25	; 0x2c
    4776:	8b a7       	std	Y+43, r24	; 0x2b
    4778:	8b a5       	ldd	r24, Y+43	; 0x2b
    477a:	9c a5       	ldd	r25, Y+44	; 0x2c
    477c:	01 97       	sbiw	r24, 0x01	; 1
    477e:	f1 f7       	brne	.-4      	; 0x477c <ExitParallel+0x398>
    4780:	9c a7       	std	Y+44, r25	; 0x2c
    4782:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	UART_voidSendData(0);//set servo 0
    4784:	80 e0       	ldi	r24, 0x00	; 0
    4786:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    478a:	80 e0       	ldi	r24, 0x00	; 0
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	aa e7       	ldi	r26, 0x7A	; 122
    4790:	b4 e4       	ldi	r27, 0x44	; 68
    4792:	8f a3       	std	Y+39, r24	; 0x27
    4794:	98 a7       	std	Y+40, r25	; 0x28
    4796:	a9 a7       	std	Y+41, r26	; 0x29
    4798:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    479a:	6f a1       	ldd	r22, Y+39	; 0x27
    479c:	78 a5       	ldd	r23, Y+40	; 0x28
    479e:	89 a5       	ldd	r24, Y+41	; 0x29
    47a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	4a ef       	ldi	r20, 0xFA	; 250
    47a8:	54 e4       	ldi	r21, 0x44	; 68
    47aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ae:	dc 01       	movw	r26, r24
    47b0:	cb 01       	movw	r24, r22
    47b2:	8b a3       	std	Y+35, r24	; 0x23
    47b4:	9c a3       	std	Y+36, r25	; 0x24
    47b6:	ad a3       	std	Y+37, r26	; 0x25
    47b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    47ba:	6b a1       	ldd	r22, Y+35	; 0x23
    47bc:	7c a1       	ldd	r23, Y+36	; 0x24
    47be:	8d a1       	ldd	r24, Y+37	; 0x25
    47c0:	9e a1       	ldd	r25, Y+38	; 0x26
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	40 e8       	ldi	r20, 0x80	; 128
    47c8:	5f e3       	ldi	r21, 0x3F	; 63
    47ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47ce:	88 23       	and	r24, r24
    47d0:	2c f4       	brge	.+10     	; 0x47dc <ExitParallel+0x3f8>
		__ticks = 1;
    47d2:	81 e0       	ldi	r24, 0x01	; 1
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	9a a3       	std	Y+34, r25	; 0x22
    47d8:	89 a3       	std	Y+33, r24	; 0x21
    47da:	3f c0       	rjmp	.+126    	; 0x485a <ExitParallel+0x476>
	else if (__tmp > 65535)
    47dc:	6b a1       	ldd	r22, Y+35	; 0x23
    47de:	7c a1       	ldd	r23, Y+36	; 0x24
    47e0:	8d a1       	ldd	r24, Y+37	; 0x25
    47e2:	9e a1       	ldd	r25, Y+38	; 0x26
    47e4:	20 e0       	ldi	r18, 0x00	; 0
    47e6:	3f ef       	ldi	r19, 0xFF	; 255
    47e8:	4f e7       	ldi	r20, 0x7F	; 127
    47ea:	57 e4       	ldi	r21, 0x47	; 71
    47ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47f0:	18 16       	cp	r1, r24
    47f2:	4c f5       	brge	.+82     	; 0x4846 <ExitParallel+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f4:	6f a1       	ldd	r22, Y+39	; 0x27
    47f6:	78 a5       	ldd	r23, Y+40	; 0x28
    47f8:	89 a5       	ldd	r24, Y+41	; 0x29
    47fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    47fc:	20 e0       	ldi	r18, 0x00	; 0
    47fe:	30 e0       	ldi	r19, 0x00	; 0
    4800:	40 e2       	ldi	r20, 0x20	; 32
    4802:	51 e4       	ldi	r21, 0x41	; 65
    4804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4808:	dc 01       	movw	r26, r24
    480a:	cb 01       	movw	r24, r22
    480c:	bc 01       	movw	r22, r24
    480e:	cd 01       	movw	r24, r26
    4810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4814:	dc 01       	movw	r26, r24
    4816:	cb 01       	movw	r24, r22
    4818:	9a a3       	std	Y+34, r25	; 0x22
    481a:	89 a3       	std	Y+33, r24	; 0x21
    481c:	0f c0       	rjmp	.+30     	; 0x483c <ExitParallel+0x458>
    481e:	88 ec       	ldi	r24, 0xC8	; 200
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	98 a3       	std	Y+32, r25	; 0x20
    4824:	8f 8f       	std	Y+31, r24	; 0x1f
    4826:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4828:	98 a1       	ldd	r25, Y+32	; 0x20
    482a:	01 97       	sbiw	r24, 0x01	; 1
    482c:	f1 f7       	brne	.-4      	; 0x482a <ExitParallel+0x446>
    482e:	98 a3       	std	Y+32, r25	; 0x20
    4830:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4832:	89 a1       	ldd	r24, Y+33	; 0x21
    4834:	9a a1       	ldd	r25, Y+34	; 0x22
    4836:	01 97       	sbiw	r24, 0x01	; 1
    4838:	9a a3       	std	Y+34, r25	; 0x22
    483a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    483c:	89 a1       	ldd	r24, Y+33	; 0x21
    483e:	9a a1       	ldd	r25, Y+34	; 0x22
    4840:	00 97       	sbiw	r24, 0x00	; 0
    4842:	69 f7       	brne	.-38     	; 0x481e <ExitParallel+0x43a>
    4844:	14 c0       	rjmp	.+40     	; 0x486e <ExitParallel+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4846:	6b a1       	ldd	r22, Y+35	; 0x23
    4848:	7c a1       	ldd	r23, Y+36	; 0x24
    484a:	8d a1       	ldd	r24, Y+37	; 0x25
    484c:	9e a1       	ldd	r25, Y+38	; 0x26
    484e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4852:	dc 01       	movw	r26, r24
    4854:	cb 01       	movw	r24, r22
    4856:	9a a3       	std	Y+34, r25	; 0x22
    4858:	89 a3       	std	Y+33, r24	; 0x21
    485a:	89 a1       	ldd	r24, Y+33	; 0x21
    485c:	9a a1       	ldd	r25, Y+34	; 0x22
    485e:	9e 8f       	std	Y+30, r25	; 0x1e
    4860:	8d 8f       	std	Y+29, r24	; 0x1d
    4862:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4864:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4866:	01 97       	sbiw	r24, 0x01	; 1
    4868:	f1 f7       	brne	.-4      	; 0x4866 <ExitParallel+0x482>
    486a:	9e 8f       	std	Y+30, r25	; 0x1e
    486c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	UART_voidSendData(45);//set servo 45
    486e:	8d e2       	ldi	r24, 0x2D	; 45
    4870:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
    4874:	80 e0       	ldi	r24, 0x00	; 0
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	aa ef       	ldi	r26, 0xFA	; 250
    487a:	b3 e4       	ldi	r27, 0x43	; 67
    487c:	89 8f       	std	Y+25, r24	; 0x19
    487e:	9a 8f       	std	Y+26, r25	; 0x1a
    4880:	ab 8f       	std	Y+27, r26	; 0x1b
    4882:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4884:	69 8d       	ldd	r22, Y+25	; 0x19
    4886:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4888:	8b 8d       	ldd	r24, Y+27	; 0x1b
    488a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    488c:	20 e0       	ldi	r18, 0x00	; 0
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	4a ef       	ldi	r20, 0xFA	; 250
    4892:	54 e4       	ldi	r21, 0x44	; 68
    4894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4898:	dc 01       	movw	r26, r24
    489a:	cb 01       	movw	r24, r22
    489c:	8d 8b       	std	Y+21, r24	; 0x15
    489e:	9e 8b       	std	Y+22, r25	; 0x16
    48a0:	af 8b       	std	Y+23, r26	; 0x17
    48a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    48a4:	6d 89       	ldd	r22, Y+21	; 0x15
    48a6:	7e 89       	ldd	r23, Y+22	; 0x16
    48a8:	8f 89       	ldd	r24, Y+23	; 0x17
    48aa:	98 8d       	ldd	r25, Y+24	; 0x18
    48ac:	20 e0       	ldi	r18, 0x00	; 0
    48ae:	30 e0       	ldi	r19, 0x00	; 0
    48b0:	40 e8       	ldi	r20, 0x80	; 128
    48b2:	5f e3       	ldi	r21, 0x3F	; 63
    48b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48b8:	88 23       	and	r24, r24
    48ba:	2c f4       	brge	.+10     	; 0x48c6 <ExitParallel+0x4e2>
		__ticks = 1;
    48bc:	81 e0       	ldi	r24, 0x01	; 1
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	9c 8b       	std	Y+20, r25	; 0x14
    48c2:	8b 8b       	std	Y+19, r24	; 0x13
    48c4:	3f c0       	rjmp	.+126    	; 0x4944 <ExitParallel+0x560>
	else if (__tmp > 65535)
    48c6:	6d 89       	ldd	r22, Y+21	; 0x15
    48c8:	7e 89       	ldd	r23, Y+22	; 0x16
    48ca:	8f 89       	ldd	r24, Y+23	; 0x17
    48cc:	98 8d       	ldd	r25, Y+24	; 0x18
    48ce:	20 e0       	ldi	r18, 0x00	; 0
    48d0:	3f ef       	ldi	r19, 0xFF	; 255
    48d2:	4f e7       	ldi	r20, 0x7F	; 127
    48d4:	57 e4       	ldi	r21, 0x47	; 71
    48d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48da:	18 16       	cp	r1, r24
    48dc:	4c f5       	brge	.+82     	; 0x4930 <ExitParallel+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48de:	69 8d       	ldd	r22, Y+25	; 0x19
    48e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48e6:	20 e0       	ldi	r18, 0x00	; 0
    48e8:	30 e0       	ldi	r19, 0x00	; 0
    48ea:	40 e2       	ldi	r20, 0x20	; 32
    48ec:	51 e4       	ldi	r21, 0x41	; 65
    48ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48f2:	dc 01       	movw	r26, r24
    48f4:	cb 01       	movw	r24, r22
    48f6:	bc 01       	movw	r22, r24
    48f8:	cd 01       	movw	r24, r26
    48fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48fe:	dc 01       	movw	r26, r24
    4900:	cb 01       	movw	r24, r22
    4902:	9c 8b       	std	Y+20, r25	; 0x14
    4904:	8b 8b       	std	Y+19, r24	; 0x13
    4906:	0f c0       	rjmp	.+30     	; 0x4926 <ExitParallel+0x542>
    4908:	88 ec       	ldi	r24, 0xC8	; 200
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	9a 8b       	std	Y+18, r25	; 0x12
    490e:	89 8b       	std	Y+17, r24	; 0x11
    4910:	89 89       	ldd	r24, Y+17	; 0x11
    4912:	9a 89       	ldd	r25, Y+18	; 0x12
    4914:	01 97       	sbiw	r24, 0x01	; 1
    4916:	f1 f7       	brne	.-4      	; 0x4914 <ExitParallel+0x530>
    4918:	9a 8b       	std	Y+18, r25	; 0x12
    491a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    491c:	8b 89       	ldd	r24, Y+19	; 0x13
    491e:	9c 89       	ldd	r25, Y+20	; 0x14
    4920:	01 97       	sbiw	r24, 0x01	; 1
    4922:	9c 8b       	std	Y+20, r25	; 0x14
    4924:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4926:	8b 89       	ldd	r24, Y+19	; 0x13
    4928:	9c 89       	ldd	r25, Y+20	; 0x14
    492a:	00 97       	sbiw	r24, 0x00	; 0
    492c:	69 f7       	brne	.-38     	; 0x4908 <ExitParallel+0x524>
    492e:	14 c0       	rjmp	.+40     	; 0x4958 <ExitParallel+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4930:	6d 89       	ldd	r22, Y+21	; 0x15
    4932:	7e 89       	ldd	r23, Y+22	; 0x16
    4934:	8f 89       	ldd	r24, Y+23	; 0x17
    4936:	98 8d       	ldd	r25, Y+24	; 0x18
    4938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    493c:	dc 01       	movw	r26, r24
    493e:	cb 01       	movw	r24, r22
    4940:	9c 8b       	std	Y+20, r25	; 0x14
    4942:	8b 8b       	std	Y+19, r24	; 0x13
    4944:	8b 89       	ldd	r24, Y+19	; 0x13
    4946:	9c 89       	ldd	r25, Y+20	; 0x14
    4948:	98 8b       	std	Y+16, r25	; 0x10
    494a:	8f 87       	std	Y+15, r24	; 0x0f
    494c:	8f 85       	ldd	r24, Y+15	; 0x0f
    494e:	98 89       	ldd	r25, Y+16	; 0x10
    4950:	01 97       	sbiw	r24, 0x01	; 1
    4952:	f1 f7       	brne	.-4      	; 0x4950 <ExitParallel+0x56c>
    4954:	98 8b       	std	Y+16, r25	; 0x10
    4956:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	MOVE_FORWARD(PWM_SPEED_OF_MOTOR_TO_PARK);
    4958:	8a e5       	ldi	r24, 0x5A	; 90
    495a:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <MOVE_FORWARD>
	_delay_ms((time_of_second_move_of_parallel_exit*10));
    495e:	80 91 92 01 	lds	r24, 0x0192
    4962:	90 91 93 01 	lds	r25, 0x0193
    4966:	a0 91 94 01 	lds	r26, 0x0194
    496a:	b0 91 95 01 	lds	r27, 0x0195
    496e:	bc 01       	movw	r22, r24
    4970:	cd 01       	movw	r24, r26
    4972:	20 e0       	ldi	r18, 0x00	; 0
    4974:	30 e0       	ldi	r19, 0x00	; 0
    4976:	40 e2       	ldi	r20, 0x20	; 32
    4978:	51 e4       	ldi	r21, 0x41	; 65
    497a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    497e:	dc 01       	movw	r26, r24
    4980:	cb 01       	movw	r24, r22
    4982:	8b 87       	std	Y+11, r24	; 0x0b
    4984:	9c 87       	std	Y+12, r25	; 0x0c
    4986:	ad 87       	std	Y+13, r26	; 0x0d
    4988:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    498a:	6b 85       	ldd	r22, Y+11	; 0x0b
    498c:	7c 85       	ldd	r23, Y+12	; 0x0c
    498e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4990:	9e 85       	ldd	r25, Y+14	; 0x0e
    4992:	20 e0       	ldi	r18, 0x00	; 0
    4994:	30 e0       	ldi	r19, 0x00	; 0
    4996:	4a ef       	ldi	r20, 0xFA	; 250
    4998:	54 e4       	ldi	r21, 0x44	; 68
    499a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    499e:	dc 01       	movw	r26, r24
    49a0:	cb 01       	movw	r24, r22
    49a2:	8f 83       	std	Y+7, r24	; 0x07
    49a4:	98 87       	std	Y+8, r25	; 0x08
    49a6:	a9 87       	std	Y+9, r26	; 0x09
    49a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49aa:	6f 81       	ldd	r22, Y+7	; 0x07
    49ac:	78 85       	ldd	r23, Y+8	; 0x08
    49ae:	89 85       	ldd	r24, Y+9	; 0x09
    49b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    49b2:	20 e0       	ldi	r18, 0x00	; 0
    49b4:	30 e0       	ldi	r19, 0x00	; 0
    49b6:	40 e8       	ldi	r20, 0x80	; 128
    49b8:	5f e3       	ldi	r21, 0x3F	; 63
    49ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49be:	88 23       	and	r24, r24
    49c0:	2c f4       	brge	.+10     	; 0x49cc <ExitParallel+0x5e8>
		__ticks = 1;
    49c2:	81 e0       	ldi	r24, 0x01	; 1
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	9e 83       	std	Y+6, r25	; 0x06
    49c8:	8d 83       	std	Y+5, r24	; 0x05
    49ca:	3f c0       	rjmp	.+126    	; 0x4a4a <ExitParallel+0x666>
	else if (__tmp > 65535)
    49cc:	6f 81       	ldd	r22, Y+7	; 0x07
    49ce:	78 85       	ldd	r23, Y+8	; 0x08
    49d0:	89 85       	ldd	r24, Y+9	; 0x09
    49d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    49d4:	20 e0       	ldi	r18, 0x00	; 0
    49d6:	3f ef       	ldi	r19, 0xFF	; 255
    49d8:	4f e7       	ldi	r20, 0x7F	; 127
    49da:	57 e4       	ldi	r21, 0x47	; 71
    49dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49e0:	18 16       	cp	r1, r24
    49e2:	4c f5       	brge	.+82     	; 0x4a36 <ExitParallel+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    49e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    49e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    49ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    49ec:	20 e0       	ldi	r18, 0x00	; 0
    49ee:	30 e0       	ldi	r19, 0x00	; 0
    49f0:	40 e2       	ldi	r20, 0x20	; 32
    49f2:	51 e4       	ldi	r21, 0x41	; 65
    49f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f8:	dc 01       	movw	r26, r24
    49fa:	cb 01       	movw	r24, r22
    49fc:	bc 01       	movw	r22, r24
    49fe:	cd 01       	movw	r24, r26
    4a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a04:	dc 01       	movw	r26, r24
    4a06:	cb 01       	movw	r24, r22
    4a08:	9e 83       	std	Y+6, r25	; 0x06
    4a0a:	8d 83       	std	Y+5, r24	; 0x05
    4a0c:	0f c0       	rjmp	.+30     	; 0x4a2c <ExitParallel+0x648>
    4a0e:	88 ec       	ldi	r24, 0xC8	; 200
    4a10:	90 e0       	ldi	r25, 0x00	; 0
    4a12:	9c 83       	std	Y+4, r25	; 0x04
    4a14:	8b 83       	std	Y+3, r24	; 0x03
    4a16:	8b 81       	ldd	r24, Y+3	; 0x03
    4a18:	9c 81       	ldd	r25, Y+4	; 0x04
    4a1a:	01 97       	sbiw	r24, 0x01	; 1
    4a1c:	f1 f7       	brne	.-4      	; 0x4a1a <ExitParallel+0x636>
    4a1e:	9c 83       	std	Y+4, r25	; 0x04
    4a20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a22:	8d 81       	ldd	r24, Y+5	; 0x05
    4a24:	9e 81       	ldd	r25, Y+6	; 0x06
    4a26:	01 97       	sbiw	r24, 0x01	; 1
    4a28:	9e 83       	std	Y+6, r25	; 0x06
    4a2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    4a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    4a30:	00 97       	sbiw	r24, 0x00	; 0
    4a32:	69 f7       	brne	.-38     	; 0x4a0e <ExitParallel+0x62a>
    4a34:	14 c0       	rjmp	.+40     	; 0x4a5e <ExitParallel+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a36:	6f 81       	ldd	r22, Y+7	; 0x07
    4a38:	78 85       	ldd	r23, Y+8	; 0x08
    4a3a:	89 85       	ldd	r24, Y+9	; 0x09
    4a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a42:	dc 01       	movw	r26, r24
    4a44:	cb 01       	movw	r24, r22
    4a46:	9e 83       	std	Y+6, r25	; 0x06
    4a48:	8d 83       	std	Y+5, r24	; 0x05
    4a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    4a4e:	9a 83       	std	Y+2, r25	; 0x02
    4a50:	89 83       	std	Y+1, r24	; 0x01
    4a52:	89 81       	ldd	r24, Y+1	; 0x01
    4a54:	9a 81       	ldd	r25, Y+2	; 0x02
    4a56:	01 97       	sbiw	r24, 0x01	; 1
    4a58:	f1 f7       	brne	.-4      	; 0x4a56 <ExitParallel+0x672>
    4a5a:	9a 83       	std	Y+2, r25	; 0x02
    4a5c:	89 83       	std	Y+1, r24	; 0x01
	STOP_DC_MOTOR();
    4a5e:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <STOP_DC_MOTOR>
	UART_voidSendData(0);//set servo 0
    4a62:	80 e0       	ldi	r24, 0x00	; 0
    4a64:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <UART_voidSendData>
}
    4a68:	cc 5a       	subi	r28, 0xAC	; 172
    4a6a:	df 4f       	sbci	r29, 0xFF	; 255
    4a6c:	0f b6       	in	r0, 0x3f	; 63
    4a6e:	f8 94       	cli
    4a70:	de bf       	out	0x3e, r29	; 62
    4a72:	0f be       	out	0x3f, r0	; 63
    4a74:	cd bf       	out	0x3d, r28	; 61
    4a76:	cf 91       	pop	r28
    4a78:	df 91       	pop	r29
    4a7a:	1f 91       	pop	r17
    4a7c:	0f 91       	pop	r16
    4a7e:	08 95       	ret

00004a80 <MOVE_BACKWORD_2_perpindicular>:
void MOVE_BACKWORD_2_perpindicular(u8 Copy_u8Speed)
{
    4a80:	df 93       	push	r29
    4a82:	cf 93       	push	r28
    4a84:	0f 92       	push	r0
    4a86:	cd b7       	in	r28, 0x3d	; 61
    4a88:	de b7       	in	r29, 0x3e	; 62
    4a8a:	89 83       	std	Y+1, r24	; 0x01

	PWM2_voidSetOcrValue(Copy_u8Speed);
    4a8c:	89 81       	ldd	r24, Y+1	; 0x01
    4a8e:	88 2f       	mov	r24, r24
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <PWM2_voidSetOcrValue>
	DC_MOTOR2_voidRotateAntiClockwise();
    4a96:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <DC_MOTOR2_voidRotateAntiClockwise>
	DC_MOTOR3_voidRotateAntiClockwise();
    4a9a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DC_MOTOR3_voidRotateAntiClockwise>
}
    4a9e:	0f 90       	pop	r0
    4aa0:	cf 91       	pop	r28
    4aa2:	df 91       	pop	r29
    4aa4:	08 95       	ret

00004aa6 <STOP_DC_MOTOR>:
void STOP_DC_MOTOR(void)
{
    4aa6:	df 93       	push	r29
    4aa8:	cf 93       	push	r28
    4aaa:	cd b7       	in	r28, 0x3d	; 61
    4aac:	de b7       	in	r29, 0x3e	; 62
	DC_MOTOR1_voidStop();
    4aae:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <DC_MOTOR1_voidStop>
	DC_MOTOR2_voidStop();
    4ab2:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <DC_MOTOR2_voidStop>
	DC_MOTOR3_voidStop();
    4ab6:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <DC_MOTOR3_voidStop>
	DC_MOTOR4_voidStop();
    4aba:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <DC_MOTOR4_voidStop>
}
    4abe:	cf 91       	pop	r28
    4ac0:	df 91       	pop	r29
    4ac2:	08 95       	ret

00004ac4 <MOVE_FORWARD_2_perpindicular>:
void MOVE_FORWARD_2_perpindicular(u8 Copy_u8Speed)
{
    4ac4:	df 93       	push	r29
    4ac6:	cf 93       	push	r28
    4ac8:	0f 92       	push	r0
    4aca:	cd b7       	in	r28, 0x3d	; 61
    4acc:	de b7       	in	r29, 0x3e	; 62
    4ace:	89 83       	std	Y+1, r24	; 0x01

	PWM2_voidSetOcrValue(Copy_u8Speed);
    4ad0:	89 81       	ldd	r24, Y+1	; 0x01
    4ad2:	88 2f       	mov	r24, r24
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <PWM2_voidSetOcrValue>
	DC_MOTOR2_voidRotateClockwise();
    4ada:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DC_MOTOR2_voidRotateClockwise>
	DC_MOTOR3_voidRotateClockwise();
    4ade:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <DC_MOTOR3_voidRotateClockwise>
}
    4ae2:	0f 90       	pop	r0
    4ae4:	cf 91       	pop	r28
    4ae6:	df 91       	pop	r29
    4ae8:	08 95       	ret

00004aea <MOVE_BACKWORD>:
void MOVE_BACKWORD(u8 Copy_u8Speed)
{
    4aea:	df 93       	push	r29
    4aec:	cf 93       	push	r28
    4aee:	0f 92       	push	r0
    4af0:	cd b7       	in	r28, 0x3d	; 61
    4af2:	de b7       	in	r29, 0x3e	; 62
    4af4:	89 83       	std	Y+1, r24	; 0x01

	PWM2_voidSetOcrValue(Copy_u8Speed);
    4af6:	89 81       	ldd	r24, Y+1	; 0x01
    4af8:	88 2f       	mov	r24, r24
    4afa:	90 e0       	ldi	r25, 0x00	; 0
    4afc:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <PWM2_voidSetOcrValue>
	DC_MOTOR1_voidRotateAntiClockwise();
    4b00:	0e 94 c7 0c 	call	0x198e	; 0x198e <DC_MOTOR1_voidRotateAntiClockwise>
	DC_MOTOR2_voidRotateAntiClockwise();
    4b04:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <DC_MOTOR2_voidRotateAntiClockwise>
	DC_MOTOR3_voidRotateAntiClockwise();
    4b08:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DC_MOTOR3_voidRotateAntiClockwise>
	DC_MOTOR4_voidRotateAntiClockwise();
    4b0c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DC_MOTOR4_voidRotateAntiClockwise>
}
    4b10:	0f 90       	pop	r0
    4b12:	cf 91       	pop	r28
    4b14:	df 91       	pop	r29
    4b16:	08 95       	ret

00004b18 <MOVE_BACKWORD_1_perpindicular>:
void MOVE_BACKWORD_1_perpindicular(u8 Copy_u8Speed)
{
    4b18:	df 93       	push	r29
    4b1a:	cf 93       	push	r28
    4b1c:	0f 92       	push	r0
    4b1e:	cd b7       	in	r28, 0x3d	; 61
    4b20:	de b7       	in	r29, 0x3e	; 62
    4b22:	89 83       	std	Y+1, r24	; 0x01

	PWM2_voidSetOcrValue(Copy_u8Speed);
    4b24:	89 81       	ldd	r24, Y+1	; 0x01
    4b26:	88 2f       	mov	r24, r24
    4b28:	90 e0       	ldi	r25, 0x00	; 0
    4b2a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <PWM2_voidSetOcrValue>
	DC_MOTOR1_voidRotateAntiClockwise();
    4b2e:	0e 94 c7 0c 	call	0x198e	; 0x198e <DC_MOTOR1_voidRotateAntiClockwise>
	DC_MOTOR4_voidRotateAntiClockwise();
    4b32:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DC_MOTOR4_voidRotateAntiClockwise>
}
    4b36:	0f 90       	pop	r0
    4b38:	cf 91       	pop	r28
    4b3a:	df 91       	pop	r29
    4b3c:	08 95       	ret

00004b3e <MOVE_FORWARD>:
void MOVE_FORWARD(u8 Copy_u8Speed)
{
    4b3e:	df 93       	push	r29
    4b40:	cf 93       	push	r28
    4b42:	0f 92       	push	r0
    4b44:	cd b7       	in	r28, 0x3d	; 61
    4b46:	de b7       	in	r29, 0x3e	; 62
    4b48:	89 83       	std	Y+1, r24	; 0x01

	PWM2_voidSetOcrValue(Copy_u8Speed);
    4b4a:	89 81       	ldd	r24, Y+1	; 0x01
    4b4c:	88 2f       	mov	r24, r24
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <PWM2_voidSetOcrValue>
	DC_MOTOR1_voidRotateClockwise();
    4b54:	0e 94 b6 0c 	call	0x196c	; 0x196c <DC_MOTOR1_voidRotateClockwise>
	DC_MOTOR2_voidRotateClockwise();
    4b58:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DC_MOTOR2_voidRotateClockwise>
	DC_MOTOR3_voidRotateClockwise();
    4b5c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <DC_MOTOR3_voidRotateClockwise>
	DC_MOTOR4_voidRotateClockwise();
    4b60:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <DC_MOTOR4_voidRotateClockwise>
}
    4b64:	0f 90       	pop	r0
    4b66:	cf 91       	pop	r28
    4b68:	df 91       	pop	r29
    4b6a:	08 95       	ret

00004b6c <MOVE_FORWARD_1_perpindicular>:
void MOVE_FORWARD_1_perpindicular(u8 Copy_u8Speed)
{
    4b6c:	df 93       	push	r29
    4b6e:	cf 93       	push	r28
    4b70:	0f 92       	push	r0
    4b72:	cd b7       	in	r28, 0x3d	; 61
    4b74:	de b7       	in	r29, 0x3e	; 62
    4b76:	89 83       	std	Y+1, r24	; 0x01

	PWM2_voidSetOcrValue(Copy_u8Speed);
    4b78:	89 81       	ldd	r24, Y+1	; 0x01
    4b7a:	88 2f       	mov	r24, r24
    4b7c:	90 e0       	ldi	r25, 0x00	; 0
    4b7e:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <PWM2_voidSetOcrValue>
	DC_MOTOR1_voidRotateClockwise();
    4b82:	0e 94 b6 0c 	call	0x196c	; 0x196c <DC_MOTOR1_voidRotateClockwise>
	DC_MOTOR4_voidRotateClockwise();
    4b86:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <DC_MOTOR4_voidRotateClockwise>
}
    4b8a:	0f 90       	pop	r0
    4b8c:	cf 91       	pop	r28
    4b8e:	df 91       	pop	r29
    4b90:	08 95       	ret

00004b92 <DC_MOTORS_Init>:
void DC_MOTORS_Init(void)
{
    4b92:	df 93       	push	r29
    4b94:	cf 93       	push	r28
    4b96:	cd b7       	in	r28, 0x3d	; 61
    4b98:	de b7       	in	r29, 0x3e	; 62
	DC_MOTOR1_Init();
    4b9a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DC_MOTOR1_Init>
	DC_MOTOR2_Init();
    4b9e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <DC_MOTOR2_Init>
	DC_MOTOR3_Init();
    4ba2:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <DC_MOTOR3_Init>
	DC_MOTOR4_Init();
    4ba6:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <DC_MOTOR4_Init>
}
    4baa:	cf 91       	pop	r28
    4bac:	df 91       	pop	r29
    4bae:	08 95       	ret

00004bb0 <__udivmodhi4>:
    4bb0:	aa 1b       	sub	r26, r26
    4bb2:	bb 1b       	sub	r27, r27
    4bb4:	51 e1       	ldi	r21, 0x11	; 17
    4bb6:	07 c0       	rjmp	.+14     	; 0x4bc6 <__udivmodhi4_ep>

00004bb8 <__udivmodhi4_loop>:
    4bb8:	aa 1f       	adc	r26, r26
    4bba:	bb 1f       	adc	r27, r27
    4bbc:	a6 17       	cp	r26, r22
    4bbe:	b7 07       	cpc	r27, r23
    4bc0:	10 f0       	brcs	.+4      	; 0x4bc6 <__udivmodhi4_ep>
    4bc2:	a6 1b       	sub	r26, r22
    4bc4:	b7 0b       	sbc	r27, r23

00004bc6 <__udivmodhi4_ep>:
    4bc6:	88 1f       	adc	r24, r24
    4bc8:	99 1f       	adc	r25, r25
    4bca:	5a 95       	dec	r21
    4bcc:	a9 f7       	brne	.-22     	; 0x4bb8 <__udivmodhi4_loop>
    4bce:	80 95       	com	r24
    4bd0:	90 95       	com	r25
    4bd2:	bc 01       	movw	r22, r24
    4bd4:	cd 01       	movw	r24, r26
    4bd6:	08 95       	ret

00004bd8 <__prologue_saves__>:
    4bd8:	2f 92       	push	r2
    4bda:	3f 92       	push	r3
    4bdc:	4f 92       	push	r4
    4bde:	5f 92       	push	r5
    4be0:	6f 92       	push	r6
    4be2:	7f 92       	push	r7
    4be4:	8f 92       	push	r8
    4be6:	9f 92       	push	r9
    4be8:	af 92       	push	r10
    4bea:	bf 92       	push	r11
    4bec:	cf 92       	push	r12
    4bee:	df 92       	push	r13
    4bf0:	ef 92       	push	r14
    4bf2:	ff 92       	push	r15
    4bf4:	0f 93       	push	r16
    4bf6:	1f 93       	push	r17
    4bf8:	cf 93       	push	r28
    4bfa:	df 93       	push	r29
    4bfc:	cd b7       	in	r28, 0x3d	; 61
    4bfe:	de b7       	in	r29, 0x3e	; 62
    4c00:	ca 1b       	sub	r28, r26
    4c02:	db 0b       	sbc	r29, r27
    4c04:	0f b6       	in	r0, 0x3f	; 63
    4c06:	f8 94       	cli
    4c08:	de bf       	out	0x3e, r29	; 62
    4c0a:	0f be       	out	0x3f, r0	; 63
    4c0c:	cd bf       	out	0x3d, r28	; 61
    4c0e:	09 94       	ijmp

00004c10 <__epilogue_restores__>:
    4c10:	2a 88       	ldd	r2, Y+18	; 0x12
    4c12:	39 88       	ldd	r3, Y+17	; 0x11
    4c14:	48 88       	ldd	r4, Y+16	; 0x10
    4c16:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c18:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c20:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c22:	b9 84       	ldd	r11, Y+9	; 0x09
    4c24:	c8 84       	ldd	r12, Y+8	; 0x08
    4c26:	df 80       	ldd	r13, Y+7	; 0x07
    4c28:	ee 80       	ldd	r14, Y+6	; 0x06
    4c2a:	fd 80       	ldd	r15, Y+5	; 0x05
    4c2c:	0c 81       	ldd	r16, Y+4	; 0x04
    4c2e:	1b 81       	ldd	r17, Y+3	; 0x03
    4c30:	aa 81       	ldd	r26, Y+2	; 0x02
    4c32:	b9 81       	ldd	r27, Y+1	; 0x01
    4c34:	ce 0f       	add	r28, r30
    4c36:	d1 1d       	adc	r29, r1
    4c38:	0f b6       	in	r0, 0x3f	; 63
    4c3a:	f8 94       	cli
    4c3c:	de bf       	out	0x3e, r29	; 62
    4c3e:	0f be       	out	0x3f, r0	; 63
    4c40:	cd bf       	out	0x3d, r28	; 61
    4c42:	ed 01       	movw	r28, r26
    4c44:	08 95       	ret

00004c46 <_exit>:
    4c46:	f8 94       	cli

00004c48 <__stop_program>:
    4c48:	ff cf       	rjmp	.-2      	; 0x4c48 <__stop_program>
